
motor-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe04  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016a8  0800ffd8  0800ffd8  0001ffd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011680  08011680  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  08011680  08011680  00021680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011688  08011688  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011688  08011688  00021688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801168c  0801168c  0002168c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08011690  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000097e0  20000220  080118b0  00030220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009a00  080118b0  00039a00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eec8  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a95  00000000  00000000  0004f118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e8  00000000  00000000  00053bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f8  00000000  00000000  00055398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000294dc  00000000  00000000  00056990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020955  00000000  00000000  0007fe6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e75b0  00000000  00000000  000a07c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00187d71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bc8  00000000  00000000  00187dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ffbc 	.word	0x0800ffbc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	0800ffbc 	.word	0x0800ffbc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001058:	4a2a      	ldr	r2, [pc, #168]	; (8001104 <MX_ADC1_Init+0xcc>)
 800105a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800105c:	4b28      	ldr	r3, [pc, #160]	; (8001100 <MX_ADC1_Init+0xc8>)
 800105e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001062:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001064:	4b26      	ldr	r3, [pc, #152]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800106a:	4b25      	ldr	r3, [pc, #148]	; (8001100 <MX_ADC1_Init+0xc8>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001070:	4b23      	ldr	r3, [pc, #140]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001072:	2200      	movs	r2, #0
 8001074:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001076:	4b22      	ldr	r3, [pc, #136]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800107e:	4b20      	ldr	r3, [pc, #128]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001080:	2200      	movs	r2, #0
 8001082:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001086:	4a20      	ldr	r2, [pc, #128]	; (8001108 <MX_ADC1_Init+0xd0>)
 8001088:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <MX_ADC1_Init+0xc8>)
 800108c:	2200      	movs	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001092:	2201      	movs	r2, #1
 8001094:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <MX_ADC1_Init+0xc8>)
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <MX_ADC1_Init+0xc8>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a4:	4816      	ldr	r0, [pc, #88]	; (8001100 <MX_ADC1_Init+0xc8>)
 80010a6:	f004 fcbf 	bl	8005a28 <HAL_ADC_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80010b0:	f002 ff9e 	bl	8003ff0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 80010b4:	2316      	movs	r3, #22
 80010b6:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	480e      	ldr	r0, [pc, #56]	; (8001100 <MX_ADC1_Init+0xc8>)
 80010c8:	f004 fff2 	bl	80060b0 <HAL_ADCEx_MultiModeConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80010d2:	f002 ff8d 	bl	8003ff0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010d6:	230a      	movs	r3, #10
 80010d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 80010da:	2301      	movs	r3, #1
 80010dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	4619      	mov	r1, r3
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <MX_ADC1_Init+0xc8>)
 80010e8:	f004 fdb4 	bl	8005c54 <HAL_ADC_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80010f2:	f002 ff7d 	bl	8003ff0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	3720      	adds	r7, #32
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000023c 	.word	0x2000023c
 8001104:	40012000 	.word	0x40012000
 8001108:	0f000001 	.word	0x0f000001

0800110c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001112:	463b      	mov	r3, r7
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800111e:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001120:	4a1e      	ldr	r2, [pc, #120]	; (800119c <MX_ADC2_Init+0x90>)
 8001122:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001126:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800112a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <MX_ADC2_Init+0x8c>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <MX_ADC2_Init+0x8c>)
 800113a:	2200      	movs	r2, #0
 800113c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_ADC2_Init+0x8c>)
 800114e:	2201      	movs	r2, #1
 8001150:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_ADC2_Init+0x8c>)
 800115c:	2201      	movs	r2, #1
 800115e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001162:	f004 fc61 	bl	8005a28 <HAL_ADC_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 800116c:	f002 ff40 	bl	8003ff0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001170:	230b      	movs	r3, #11
 8001172:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001174:	2301      	movs	r3, #1
 8001176:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_ADC2_Init+0x8c>)
 8001182:	f004 fd67 	bl	8005c54 <HAL_ADC_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 800118c:	f002 ff30 	bl	8003ff0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000284 	.word	0x20000284
 800119c:	40012100 	.word	0x40012100

080011a0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011a6:	463b      	mov	r3, r7
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80011b2:	4b1e      	ldr	r3, [pc, #120]	; (800122c <MX_ADC3_Init+0x8c>)
 80011b4:	4a1e      	ldr	r2, [pc, #120]	; (8001230 <MX_ADC3_Init+0x90>)
 80011b6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011b8:	4b1c      	ldr	r3, [pc, #112]	; (800122c <MX_ADC3_Init+0x8c>)
 80011ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011be:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <MX_ADC3_Init+0x8c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <MX_ADC3_Init+0x8c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011cc:	4b17      	ldr	r3, [pc, #92]	; (800122c <MX_ADC3_Init+0x8c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <MX_ADC3_Init+0x8c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_ADC3_Init+0x8c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_ADC3_Init+0x8c>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_ADC3_Init+0x8c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_ADC3_Init+0x8c>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <MX_ADC3_Init+0x8c>)
 80011f6:	f004 fc17 	bl	8005a28 <HAL_ADC_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC3_Init+0x64>
  {
    Error_Handler();
 8001200:	f002 fef6 	bl	8003ff0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001204:	2300      	movs	r3, #0
 8001206:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001208:	2301      	movs	r3, #1
 800120a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_ADC3_Init+0x8c>)
 8001216:	f004 fd1d 	bl	8005c54 <HAL_ADC_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8001220:	f002 fee6 	bl	8003ff0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200002cc 	.word	0x200002cc
 8001230:	40012200 	.word	0x40012200

08001234 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08e      	sub	sp, #56	; 0x38
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a45      	ldr	r2, [pc, #276]	; (8001368 <HAL_ADC_MspInit+0x134>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d128      	bne.n	80012a8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
 800125a:	4b44      	ldr	r3, [pc, #272]	; (800136c <HAL_ADC_MspInit+0x138>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a43      	ldr	r2, [pc, #268]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b41      	ldr	r3, [pc, #260]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126e:	623b      	str	r3, [r7, #32]
 8001270:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	4b3d      	ldr	r3, [pc, #244]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a3c      	ldr	r2, [pc, #240]	; (800136c <HAL_ADC_MspInit+0x138>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b3a      	ldr	r3, [pc, #232]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800128e:	2301      	movs	r3, #1
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001292:	2303      	movs	r3, #3
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129e:	4619      	mov	r1, r3
 80012a0:	4833      	ldr	r0, [pc, #204]	; (8001370 <HAL_ADC_MspInit+0x13c>)
 80012a2:	f005 ff35 	bl	8007110 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80012a6:	e05a      	b.n	800135e <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC2)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a31      	ldr	r2, [pc, #196]	; (8001374 <HAL_ADC_MspInit+0x140>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d128      	bne.n	8001304 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	4b2d      	ldr	r3, [pc, #180]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	4a2c      	ldr	r2, [pc, #176]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c0:	6453      	str	r3, [r2, #68]	; 0x44
 80012c2:	4b2a      	ldr	r3, [pc, #168]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012ca:	61bb      	str	r3, [r7, #24]
 80012cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	4b26      	ldr	r3, [pc, #152]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a25      	ldr	r2, [pc, #148]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b23      	ldr	r3, [pc, #140]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012ea:	2302      	movs	r3, #2
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ee:	2303      	movs	r3, #3
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fa:	4619      	mov	r1, r3
 80012fc:	481c      	ldr	r0, [pc, #112]	; (8001370 <HAL_ADC_MspInit+0x13c>)
 80012fe:	f005 ff07 	bl	8007110 <HAL_GPIO_Init>
}
 8001302:	e02c      	b.n	800135e <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC3)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a1b      	ldr	r2, [pc, #108]	; (8001378 <HAL_ADC_MspInit+0x144>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d127      	bne.n	800135e <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b16      	ldr	r3, [pc, #88]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	4a15      	ldr	r2, [pc, #84]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001318:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800131c:	6453      	str	r3, [r2, #68]	; 0x44
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a0e      	ldr	r2, [pc, #56]	; (800136c <HAL_ADC_MspInit+0x138>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <HAL_ADC_MspInit+0x138>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001346:	2301      	movs	r3, #1
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134a:	2303      	movs	r3, #3
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001356:	4619      	mov	r1, r3
 8001358:	4808      	ldr	r0, [pc, #32]	; (800137c <HAL_ADC_MspInit+0x148>)
 800135a:	f005 fed9 	bl	8007110 <HAL_GPIO_Init>
}
 800135e:	bf00      	nop
 8001360:	3738      	adds	r7, #56	; 0x38
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40012000 	.word	0x40012000
 800136c:	40023800 	.word	0x40023800
 8001370:	40020800 	.word	0x40020800
 8001374:	40012100 	.word	0x40012100
 8001378:	40012200 	.word	0x40012200
 800137c:	40020000 	.word	0x40020000

08001380 <order_phases>:
#include "math_ops.h"
#include "structs.h"


// order phases has code ported over from newer motor control repo (not tested)
void order_phases(EncoderCMUStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001380:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001384:	b098      	sub	sp, #96	; 0x60
 8001386:	af04      	add	r7, sp, #16
 8001388:	60f8      	str	r0, [r7, #12]
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	603b      	str	r3, [r7, #0]
	///Checks phase order, to ensure that positive Q current produces
	///torque in the positive direction wrt the position sensor.
	printf("\n\r Checking phase ordering\n\r");
 8001390:	4893      	ldr	r0, [pc, #588]	; (80015e0 <order_phases+0x260>)
 8001392:	f009 ff5b 	bl	800b24c <iprintf>
	float theta_ref = 0;
 8001396:	f04f 0300 	mov.w	r3, #0
 800139a:	64fb      	str	r3, [r7, #76]	; 0x4c
	float theta_actual = 0;
 800139c:	f04f 0300 	mov.w	r3, #0
 80013a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	float v_d = V_CAL;                                                             //Put all volts on the D-Axis
 80013a2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80013a6:	63bb      	str	r3, [r7, #56]	; 0x38
	float v_q = 0.0f;
 80013a8:	f04f 0300 	mov.w	r3, #0
 80013ac:	637b      	str	r3, [r7, #52]	; 0x34
	float v_u, v_v, v_w = 0;
 80013ae:	f04f 0300 	mov.w	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
	float dtc_u, dtc_v, dtc_w = .5f;
 80013b4:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80013b8:	613b      	str	r3, [r7, #16]
	int sample_counter = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	64bb      	str	r3, [r7, #72]	; 0x48

	///Set voltage angle to zero, wait for rotor position to settle
	abc(theta_ref, v_d, v_q, &v_u, &v_v, &v_w);                                 //inverse dq0 transform on voltages
 80013be:	f107 021c 	add.w	r2, r7, #28
 80013c2:	f107 0120 	add.w	r1, r7, #32
 80013c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ca:	4618      	mov	r0, r3
 80013cc:	ed97 1a0d 	vldr	s2, [r7, #52]	; 0x34
 80013d0:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 80013d4:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 80013d8:	f000 ffca 	bl	8002370 <abc>
	//printf("\n\rorder phases abc %f   %f   %f   %f   %f   %f   \n\r",  theta_ref, v_d, v_q, &v_u, &v_v, &v_w); //TEST//
	svm(1.0, v_u, v_v, v_w, 0, &dtc_u, &dtc_v, &dtc_w);                            //space vector modulation
 80013dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013e0:	ed97 7a08 	vldr	s14, [r7, #32]
 80013e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	f107 0214 	add.w	r2, r7, #20
 80013f0:	f107 0118 	add.w	r1, r7, #24
 80013f4:	2000      	movs	r0, #0
 80013f6:	eef0 1a66 	vmov.f32	s3, s13
 80013fa:	eeb0 1a47 	vmov.f32	s2, s14
 80013fe:	eef0 0a67 	vmov.f32	s1, s15
 8001402:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001406:	f001 f8c7 	bl	8002598 <svm>
	//printf("\n\rorder phases svm %f   %f   %f   %f   %f   %f   \n\r",  1.0, v_u, v_v, v_w, 0, &dtc_u, &dtc_v, &dtc_w); //TEST//
	for(int i = 0; i<20000; i++){
 800140a:	2300      	movs	r3, #0
 800140c:	647b      	str	r3, [r7, #68]	; 0x44
 800140e:	e035      	b.n	800147c <order_phases+0xfc>
		TIM1->CCR3 = (PWM_ARR>>1)*(1.0f-dtc_u);                                        // Set duty cycles
 8001410:	edd7 7a06 	vldr	s15, [r7, #24]
 8001414:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001418:	ee77 7a67 	vsub.f32	s15, s14, s15
 800141c:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80015f8 <order_phases+0x278>
 8001420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001424:	4b6f      	ldr	r3, [pc, #444]	; (80015e4 <order_phases+0x264>)
 8001426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800142a:	ee17 2a90 	vmov	r2, s15
 800142e:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR2 = (PWM_ARR>>1)*(1.0f-dtc_v);
 8001430:	edd7 7a05 	vldr	s15, [r7, #20]
 8001434:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143c:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80015f8 <order_phases+0x278>
 8001440:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001444:	4b67      	ldr	r3, [pc, #412]	; (80015e4 <order_phases+0x264>)
 8001446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800144a:	ee17 2a90 	vmov	r2, s15
 800144e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR1 = (PWM_ARR>>1)*(1.0f-dtc_w);
 8001450:	edd7 7a04 	vldr	s15, [r7, #16]
 8001454:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80015f8 <order_phases+0x278>
 8001460:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001464:	4b5f      	ldr	r3, [pc, #380]	; (80015e4 <order_phases+0x264>)
 8001466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800146a:	ee17 2a90 	vmov	r2, s15
 800146e:	635a      	str	r2, [r3, #52]	; 0x34
//		wait_us(100);
		HAL_Delay(1); // might have to change to 100 us later
 8001470:	2001      	movs	r0, #1
 8001472:	f004 fab5 	bl	80059e0 <HAL_Delay>
	for(int i = 0; i<20000; i++){
 8001476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001478:	3301      	adds	r3, #1
 800147a:	647b      	str	r3, [r7, #68]	; 0x44
 800147c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800147e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001482:	4293      	cmp	r3, r2
 8001484:	ddc4      	ble.n	8001410 <order_phases+0x90>
		}
	//ps->ZeroPosition();
	Sample(encoder, DT);
 8001486:	ed9f 0a58 	vldr	s0, [pc, #352]	; 80015e8 <order_phases+0x268>
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f002 ff6a 	bl	8004364 <Sample>
//	wait_us(1000);
	HAL_Delay(1);
 8001490:	2001      	movs	r0, #1
 8001492:	f004 faa5 	bl	80059e0 <HAL_Delay>
	//float theta_start = ps->GetMechPositionFixed();                                  //get initial rotor position
	float theta_start;
	controller->i_b = I_SCALE*(float)(controller->adc2_raw - controller->adc2_offset);    //Calculate phase currents from ADC readings
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	ee07 3a90 	vmov	s15, r3
 80014a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014aa:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80015ec <order_phases+0x26c>
 80014ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	edc3 7a04 	vstr	s15, [r3, #16]
	controller->i_c = I_SCALE*(float)(controller->adc1_raw - controller->adc1_offset);
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ca:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80015ec <order_phases+0x26c>
 80014ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	edc3 7a05 	vstr	s15, [r3, #20]
	controller->i_a = -controller->i_b - controller->i_c;
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	edd3 7a04 	vldr	s15, [r3, #16]
 80014de:	eeb1 7a67 	vneg.f32	s14, s15
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	edd3 7a05 	vldr	s15, [r3, #20]
 80014e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	edc3 7a03 	vstr	s15, [r3, #12]
	dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	edd3 7a08 	vldr	s15, [r3, #32]
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	ed93 7a03 	vldr	s14, [r3, #12]
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	edd3 6a04 	vldr	s13, [r3, #16]
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	ed93 6a05 	vldr	s12, [r3, #20]
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	3334      	adds	r3, #52	; 0x34
 8001514:	4619      	mov	r1, r3
 8001516:	4610      	mov	r0, r2
 8001518:	eef0 1a46 	vmov.f32	s3, s12
 800151c:	eeb0 1a66 	vmov.f32	s2, s13
 8001520:	eef0 0a47 	vmov.f32	s1, s14
 8001524:	eeb0 0a67 	vmov.f32	s0, s15
 8001528:	f000 ffa6 	bl	8002478 <dq0>
	float current = sqrt(pow(controller->i_d, 2) + pow(controller->i_q, 2));
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff f829 	bl	8000588 <__aeabi_f2d>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	ed9f 1b27 	vldr	d1, [pc, #156]	; 80015d8 <order_phases+0x258>
 800153e:	ec43 2b10 	vmov	d0, r2, r3
 8001542:	f00d fbcd 	bl	800ece0 <pow>
 8001546:	ec55 4b10 	vmov	r4, r5, d0
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff f81a 	bl	8000588 <__aeabi_f2d>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80015d8 <order_phases+0x258>
 800155c:	ec43 2b10 	vmov	d0, r2, r3
 8001560:	f00d fbbe 	bl	800ece0 <pow>
 8001564:	ec53 2b10 	vmov	r2, r3, d0
 8001568:	4620      	mov	r0, r4
 800156a:	4629      	mov	r1, r5
 800156c:	f7fe feae 	bl	80002cc <__adddf3>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	ec43 2b17 	vmov	d7, r2, r3
 8001578:	eeb0 0a47 	vmov.f32	s0, s14
 800157c:	eef0 0a67 	vmov.f32	s1, s15
 8001580:	f00d fc1e 	bl	800edc0 <sqrt>
 8001584:	ec53 2b10 	vmov	r2, r3, d0
 8001588:	4610      	mov	r0, r2
 800158a:	4619      	mov	r1, r3
 800158c:	f7ff fb4c 	bl	8000c28 <__aeabi_d2f>
 8001590:	4603      	mov	r3, r0
 8001592:	633b      	str	r3, [r7, #48]	; 0x30
	printf("\n\rCurrent\n\r");
 8001594:	4816      	ldr	r0, [pc, #88]	; (80015f0 <order_phases+0x270>)
 8001596:	f009 fe59 	bl	800b24c <iprintf>
	printf("%f    %f   %f\n\r\n\r", controller->i_d, controller->i_q, current);
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe fff2 	bl	8000588 <__aeabi_f2d>
 80015a4:	4680      	mov	r8, r0
 80015a6:	4689      	mov	r9, r1
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe ffeb 	bl	8000588 <__aeabi_f2d>
 80015b2:	4604      	mov	r4, r0
 80015b4:	460d      	mov	r5, r1
 80015b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015b8:	f7fe ffe6 	bl	8000588 <__aeabi_f2d>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80015c4:	e9cd 4500 	strd	r4, r5, [sp]
 80015c8:	4642      	mov	r2, r8
 80015ca:	464b      	mov	r3, r9
 80015cc:	4809      	ldr	r0, [pc, #36]	; (80015f4 <order_phases+0x274>)
 80015ce:	f009 fe3d 	bl	800b24c <iprintf>
	/// Rotate voltage angle
	while(theta_ref < 4*PI_F){                                                    //rotate for 2 electrical cycles
 80015d2:	e0ac      	b.n	800172e <order_phases+0x3ae>
 80015d4:	f3af 8000 	nop.w
 80015d8:	00000000 	.word	0x00000000
 80015dc:	40000000 	.word	0x40000000
 80015e0:	0800ffd8 	.word	0x0800ffd8
 80015e4:	40010000 	.word	0x40010000
 80015e8:	37d1b717 	.word	0x37d1b717
 80015ec:	3ca50000 	.word	0x3ca50000
 80015f0:	0800fff8 	.word	0x0800fff8
 80015f4:	08010004 	.word	0x08010004
 80015f8:	448ca000 	.word	0x448ca000
		abc(theta_ref, v_d, v_q, &v_u, &v_v, &v_w);                             //inverse dq0 transform on voltages
 80015fc:	f107 021c 	add.w	r2, r7, #28
 8001600:	f107 0120 	add.w	r1, r7, #32
 8001604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001608:	4618      	mov	r0, r3
 800160a:	ed97 1a0d 	vldr	s2, [r7, #52]	; 0x34
 800160e:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 8001612:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8001616:	f000 feab 	bl	8002370 <abc>
		// printf("\n\rorder phases abc %f   %f   %f   %f   %f   %f   \n\r",  theta_ref, v_d, v_q, &v_u, &v_v, &v_w); //TEST//
		// wait_us(10000);
		svm(1.0, v_u, v_v, v_w, 0, &dtc_u, &dtc_v, &dtc_w);                        //space vector modulation
 800161a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800161e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001622:	edd7 6a07 	vldr	s13, [r7, #28]
 8001626:	f107 0310 	add.w	r3, r7, #16
 800162a:	f107 0214 	add.w	r2, r7, #20
 800162e:	f107 0118 	add.w	r1, r7, #24
 8001632:	2000      	movs	r0, #0
 8001634:	eef0 1a66 	vmov.f32	s3, s13
 8001638:	eeb0 1a47 	vmov.f32	s2, s14
 800163c:	eef0 0a67 	vmov.f32	s1, s15
 8001640:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001644:	f000 ffa8 	bl	8002598 <svm>
		// printf("\n\rorder phases svm %f   %f   %f   %f   %f   %f   \n\r",  1.0, v_u, v_v, v_w, 0, &dtc_u, &dtc_v, &dtc_w); //TEST//
//		wait_us(100);
		HAL_Delay(1); // might have to change to 100 us later
 8001648:	2001      	movs	r0, #1
 800164a:	f004 f9c9 	bl	80059e0 <HAL_Delay>
		TIM1->CCR3 = (PWM_ARR>>1)*(1.0f-dtc_u);                                        //Set duty cycles
 800164e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001652:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800165a:	ed1f 7a19 	vldr	s14, [pc, #-100]	; 80015f8 <order_phases+0x278>
 800165e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001662:	4b59      	ldr	r3, [pc, #356]	; (80017c8 <order_phases+0x448>)
 8001664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001668:	ee17 2a90 	vmov	r2, s15
 800166c:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR2 = (PWM_ARR>>1)*(1.0f-dtc_v);
 800166e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001672:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800167a:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80017cc <order_phases+0x44c>
 800167e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001682:	4b51      	ldr	r3, [pc, #324]	; (80017c8 <order_phases+0x448>)
 8001684:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001688:	ee17 2a90 	vmov	r2, s15
 800168c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR1 = (PWM_ARR>>1)*(1.0f-dtc_w);
 800168e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001692:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800169a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80017cc <order_phases+0x44c>
 800169e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a2:	4b49      	ldr	r3, [pc, #292]	; (80017c8 <order_phases+0x448>)
 80016a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016a8:	ee17 2a90 	vmov	r2, s15
 80016ac:	635a      	str	r2, [r3, #52]	; 0x34
	   Sample(encoder, DT);                                                            //sample position sensor
 80016ae:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80017d0 <order_phases+0x450>
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f002 fe56 	bl	8004364 <Sample>
	   theta_actual = encoder->MechPosition + encoder->MechOffset;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	ed93 7a04 	vldr	s14, [r3, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	edd3 7a05 	vldr	s15, [r3, #20]
 80016c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	   if(theta_ref==0){theta_start = theta_actual;}
 80016cc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80016d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d8:	d101      	bne.n	80016de <order_phases+0x35e>
 80016da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016dc:	643b      	str	r3, [r7, #64]	; 0x40
	   if(sample_counter > 200){
 80016de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016e0:	2bc8      	cmp	r3, #200	; 0xc8
 80016e2:	dd19      	ble.n	8001718 <order_phases+0x398>
		   sample_counter = 0 ;
 80016e4:	2300      	movs	r3, #0
 80016e6:	64bb      	str	r3, [r7, #72]	; 0x48
		printf("%.4f   %.4f\n\r", theta_ref/(NPP), theta_actual);
 80016e8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80016ec:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 80016f0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016f4:	ee16 0a90 	vmov	r0, s13
 80016f8:	f7fe ff46 	bl	8000588 <__aeabi_f2d>
 80016fc:	4604      	mov	r4, r0
 80016fe:	460d      	mov	r5, r1
 8001700:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001702:	f7fe ff41 	bl	8000588 <__aeabi_f2d>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	e9cd 2300 	strd	r2, r3, [sp]
 800170e:	4622      	mov	r2, r4
 8001710:	462b      	mov	r3, r5
 8001712:	4830      	ldr	r0, [pc, #192]	; (80017d4 <order_phases+0x454>)
 8001714:	f009 fd9a 	bl	800b24c <iprintf>
		}
		sample_counter++;
 8001718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800171a:	3301      	adds	r3, #1
 800171c:	64bb      	str	r3, [r7, #72]	; 0x48
	   theta_ref += 0.001f;
 800171e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001722:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80017d8 <order_phases+0x458>
 8001726:	ee77 7a87 	vadd.f32	s15, s15, s14
 800172a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	while(theta_ref < 4*PI_F){                                                    //rotate for 2 electrical cycles
 800172e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001732:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80017dc <order_phases+0x45c>
 8001736:	eef4 7ac7 	vcmpe.f32	s15, s14
 800173a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173e:	f53f af5d 	bmi.w	80015fc <order_phases+0x27c>
		}
	float theta_end = encoder->MechPosition + encoder->MechOffset;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	ed93 7a04 	vldr	s14, [r3, #16]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	edd3 7a05 	vldr	s15, [r3, #20]
 800174e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001752:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	int direction = (theta_end - theta_start)>0;
 8001756:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800175a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800175e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001762:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176a:	bfcc      	ite	gt
 800176c:	2301      	movgt	r3, #1
 800176e:	2300      	movle	r3, #0
 8001770:	b2db      	uxtb	r3, r3
 8001772:	62bb      	str	r3, [r7, #40]	; 0x28
	printf("Theta Start:   %f    Theta End:  %f\n\r", theta_start, theta_end);
 8001774:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001776:	f7fe ff07 	bl	8000588 <__aeabi_f2d>
 800177a:	4604      	mov	r4, r0
 800177c:	460d      	mov	r5, r1
 800177e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001780:	f7fe ff02 	bl	8000588 <__aeabi_f2d>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	e9cd 2300 	strd	r2, r3, [sp]
 800178c:	4622      	mov	r2, r4
 800178e:	462b      	mov	r3, r5
 8001790:	4813      	ldr	r0, [pc, #76]	; (80017e0 <order_phases+0x460>)
 8001792:	f009 fd5b 	bl	800b24c <iprintf>
	printf("Direction:  %d\n\r", direction);
 8001796:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001798:	4812      	ldr	r0, [pc, #72]	; (80017e4 <order_phases+0x464>)
 800179a:	f009 fd57 	bl	800b24c <iprintf>
	if(direction){printf("Phasing correct\n\r");}
 800179e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <order_phases+0x42c>
 80017a4:	4810      	ldr	r0, [pc, #64]	; (80017e8 <order_phases+0x468>)
 80017a6:	f009 fd51 	bl	800b24c <iprintf>
 80017aa:	e005      	b.n	80017b8 <order_phases+0x438>
	else if(!direction){printf("Phasing incorrect.  Swapping phases V and W\n\r");}
 80017ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d102      	bne.n	80017b8 <order_phases+0x438>
 80017b2:	480e      	ldr	r0, [pc, #56]	; (80017ec <order_phases+0x46c>)
 80017b4:	f009 fd4a 	bl	800b24c <iprintf>
	PHASE_ORDER = direction;
 80017b8:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <order_phases+0x470>)
 80017ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017bc:	6013      	str	r3, [r2, #0]
}
 80017be:	bf00      	nop
 80017c0:	3750      	adds	r7, #80	; 0x50
 80017c2:	46bd      	mov	sp, r7
 80017c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017c8:	40010000 	.word	0x40010000
 80017cc:	448ca000 	.word	0x448ca000
 80017d0:	37d1b717 	.word	0x37d1b717
 80017d4:	08010018 	.word	0x08010018
 80017d8:	3a83126f 	.word	0x3a83126f
 80017dc:	41490fdb 	.word	0x41490fdb
 80017e0:	08010028 	.word	0x08010028
 80017e4:	08010050 	.word	0x08010050
 80017e8:	08010064 	.word	0x08010064
 80017ec:	08010078 	.word	0x08010078
 80017f0:	2000043c 	.word	0x2000043c

080017f4 <calibrate_encoder>:
//        delete[] raw_b;

    }


void calibrate_encoder(EncoderCMUStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
 8001800:	603b      	str	r3, [r7, #0]
//
//		}
//
//	cal->started = 0;
//	cal->done_cal = 1;
}
 8001802:	bf00      	nop
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001814:	4b17      	ldr	r3, [pc, #92]	; (8001874 <MX_CAN1_Init+0x64>)
 8001816:	4a18      	ldr	r2, [pc, #96]	; (8001878 <MX_CAN1_Init+0x68>)
 8001818:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800181a:	4b16      	ldr	r3, [pc, #88]	; (8001874 <MX_CAN1_Init+0x64>)
 800181c:	2203      	movs	r2, #3
 800181e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001820:	4b14      	ldr	r3, [pc, #80]	; (8001874 <MX_CAN1_Init+0x64>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001826:	4b13      	ldr	r3, [pc, #76]	; (8001874 <MX_CAN1_Init+0x64>)
 8001828:	2200      	movs	r2, #0
 800182a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <MX_CAN1_Init+0x64>)
 800182e:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8001832:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <MX_CAN1_Init+0x64>)
 8001836:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800183a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800183c:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <MX_CAN1_Init+0x64>)
 800183e:	2200      	movs	r2, #0
 8001840:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001842:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <MX_CAN1_Init+0x64>)
 8001844:	2200      	movs	r2, #0
 8001846:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001848:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <MX_CAN1_Init+0x64>)
 800184a:	2200      	movs	r2, #0
 800184c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <MX_CAN1_Init+0x64>)
 8001850:	2200      	movs	r2, #0
 8001852:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001854:	4b07      	ldr	r3, [pc, #28]	; (8001874 <MX_CAN1_Init+0x64>)
 8001856:	2200      	movs	r2, #0
 8001858:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <MX_CAN1_Init+0x64>)
 800185c:	2200      	movs	r2, #0
 800185e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001860:	4804      	ldr	r0, [pc, #16]	; (8001874 <MX_CAN1_Init+0x64>)
 8001862:	f004 fc6b 	bl	800613c <HAL_CAN_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800186c:	f002 fbc0 	bl	8003ff0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000314 	.word	0x20000314
 8001878:	40006400 	.word	0x40006400

0800187c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08a      	sub	sp, #40	; 0x28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a1d      	ldr	r2, [pc, #116]	; (8001910 <HAL_CAN_MspInit+0x94>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d134      	bne.n	8001908 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <HAL_CAN_MspInit+0x98>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4a1b      	ldr	r2, [pc, #108]	; (8001914 <HAL_CAN_MspInit+0x98>)
 80018a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018ac:	6413      	str	r3, [r2, #64]	; 0x40
 80018ae:	4b19      	ldr	r3, [pc, #100]	; (8001914 <HAL_CAN_MspInit+0x98>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <HAL_CAN_MspInit+0x98>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a14      	ldr	r2, [pc, #80]	; (8001914 <HAL_CAN_MspInit+0x98>)
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_CAN_MspInit+0x98>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80018e8:	2309      	movs	r3, #9
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	4619      	mov	r1, r3
 80018f2:	4809      	ldr	r0, [pc, #36]	; (8001918 <HAL_CAN_MspInit+0x9c>)
 80018f4:	f005 fc0c 	bl	8007110 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2100      	movs	r1, #0
 80018fc:	2014      	movs	r0, #20
 80018fe:	f005 fb3e 	bl	8006f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001902:	2014      	movs	r0, #20
 8001904:	f005 fb57 	bl	8006fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001908:	bf00      	nop
 800190a:	3728      	adds	r7, #40	; 0x28
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40006400 	.word	0x40006400
 8001914:	40023800 	.word	0x40023800
 8001918:	40020400 	.word	0x40020400

0800191c <can_rx_init>:
  }
}

/* USER CODE BEGIN 1 */

void can_rx_init(CANRxMessage *msg){
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	msg->filter.FilterFIFOAssignment=CAN_FILTER_FIFO0; 	// set fifo assignment
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	639a      	str	r2, [r3, #56]	; 0x38
	msg->filter.FilterIdHigh=CAN_ID<<5; 				// CAN ID
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <can_rx_init+0x54>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	015b      	lsls	r3, r3, #5
 8001930:	461a      	mov	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	629a      	str	r2, [r3, #40]	; 0x28
	msg->filter.FilterIdLow=0x0;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	62da      	str	r2, [r3, #44]	; 0x2c
	msg->filter.FilterMaskIdHigh=0xFFF;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001942:	631a      	str	r2, [r3, #48]	; 0x30
	msg->filter.FilterMaskIdLow=0;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	635a      	str	r2, [r3, #52]	; 0x34
	msg->filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	641a      	str	r2, [r3, #64]	; 0x40
	msg->filter.FilterScale=CAN_FILTERSCALE_32BIT;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	645a      	str	r2, [r3, #68]	; 0x44
	msg->filter.FilterActivation=ENABLE;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	649a      	str	r2, [r3, #72]	; 0x48
	HAL_CAN_ConfigFilter(&CAN_H, &msg->filter);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3328      	adds	r3, #40	; 0x28
 8001960:	4619      	mov	r1, r3
 8001962:	4804      	ldr	r0, [pc, #16]	; (8001974 <can_rx_init+0x58>)
 8001964:	f004 fce6 	bl	8006334 <HAL_CAN_ConfigFilter>
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	2000043c 	.word	0x2000043c
 8001974:	20000314 	.word	0x20000314

08001978 <can_tx_init>:

void can_tx_init(CANTxMessage *msg){
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	msg->tx_header.DLC = 6; 			// message size of 8 byte
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2206      	movs	r2, #6
 8001984:	619a      	str	r2, [r3, #24]
	msg->tx_header.IDE=CAN_ID_STD; 		// set identifier to standard
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
	msg->tx_header.RTR=CAN_RTR_DATA; 	// set data type to remote transmission request?
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	615a      	str	r2, [r3, #20]
	msg->tx_header.StdId = CAN_MASTER;  // recipient CAN ID
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <can_tx_init+0x30>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	461a      	mov	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	609a      	str	r2, [r3, #8]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	2000043c 	.word	0x2000043c

080019ac <pack_reply>:
/// 0: [position[15-8]]
/// 1: [position[7-0]]
/// 2: [velocity[11-4]]
/// 3: [velocity[3-0], current[11-8]]
/// 4: [current[7-0]]
void pack_reply(CANTxMessage *msg, uint8_t id, float p, float v, float t){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6178      	str	r0, [r7, #20]
 80019b4:	460b      	mov	r3, r1
 80019b6:	ed87 0a03 	vstr	s0, [r7, #12]
 80019ba:	edc7 0a02 	vstr	s1, [r7, #8]
 80019be:	ed87 1a01 	vstr	s2, [r7, #4]
 80019c2:	74fb      	strb	r3, [r7, #19]
    int p_int = float_to_uint(p, P_MIN, P_MAX, 16);
 80019c4:	4b34      	ldr	r3, [pc, #208]	; (8001a98 <pack_reply+0xec>)
 80019c6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80019ca:	4b33      	ldr	r3, [pc, #204]	; (8001a98 <pack_reply+0xec>)
 80019cc:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80019d0:	2010      	movs	r0, #16
 80019d2:	eeb0 1a47 	vmov.f32	s2, s14
 80019d6:	eef0 0a67 	vmov.f32	s1, s15
 80019da:	ed97 0a03 	vldr	s0, [r7, #12]
 80019de:	f002 fb76 	bl	80040ce <float_to_uint>
 80019e2:	6278      	str	r0, [r7, #36]	; 0x24
    int v_int = float_to_uint(v, V_MIN, V_MAX, 12);
 80019e4:	4b2c      	ldr	r3, [pc, #176]	; (8001a98 <pack_reply+0xec>)
 80019e6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80019ea:	4b2b      	ldr	r3, [pc, #172]	; (8001a98 <pack_reply+0xec>)
 80019ec:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80019f0:	200c      	movs	r0, #12
 80019f2:	eeb0 1a47 	vmov.f32	s2, s14
 80019f6:	eef0 0a67 	vmov.f32	s1, s15
 80019fa:	ed97 0a02 	vldr	s0, [r7, #8]
 80019fe:	f002 fb66 	bl	80040ce <float_to_uint>
 8001a02:	6238      	str	r0, [r7, #32]
    int t_int = float_to_uint(t, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 8001a04:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <pack_reply+0xec>)
 8001a06:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a0a:	eeb1 7a67 	vneg.f32	s14, s15
 8001a0e:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <pack_reply+0xec>)
 8001a10:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001a14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a18:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <pack_reply+0xec>)
 8001a1a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001a1e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001a22:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <pack_reply+0xec>)
 8001a24:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <pack_reply+0xec>)
 8001a2a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001a2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a32:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <pack_reply+0xec>)
 8001a34:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3c:	200c      	movs	r0, #12
 8001a3e:	eeb0 1a67 	vmov.f32	s2, s15
 8001a42:	eef0 0a66 	vmov.f32	s1, s13
 8001a46:	ed97 0a01 	vldr	s0, [r7, #4]
 8001a4a:	f002 fb40 	bl	80040ce <float_to_uint>
 8001a4e:	61f8      	str	r0, [r7, #28]
    msg->data[0] = id;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	7cfa      	ldrb	r2, [r7, #19]
 8001a54:	705a      	strb	r2, [r3, #1]
    msg->data[1] = p_int>>8;
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	121b      	asrs	r3, r3, #8
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	709a      	strb	r2, [r3, #2]
    msg->data[2] = p_int&0xFF;
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	70da      	strb	r2, [r3, #3]
    msg->data[3] = v_int>>4;
 8001a68:	6a3b      	ldr	r3, [r7, #32]
 8001a6a:	111b      	asrs	r3, r3, #4
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	711a      	strb	r2, [r3, #4]
    msg->data[4] = ((v_int&0xF)<<4) + (t_int>>8);
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	011b      	lsls	r3, r3, #4
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	121b      	asrs	r3, r3, #8
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	4413      	add	r3, r2
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	715a      	strb	r2, [r3, #5]
    msg->data[5] = t_int&0xFF;
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	719a      	strb	r2, [r3, #6]
    }
 8001a8e:	bf00      	nop
 8001a90:	3728      	adds	r7, #40	; 0x28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	2000033c 	.word	0x2000033c

08001a9c <unpack_cmd>:
/// 3: [velocity[3-0], kp[11-8]]
/// 4: [kp[7-0]]
/// 5: [kd[11-4]]
/// 6: [kd[3-0], torque[11-8]]
/// 7: [torque[7-0]]
void unpack_cmd(CANRxMessage msg, float *commands){// ControllerStruct * controller){
 8001a9c:	b084      	sub	sp, #16
 8001a9e:	b590      	push	{r4, r7, lr}
 8001aa0:	b087      	sub	sp, #28
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001aa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        int p_int = (msg.data[0]<<8)|msg.data[1];
 8001aac:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001ab0:	021b      	lsls	r3, r3, #8
 8001ab2:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	617b      	str	r3, [r7, #20]
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 8001aba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001ac4:	0912      	lsrs	r2, r2, #4
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8001acc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ad0:	021b      	lsls	r3, r3, #8
 8001ad2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001ad6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 8001ade:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001ae2:	011b      	lsls	r3, r3, #4
 8001ae4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001ae8:	0912      	lsrs	r2, r2, #4
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	4313      	orrs	r3, r2
 8001aee:	60bb      	str	r3, [r7, #8]
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8001af0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001af4:	021b      	lsls	r3, r3, #8
 8001af6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001afa:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001afe:	4313      	orrs	r3, r2
 8001b00:	607b      	str	r3, [r7, #4]

        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001b02:	4b3e      	ldr	r3, [pc, #248]	; (8001bfc <unpack_cmd+0x160>)
 8001b04:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001b08:	4b3c      	ldr	r3, [pc, #240]	; (8001bfc <unpack_cmd+0x160>)
 8001b0a:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8001b0e:	2110      	movs	r1, #16
 8001b10:	eef0 0a47 	vmov.f32	s1, s14
 8001b14:	eeb0 0a67 	vmov.f32	s0, s15
 8001b18:	6978      	ldr	r0, [r7, #20]
 8001b1a:	f002 fb0b 	bl	8004134 <uint_to_float>
 8001b1e:	eef0 7a40 	vmov.f32	s15, s0
 8001b22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b24:	edc3 7a00 	vstr	s15, [r3]
        commands[1] = uint_to_float(v_int, V_MIN, V_MAX, 12);
 8001b28:	4b34      	ldr	r3, [pc, #208]	; (8001bfc <unpack_cmd+0x160>)
 8001b2a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001b2e:	4b33      	ldr	r3, [pc, #204]	; (8001bfc <unpack_cmd+0x160>)
 8001b30:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b36:	1d1c      	adds	r4, r3, #4
 8001b38:	210c      	movs	r1, #12
 8001b3a:	eef0 0a47 	vmov.f32	s1, s14
 8001b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b42:	6938      	ldr	r0, [r7, #16]
 8001b44:	f002 faf6 	bl	8004134 <uint_to_float>
 8001b48:	eef0 7a40 	vmov.f32	s15, s0
 8001b4c:	edc4 7a00 	vstr	s15, [r4]
        commands[2] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 8001b50:	4b2a      	ldr	r3, [pc, #168]	; (8001bfc <unpack_cmd+0x160>)
 8001b52:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001b56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b58:	f103 0408 	add.w	r4, r3, #8
 8001b5c:	210c      	movs	r1, #12
 8001b5e:	eef0 0a67 	vmov.f32	s1, s15
 8001b62:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8001c00 <unpack_cmd+0x164>
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f002 fae4 	bl	8004134 <uint_to_float>
 8001b6c:	eef0 7a40 	vmov.f32	s15, s0
 8001b70:	edc4 7a00 	vstr	s15, [r4]
        commands[3] = uint_to_float(kd_int, KD_MIN, KD_MAX, 12);
 8001b74:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <unpack_cmd+0x160>)
 8001b76:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001b7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b7c:	f103 040c 	add.w	r4, r3, #12
 8001b80:	210c      	movs	r1, #12
 8001b82:	eef0 0a67 	vmov.f32	s1, s15
 8001b86:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8001c00 <unpack_cmd+0x164>
 8001b8a:	68b8      	ldr	r0, [r7, #8]
 8001b8c:	f002 fad2 	bl	8004134 <uint_to_float>
 8001b90:	eef0 7a40 	vmov.f32	s15, s0
 8001b94:	edc4 7a00 	vstr	s15, [r4]
        commands[4] = uint_to_float(t_int, -I_MAX*KT*GR, I_MAX*KT*GR, 12);
 8001b98:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <unpack_cmd+0x160>)
 8001b9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b9e:	eeb1 7a67 	vneg.f32	s14, s15
 8001ba2:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <unpack_cmd+0x160>)
 8001ba4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001ba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bac:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <unpack_cmd+0x160>)
 8001bae:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001bb2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <unpack_cmd+0x160>)
 8001bb8:	ed93 7a03 	vldr	s14, [r3, #12]
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <unpack_cmd+0x160>)
 8001bbe:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001bc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bc6:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <unpack_cmd+0x160>)
 8001bc8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bd2:	f103 0410 	add.w	r4, r3, #16
 8001bd6:	210c      	movs	r1, #12
 8001bd8:	eef0 0a67 	vmov.f32	s1, s15
 8001bdc:	eeb0 0a66 	vmov.f32	s0, s13
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f002 faa7 	bl	8004134 <uint_to_float>
 8001be6:	eef0 7a40 	vmov.f32	s15, s0
 8001bea:	edc4 7a00 	vstr	s15, [r4]
    //printf("Received   ");
    //printf("%.3f  %.3f  %.3f  %.3f  %.3f   %.3f", controller->p_des, controller->v_des, controller->kp, controller->kd, controller->t_ff, controller->i_q_ref);
    //printf("\n\r");
    }
 8001bee:	bf00      	nop
 8001bf0:	371c      	adds	r7, #28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001bf8:	b004      	add	sp, #16
 8001bfa:	4770      	bx	lr
 8001bfc:	2000033c 	.word	0x2000033c
 8001c00:	00000000 	.word	0x00000000

08001c04 <drv_spi_write>:
#include "drv8323.h"
#include <stdio.h>
#include "usart.h"
#include "hw_config.h"

uint16_t drv_spi_write(DRVStruct * drv, uint16_t val){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	807b      	strh	r3, [r7, #2]
	drv->spi_tx_word = val;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	887a      	ldrh	r2, [r7, #2]
 8001c14:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001c16:	2200      	movs	r2, #0
 8001c18:	2110      	movs	r1, #16
 8001c1a:	480f      	ldr	r0, [pc, #60]	; (8001c58 <drv_spi_write+0x54>)
 8001c1c:	f005 fc0c 	bl	8007438 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	1c9a      	adds	r2, r3, #2
 8001c26:	2364      	movs	r3, #100	; 0x64
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	480b      	ldr	r0, [pc, #44]	; (8001c5c <drv_spi_write+0x58>)
 8001c2e:	f006 fade 	bl	80081ee <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001c32:	bf00      	nop
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <drv_spi_write+0x58>)
 8001c36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d0f9      	beq.n	8001c34 <drv_spi_write+0x30>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001c40:	2201      	movs	r2, #1
 8001c42:	2110      	movs	r1, #16
 8001c44:	4804      	ldr	r0, [pc, #16]	; (8001c58 <drv_spi_write+0x54>)
 8001c46:	f005 fbf7 	bl	8007438 <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	885b      	ldrh	r3, [r3, #2]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40020000 	.word	0x40020000
 8001c5c:	200098ac 	.word	0x200098ac

08001c60 <drv_read_FSR1>:
uint16_t drv_read_FSR1(DRVStruct drv){
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	463b      	mov	r3, r7
 8001c68:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR1);
 8001c6c:	463b      	mov	r3, r7
 8001c6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ffc6 	bl	8001c04 <drv_spi_write>
 8001c78:	4603      	mov	r3, r0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <drv_read_FSR2>:

uint16_t drv_read_FSR2(DRVStruct drv){
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	463b      	mov	r3, r7
 8001c8a:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR2);
 8001c8e:	463b      	mov	r3, r7
 8001c90:	f248 0101 	movw	r1, #32769	; 0x8001
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ffb5 	bl	8001c04 <drv_spi_write>
 8001c9a:	4603      	mov	r3, r0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <drv_read_register>:

uint16_t drv_read_register(DRVStruct drv, int reg){
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	f107 0308 	add.w	r3, r7, #8
 8001cae:	e883 0003 	stmia.w	r3, {r0, r1}
 8001cb2:	607a      	str	r2, [r7, #4]
	return drv_spi_write(&drv, (1<<15)|(reg<<11));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	02db      	lsls	r3, r3, #11
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cc2:	b21b      	sxth	r3, r3
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	f107 0308 	add.w	r3, r7, #8
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff99 	bl	8001c04 <drv_spi_write>
 8001cd2:	4603      	mov	r3, r0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <drv_write_register>:
void drv_write_register(DRVStruct drv, int reg, int val){
 8001cdc:	b590      	push	{r4, r7, lr}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	f107 0408 	add.w	r4, r7, #8
 8001ce6:	e884 0003 	stmia.w	r4, {r0, r1}
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	603b      	str	r3, [r7, #0]
	drv_spi_write(&drv, (reg<<11)|val);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	02db      	lsls	r3, r3, #11
 8001cf2:	b21a      	sxth	r2, r3
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	b21b      	sxth	r3, r3
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	b21b      	sxth	r3, r3
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	f107 0308 	add.w	r3, r7, #8
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff7d 	bl	8001c04 <drv_spi_write>
}
 8001d0a:	bf00      	nop
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd90      	pop	{r4, r7, pc}

08001d12 <drv_write_DCR>:
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 8001d12:	b590      	push	{r4, r7, lr}
 8001d14:	b087      	sub	sp, #28
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	f107 0408 	add.w	r4, r7, #8
 8001d1c:	e884 0003 	stmia.w	r4, {r0, r1}
 8001d20:	607a      	str	r2, [r7, #4]
 8001d22:	603b      	str	r3, [r7, #0]
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	025b      	lsls	r3, r3, #9
 8001d28:	b21b      	sxth	r3, r3
 8001d2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d2e:	b21a      	sxth	r2, r3
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	b21b      	sxth	r3, r3
 8001d36:	4313      	orrs	r3, r2
 8001d38:	b21a      	sxth	r2, r3
 8001d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3c:	01db      	lsls	r3, r3, #7
 8001d3e:	b21b      	sxth	r3, r3
 8001d40:	4313      	orrs	r3, r2
 8001d42:	b21a      	sxth	r2, r3
 8001d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d46:	015b      	lsls	r3, r3, #5
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	b21a      	sxth	r2, r3
 8001d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	b21b      	sxth	r3, r3
 8001d54:	4313      	orrs	r3, r2
 8001d56:	b21a      	sxth	r2, r3
 8001d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	b21b      	sxth	r3, r3
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	b21a      	sxth	r2, r3
 8001d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	b21b      	sxth	r3, r3
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	b21a      	sxth	r2, r3
 8001d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	b21b      	sxth	r3, r3
 8001d72:	4313      	orrs	r3, r2
 8001d74:	b21a      	sxth	r2, r3
 8001d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d78:	b21b      	sxth	r3, r3
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	b21b      	sxth	r3, r3
 8001d7e:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8001d80:	8afa      	ldrh	r2, [r7, #22]
 8001d82:	f107 0308 	add.w	r3, r7, #8
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff3b 	bl	8001c04 <drv_spi_write>
}
 8001d8e:	bf00      	nop
 8001d90:	371c      	adds	r7, #28
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd90      	pop	{r4, r7, pc}

08001d96 <drv_write_OCPCR>:
}
void drv_write_LSR(DRVStruct drv, int CBC, int TDRIVE, int IDRIVEP_LS, int IDRIVEN_LS){
	uint16_t val = (LSR<<11) | (CBC<<10) | (TDRIVE<<8) | (IDRIVEP_LS<<4) | IDRIVEN_LS;
	drv_spi_write(&drv, val);
}
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 8001d96:	b590      	push	{r4, r7, lr}
 8001d98:	b087      	sub	sp, #28
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	f107 0408 	add.w	r4, r7, #8
 8001da0:	e884 0003 	stmia.w	r4, {r0, r1}
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	603b      	str	r3, [r7, #0]
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	029b      	lsls	r3, r3, #10
 8001dac:	b21b      	sxth	r3, r3
 8001dae:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001db2:	b21a      	sxth	r2, r3
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	b21b      	sxth	r3, r3
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	b21a      	sxth	r2, r3
 8001dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc0:	019b      	lsls	r3, r3, #6
 8001dc2:	b21b      	sxth	r3, r3
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	b21a      	sxth	r2, r3
 8001dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dca:	011b      	lsls	r3, r3, #4
 8001dcc:	b21b      	sxth	r3, r3
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	b21a      	sxth	r2, r3
 8001dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd4:	b21b      	sxth	r3, r3
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	b21b      	sxth	r3, r3
 8001dda:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8001ddc:	8afa      	ldrh	r2, [r7, #22]
 8001dde:	f107 0308 	add.w	r3, r7, #8
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff0d 	bl	8001c04 <drv_spi_write>
}
 8001dea:	bf00      	nop
 8001dec:	371c      	adds	r7, #28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd90      	pop	{r4, r7, pc}

08001df2 <drv_write_CSACR>:
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 8001df2:	b590      	push	{r4, r7, lr}
 8001df4:	b087      	sub	sp, #28
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	f107 0408 	add.w	r4, r7, #8
 8001dfc:	e884 0003 	stmia.w	r4, {r0, r1}
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	603b      	str	r3, [r7, #0]
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	029b      	lsls	r3, r3, #10
 8001e08:	b21b      	sxth	r3, r3
 8001e0a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001e0e:	b21a      	sxth	r2, r3
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	025b      	lsls	r3, r3, #9
 8001e14:	b21b      	sxth	r3, r3
 8001e16:	4313      	orrs	r3, r2
 8001e18:	b21a      	sxth	r2, r3
 8001e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1c:	021b      	lsls	r3, r3, #8
 8001e1e:	b21b      	sxth	r3, r3
 8001e20:	4313      	orrs	r3, r2
 8001e22:	b21a      	sxth	r2, r3
 8001e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e26:	019b      	lsls	r3, r3, #6
 8001e28:	b21b      	sxth	r3, r3
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	b21a      	sxth	r2, r3
 8001e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e30:	015b      	lsls	r3, r3, #5
 8001e32:	b21b      	sxth	r3, r3
 8001e34:	4313      	orrs	r3, r2
 8001e36:	b21a      	sxth	r2, r3
 8001e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	b21b      	sxth	r3, r3
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	b21a      	sxth	r2, r3
 8001e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	b21b      	sxth	r3, r3
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	b21a      	sxth	r2, r3
 8001e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	b21b      	sxth	r3, r3
 8001e52:	4313      	orrs	r3, r2
 8001e54:	b21a      	sxth	r2, r3
 8001e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e58:	b21b      	sxth	r3, r3
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8001e60:	8afa      	ldrh	r2, [r7, #22]
 8001e62:	f107 0308 	add.w	r3, r7, #8
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fecb 	bl	8001c04 <drv_spi_write>
}
 8001e6e:	bf00      	nop
 8001e70:	371c      	adds	r7, #28
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd90      	pop	{r4, r7, pc}

08001e76 <drv_enable_gd>:
void drv_enable_gd(DRVStruct drv){
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b084      	sub	sp, #16
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	463b      	mov	r3, r7
 8001e7e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
 8001e82:	2202      	movs	r2, #2
 8001e84:	463b      	mov	r3, r7
 8001e86:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e8a:	f7ff ff0b 	bl	8001ca4 <drv_read_register>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	f023 0304 	bic.w	r3, r3, #4
 8001e94:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 8001e96:	89fb      	ldrh	r3, [r7, #14]
 8001e98:	2202      	movs	r2, #2
 8001e9a:	4639      	mov	r1, r7
 8001e9c:	c903      	ldmia	r1, {r0, r1}
 8001e9e:	f7ff ff1d 	bl	8001cdc <drv_write_register>
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <drv_disable_gd>:
void drv_disable_gd(DRVStruct drv){
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b084      	sub	sp, #16
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	463b      	mov	r3, r7
 8001eb2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) | (0x1<<2);
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	463b      	mov	r3, r7
 8001eba:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ebe:	f7ff fef1 	bl	8001ca4 <drv_read_register>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f043 0304 	orr.w	r3, r3, #4
 8001ec8:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 8001eca:	89fb      	ldrh	r3, [r7, #14]
 8001ecc:	2202      	movs	r2, #2
 8001ece:	4639      	mov	r1, r7
 8001ed0:	c903      	ldmia	r1, {r0, r1}
 8001ed2:	f7ff ff03 	bl	8001cdc <drv_write_register>
}
 8001ed6:	bf00      	nop
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <drv_print_faults>:
void drv_calibrate(DRVStruct drv){
	uint16_t val = (0x1<<4) + (0x1<<3) + (0x1<<2);
	drv_write_register(drv, CSACR, val);
}
void drv_print_faults(DRVStruct drv){
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	463b      	mov	r3, r7
 8001ee8:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t val1 = drv_read_FSR1(drv);
 8001eec:	463b      	mov	r3, r7
 8001eee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ef2:	f7ff feb5 	bl	8001c60 <drv_read_FSR1>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	81fb      	strh	r3, [r7, #14]
    uint16_t val2 = drv_read_FSR2(drv);
 8001efa:	463b      	mov	r3, r7
 8001efc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f00:	f7ff febf 	bl	8001c82 <drv_read_FSR2>
 8001f04:	4603      	mov	r3, r0
 8001f06:	81bb      	strh	r3, [r7, #12]

    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 8001f08:	89fb      	ldrh	r3, [r7, #14]
 8001f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <drv_print_faults+0x38>
 8001f12:	4857      	ldr	r0, [pc, #348]	; (8002070 <drv_print_faults+0x190>)
 8001f14:	f009 f99a 	bl	800b24c <iprintf>

    if(val1 & (1<<9)){printf("VDS_OCP\n\r");}
 8001f18:	89fb      	ldrh	r3, [r7, #14]
 8001f1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <drv_print_faults+0x48>
 8001f22:	4854      	ldr	r0, [pc, #336]	; (8002074 <drv_print_faults+0x194>)
 8001f24:	f009 f992 	bl	800b24c <iprintf>
    if(val1 & (1<<8)){printf("GDF\n\r");}
 8001f28:	89fb      	ldrh	r3, [r7, #14]
 8001f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <drv_print_faults+0x58>
 8001f32:	4851      	ldr	r0, [pc, #324]	; (8002078 <drv_print_faults+0x198>)
 8001f34:	f009 f98a 	bl	800b24c <iprintf>
    if(val1 & (1<<7)){printf("UVLO\n\r");}
 8001f38:	89fb      	ldrh	r3, [r7, #14]
 8001f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d002      	beq.n	8001f48 <drv_print_faults+0x68>
 8001f42:	484e      	ldr	r0, [pc, #312]	; (800207c <drv_print_faults+0x19c>)
 8001f44:	f009 f982 	bl	800b24c <iprintf>
    if(val1 & (1<<6)){printf("OTSD\n\r");}
 8001f48:	89fb      	ldrh	r3, [r7, #14]
 8001f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <drv_print_faults+0x78>
 8001f52:	484b      	ldr	r0, [pc, #300]	; (8002080 <drv_print_faults+0x1a0>)
 8001f54:	f009 f97a 	bl	800b24c <iprintf>
    if(val1 & (1<<5)){printf("VDS_HA\n\r");}
 8001f58:	89fb      	ldrh	r3, [r7, #14]
 8001f5a:	f003 0320 	and.w	r3, r3, #32
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d002      	beq.n	8001f68 <drv_print_faults+0x88>
 8001f62:	4848      	ldr	r0, [pc, #288]	; (8002084 <drv_print_faults+0x1a4>)
 8001f64:	f009 f972 	bl	800b24c <iprintf>
    if(val1 & (1<<4)){printf("VDS_LA\n\r");}
 8001f68:	89fb      	ldrh	r3, [r7, #14]
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d002      	beq.n	8001f78 <drv_print_faults+0x98>
 8001f72:	4845      	ldr	r0, [pc, #276]	; (8002088 <drv_print_faults+0x1a8>)
 8001f74:	f009 f96a 	bl	800b24c <iprintf>
    if(val1 & (1<<3)){printf("VDS_HB\n\r");}
 8001f78:	89fb      	ldrh	r3, [r7, #14]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d002      	beq.n	8001f88 <drv_print_faults+0xa8>
 8001f82:	4842      	ldr	r0, [pc, #264]	; (800208c <drv_print_faults+0x1ac>)
 8001f84:	f009 f962 	bl	800b24c <iprintf>
    if(val1 & (1<<2)){printf("VDS_LB\n\r");}
 8001f88:	89fb      	ldrh	r3, [r7, #14]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d002      	beq.n	8001f98 <drv_print_faults+0xb8>
 8001f92:	483f      	ldr	r0, [pc, #252]	; (8002090 <drv_print_faults+0x1b0>)
 8001f94:	f009 f95a 	bl	800b24c <iprintf>
    if(val1 & (1<<1)){printf("VDS_HC\n\r");}
 8001f98:	89fb      	ldrh	r3, [r7, #14]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <drv_print_faults+0xc8>
 8001fa2:	483c      	ldr	r0, [pc, #240]	; (8002094 <drv_print_faults+0x1b4>)
 8001fa4:	f009 f952 	bl	800b24c <iprintf>
    if(val1 & (1)){printf("VDS_LC\n\r");}
 8001fa8:	89fb      	ldrh	r3, [r7, #14]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d002      	beq.n	8001fb8 <drv_print_faults+0xd8>
 8001fb2:	4839      	ldr	r0, [pc, #228]	; (8002098 <drv_print_faults+0x1b8>)
 8001fb4:	f009 f94a 	bl	800b24c <iprintf>

    if(val2 & (1<<10)){printf("SA_OC\n\r");}
 8001fb8:	89bb      	ldrh	r3, [r7, #12]
 8001fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <drv_print_faults+0xe8>
 8001fc2:	4836      	ldr	r0, [pc, #216]	; (800209c <drv_print_faults+0x1bc>)
 8001fc4:	f009 f942 	bl	800b24c <iprintf>
    if(val2 & (1<<9)){printf("SB_OC\n\r");}
 8001fc8:	89bb      	ldrh	r3, [r7, #12]
 8001fca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d002      	beq.n	8001fd8 <drv_print_faults+0xf8>
 8001fd2:	4833      	ldr	r0, [pc, #204]	; (80020a0 <drv_print_faults+0x1c0>)
 8001fd4:	f009 f93a 	bl	800b24c <iprintf>
    if(val2 & (1<<8)){printf("SC_OC\n\r");}
 8001fd8:	89bb      	ldrh	r3, [r7, #12]
 8001fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d002      	beq.n	8001fe8 <drv_print_faults+0x108>
 8001fe2:	4830      	ldr	r0, [pc, #192]	; (80020a4 <drv_print_faults+0x1c4>)
 8001fe4:	f009 f932 	bl	800b24c <iprintf>
    if(val2 & (1<<7)){printf("OTW\n\r");}
 8001fe8:	89bb      	ldrh	r3, [r7, #12]
 8001fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <drv_print_faults+0x118>
 8001ff2:	482d      	ldr	r0, [pc, #180]	; (80020a8 <drv_print_faults+0x1c8>)
 8001ff4:	f009 f92a 	bl	800b24c <iprintf>
    if(val2 & (1<<6)){printf("CPUV\n\r");}
 8001ff8:	89bb      	ldrh	r3, [r7, #12]
 8001ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <drv_print_faults+0x128>
 8002002:	482a      	ldr	r0, [pc, #168]	; (80020ac <drv_print_faults+0x1cc>)
 8002004:	f009 f922 	bl	800b24c <iprintf>
    if(val2 & (1<<5)){printf("VGS_HA\n\r");}
 8002008:	89bb      	ldrh	r3, [r7, #12]
 800200a:	f003 0320 	and.w	r3, r3, #32
 800200e:	2b00      	cmp	r3, #0
 8002010:	d002      	beq.n	8002018 <drv_print_faults+0x138>
 8002012:	4827      	ldr	r0, [pc, #156]	; (80020b0 <drv_print_faults+0x1d0>)
 8002014:	f009 f91a 	bl	800b24c <iprintf>
    if(val2 & (1<<4)){printf("VGS_LA\n\r");}
 8002018:	89bb      	ldrh	r3, [r7, #12]
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	2b00      	cmp	r3, #0
 8002020:	d002      	beq.n	8002028 <drv_print_faults+0x148>
 8002022:	4824      	ldr	r0, [pc, #144]	; (80020b4 <drv_print_faults+0x1d4>)
 8002024:	f009 f912 	bl	800b24c <iprintf>
    if(val2 & (1<<3)){printf("VGS_HB\n\r");}
 8002028:	89bb      	ldrh	r3, [r7, #12]
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <drv_print_faults+0x158>
 8002032:	4821      	ldr	r0, [pc, #132]	; (80020b8 <drv_print_faults+0x1d8>)
 8002034:	f009 f90a 	bl	800b24c <iprintf>
    if(val2 & (1<<2)){printf("VGS_LB\n\r");}
 8002038:	89bb      	ldrh	r3, [r7, #12]
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	2b00      	cmp	r3, #0
 8002040:	d002      	beq.n	8002048 <drv_print_faults+0x168>
 8002042:	481e      	ldr	r0, [pc, #120]	; (80020bc <drv_print_faults+0x1dc>)
 8002044:	f009 f902 	bl	800b24c <iprintf>
    if(val2 & (1<<1)){printf("VGS_HC\n\r");}
 8002048:	89bb      	ldrh	r3, [r7, #12]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d002      	beq.n	8002058 <drv_print_faults+0x178>
 8002052:	481b      	ldr	r0, [pc, #108]	; (80020c0 <drv_print_faults+0x1e0>)
 8002054:	f009 f8fa 	bl	800b24c <iprintf>
    if(val2 & (1)){printf("VGS_LC\n\r");}
 8002058:	89bb      	ldrh	r3, [r7, #12]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <drv_print_faults+0x188>
 8002062:	4818      	ldr	r0, [pc, #96]	; (80020c4 <drv_print_faults+0x1e4>)
 8002064:	f009 f8f2 	bl	800b24c <iprintf>

}
 8002068:	bf00      	nop
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	08010158 	.word	0x08010158
 8002074:	08010164 	.word	0x08010164
 8002078:	08010170 	.word	0x08010170
 800207c:	08010178 	.word	0x08010178
 8002080:	08010180 	.word	0x08010180
 8002084:	08010188 	.word	0x08010188
 8002088:	08010194 	.word	0x08010194
 800208c:	080101a0 	.word	0x080101a0
 8002090:	080101ac 	.word	0x080101ac
 8002094:	080101b8 	.word	0x080101b8
 8002098:	080101c4 	.word	0x080101c4
 800209c:	080101d0 	.word	0x080101d0
 80020a0:	080101d8 	.word	0x080101d8
 80020a4:	080101e0 	.word	0x080101e0
 80020a8:	080101e8 	.word	0x080101e8
 80020ac:	080101f0 	.word	0x080101f0
 80020b0:	080101f8 	.word	0x080101f8
 80020b4:	08010204 	.word	0x08010204
 80020b8:	08010210 	.word	0x08010210
 80020bc:	0801021c 	.word	0x0801021c
 80020c0:	08010228 	.word	0x08010228
 80020c4:	08010234 	.word	0x08010234

080020c8 <flash_writer_init>:
#include "flash_writer.h"




void flash_writer_init(FlashWriter *fw, uint32_t sector) {
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
	if(sector>7) sector = 7;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b07      	cmp	r3, #7
 80020d6:	d901      	bls.n	80020dc <flash_writer_init+0x14>
 80020d8:	2307      	movs	r3, #7
 80020da:	603b      	str	r3, [r7, #0]
	fw->sector = sector;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	609a      	str	r2, [r3, #8]
	fw->base = __SECTOR_ADDRS[sector];
 80020e2:	4a07      	ldr	r2, [pc, #28]	; (8002100 <flash_writer_init+0x38>)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	605a      	str	r2, [r3, #4]
	fw->ready = false;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	20000000 	.word	0x20000000

08002104 <flash_writer_open>:
bool flash_writer_ready(FlashWriter fw) {
    return fw.ready;
}

void flash_writer_open(FlashWriter * fw) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
    FLASH_Unlock();
 800210c:	f002 fd3e 	bl	8004b8c <FLASH_Unlock>
    FLASH_ClearFlag( FLASH_FLAG_EOP |  FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 8002110:	20f1      	movs	r0, #241	; 0xf1
 8002112:	f002 fdf7 	bl	8004d04 <FLASH_ClearFlag>
    FLASH_EraseSector(__SECTORS[fw->sector], VoltageRange_3);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	4a07      	ldr	r2, [pc, #28]	; (8002138 <flash_writer_open+0x34>)
 800211c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002120:	2102      	movs	r1, #2
 8002122:	4618      	mov	r0, r3
 8002124:	f002 fd5a 	bl	8004bdc <FLASH_EraseSector>
    fw->ready = true;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000020 	.word	0x20000020

0800213c <flash_writer_write_int>:

void flash_writer_write_int(FlashWriter fw, uint32_t index, int x) {
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
 8002142:	1d3c      	adds	r4, r7, #4
 8002144:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002148:	603b      	str	r3, [r7, #0]
    union UN {int a; uint32_t b;};
    union UN un;
    un.a = x;
 800214a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214c:	617b      	str	r3, [r7, #20]
    FLASH_ProgramWord(fw.base + 4 * index, un.b);
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	4611      	mov	r1, r2
 800215a:	4618      	mov	r0, r3
 800215c:	f002 fd9e 	bl	8004c9c <FLASH_ProgramWord>
}
 8002160:	bf00      	nop
 8002162:	371c      	adds	r7, #28
 8002164:	46bd      	mov	sp, r7
 8002166:	bd90      	pop	{r4, r7, pc}

08002168 <flash_writer_write_float>:

void flash_writer_write_uint(FlashWriter fw, uint32_t index, unsigned int x) {
    FLASH_ProgramWord(fw.base + 4 * index, x);
}

void flash_writer_write_float(FlashWriter fw, uint32_t index, float x) {
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b089      	sub	sp, #36	; 0x24
 800216c:	af00      	add	r7, sp, #0
 800216e:	f107 040c 	add.w	r4, r7, #12
 8002172:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	ed87 0a01 	vstr	s0, [r7, #4]
    union UN {float a; uint32_t b;};
    union UN un;
    un.a = x;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	61fb      	str	r3, [r7, #28]
    FLASH_ProgramWord(fw.base + 4 * index, un.b);
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	69fa      	ldr	r2, [r7, #28]
 800218a:	4611      	mov	r1, r2
 800218c:	4618      	mov	r0, r3
 800218e:	f002 fd85 	bl	8004c9c <FLASH_ProgramWord>
}
 8002192:	bf00      	nop
 8002194:	3724      	adds	r7, #36	; 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd90      	pop	{r4, r7, pc}

0800219a <flash_writer_close>:

void flash_writer_close(FlashWriter * fw) {
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
    FLASH_Lock();
 80021a2:	f002 fd0b 	bl	8004bbc <FLASH_Lock>
    fw->ready = false;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	701a      	strb	r2, [r3, #0]
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <flash_read_int>:

int flash_read_int(FlashWriter fw, uint32_t index) {
 80021b4:	b490      	push	{r4, r7}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	1d3c      	adds	r4, r7, #4
 80021bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80021c0:	603b      	str	r3, [r7, #0]
    return *(int*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4a05      	ldr	r2, [pc, #20]	; (80021dc <flash_read_int+0x28>)
 80021c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	681b      	ldr	r3, [r3, #0]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc90      	pop	{r4, r7}
 80021da:	4770      	bx	lr
 80021dc:	20000000 	.word	0x20000000

080021e0 <flash_read_float>:

uint32_t flash_read_uint(FlashWriter fw, uint32_t index) {
    return *(uint32_t*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
}

float flash_read_float(FlashWriter fw, uint32_t index) {
 80021e0:	b490      	push	{r4, r7}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	1d3c      	adds	r4, r7, #4
 80021e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80021ec:	603b      	str	r3, [r7, #0]
    return *(float*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4a07      	ldr	r2, [pc, #28]	; (8002210 <flash_read_float+0x30>)
 80021f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	ee07 3a90 	vmov	s15, r3
}
 8002202:	eeb0 0a67 	vmov.f32	s0, s15
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bc90      	pop	{r4, r7}
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000000 	.word	0x20000000

08002214 <set_dtc>:
#include "position_sensor_icmu.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void set_dtc(ControllerStruct *controller){
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002220:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002226:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800222c:	60fb      	str	r3, [r7, #12]

	if(INVERT_DTC){
		dtc_u = 1.0f - controller->dtc_u;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002234:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002238:	ee77 7a67 	vsub.f32	s15, s14, s15
 800223c:	edc7 7a05 	vstr	s15, [r7, #20]
		dtc_v = 1.0f - controller->dtc_v;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002246:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800224a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800224e:	edc7 7a04 	vstr	s15, [r7, #16]
		dtc_w = 1.0f - controller->dtc_w;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002258:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800225c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002260:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002264:	4b3b      	ldr	r3, [pc, #236]	; (8002354 <set_dtc+0x140>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d136      	bne.n	80022da <set_dtc+0xc6>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 800226c:	4b3a      	ldr	r3, [pc, #232]	; (8002358 <set_dtc+0x144>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002272:	ee07 3a90 	vmov	s15, r3
 8002276:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800227a:	edd7 7a05 	vldr	s15, [r7, #20]
 800227e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002282:	4b35      	ldr	r3, [pc, #212]	; (8002358 <set_dtc+0x144>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800228a:	ee17 2a90 	vmov	r2, s15
 800228e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 8002290:	4b31      	ldr	r3, [pc, #196]	; (8002358 <set_dtc+0x144>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002296:	ee07 3a90 	vmov	s15, r3
 800229a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800229e:	edd7 7a04 	vldr	s15, [r7, #16]
 80022a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a6:	4b2c      	ldr	r3, [pc, #176]	; (8002358 <set_dtc+0x144>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022ae:	ee17 2a90 	vmov	r2, s15
 80022b2:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 80022b4:	4b28      	ldr	r3, [pc, #160]	; (8002358 <set_dtc+0x144>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ba:	ee07 3a90 	vmov	s15, r3
 80022be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80022c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ca:	4b23      	ldr	r3, [pc, #140]	; (8002358 <set_dtc+0x144>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022d2:	ee17 2a90 	vmov	r2, s15
 80022d6:	63da      	str	r2, [r3, #60]	; 0x3c
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
	}
}
 80022d8:	e035      	b.n	8002346 <set_dtc+0x132>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
 80022da:	4b1f      	ldr	r3, [pc, #124]	; (8002358 <set_dtc+0x144>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	ee07 3a90 	vmov	s15, r3
 80022e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80022ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f0:	4b19      	ldr	r3, [pc, #100]	; (8002358 <set_dtc+0x144>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022f8:	ee17 2a90 	vmov	r2, s15
 80022fc:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
 80022fe:	4b16      	ldr	r3, [pc, #88]	; (8002358 <set_dtc+0x144>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	ee07 3a90 	vmov	s15, r3
 8002308:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800230c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002314:	4b10      	ldr	r3, [pc, #64]	; (8002358 <set_dtc+0x144>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800231c:	ee17 2a90 	vmov	r2, s15
 8002320:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 8002322:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <set_dtc+0x144>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	ee07 3a90 	vmov	s15, r3
 800232c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002330:	edd7 7a03 	vldr	s15, [r7, #12]
 8002334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002338:	4b07      	ldr	r3, [pc, #28]	; (8002358 <set_dtc+0x144>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002340:	ee17 2a90 	vmov	r2, s15
 8002344:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002346:	bf00      	nop
 8002348:	371c      	adds	r7, #28
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	2000043c 	.word	0x2000043c
 8002358:	20009960 	.word	0x20009960

0800235c <analog_sample>:

void analog_sample (ControllerStruct *controller){
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
//
//    controller->i_a = controller->i_scale*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
//    controller->i_b = controller->i_scale*(float)(controller->adc_b_raw - controller->adc_b_offset);
//    controller->i_c = -controller->i_a - controller->i_b;

}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
 8002376:	ed87 0a05 	vstr	s0, [r7, #20]
 800237a:	edc7 0a04 	vstr	s1, [r7, #16]
 800237e:	ed87 1a03 	vstr	s2, [r7, #12]
 8002382:	60b8      	str	r0, [r7, #8]
 8002384:	6079      	str	r1, [r7, #4]
 8002386:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cos_lut(theta);
 8002388:	ed97 0a05 	vldr	s0, [r7, #20]
 800238c:	f001 ff3e 	bl	800420c <cos_lut>
 8002390:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 8002394:	ed97 0a05 	vldr	s0, [r7, #20]
 8002398:	f001 fefe 	bl	8004198 <sin_lut>
 800239c:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 80023a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80023a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80023a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ac:	edd7 6a06 	vldr	s13, [r7, #24]
 80023b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80023b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 80023c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80023c6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002470 <abc+0x100>
 80023ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80023d2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80023d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80023da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023de:	edd7 7a04 	vldr	s15, [r7, #16]
 80023e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80023ea:	eddf 6a22 	vldr	s13, [pc, #136]	; 8002474 <abc+0x104>
 80023ee:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80023f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80023f6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80023fa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80023fe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002402:	edd7 7a03 	vldr	s15, [r7, #12]
 8002406:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800240a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 8002414:	edd7 7a06 	vldr	s15, [r7, #24]
 8002418:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002474 <abc+0x104>
 800241c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002420:	edd7 7a07 	vldr	s15, [r7, #28]
 8002424:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002428:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800242c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002430:	edd7 7a04 	vldr	s15, [r7, #16]
 8002434:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002438:	edd7 7a07 	vldr	s15, [r7, #28]
 800243c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002470 <abc+0x100>
 8002440:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002444:	edd7 7a06 	vldr	s15, [r7, #24]
 8002448:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800244c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002450:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002454:	edd7 7a03 	vldr	s15, [r7, #12]
 8002458:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800245c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	edc3 7a00 	vstr	s15, [r3]
    }
 8002466:	bf00      	nop
 8002468:	3720      	adds	r7, #32
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	3f5db3d7 	.word	0x3f5db3d7
 8002474:	bf5db3d7 	.word	0xbf5db3d7

08002478 <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af00      	add	r7, sp, #0
 800247e:	ed87 0a05 	vstr	s0, [r7, #20]
 8002482:	edc7 0a04 	vstr	s1, [r7, #16]
 8002486:	ed87 1a03 	vstr	s2, [r7, #12]
 800248a:	edc7 1a02 	vstr	s3, [r7, #8]
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cos_lut(theta);
 8002492:	ed97 0a05 	vldr	s0, [r7, #20]
 8002496:	f001 feb9 	bl	800420c <cos_lut>
 800249a:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 800249e:	ed97 0a05 	vldr	s0, [r7, #20]
 80024a2:	f001 fe79 	bl	8004198 <sin_lut>
 80024a6:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 80024aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80024ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80024b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80024ba:	eddf 6a34 	vldr	s13, [pc, #208]	; 800258c <dq0+0x114>
 80024be:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80024c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80024c6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80024ca:	ee67 7a86 	vmul.f32	s15, s15, s12
 80024ce:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80024d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80024d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024de:	edd7 7a06 	vldr	s15, [r7, #24]
 80024e2:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002590 <dq0+0x118>
 80024e6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80024ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80024ee:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80024f2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80024f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80024fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80024fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002506:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002594 <dq0+0x11c>
 800250a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002514:	edd7 7a06 	vldr	s15, [r7, #24]
 8002518:	eeb1 7a67 	vneg.f32	s14, s15
 800251c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002520:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002524:	edd7 7a07 	vldr	s15, [r7, #28]
 8002528:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002590 <dq0+0x118>
 800252c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002530:	edd7 7a06 	vldr	s15, [r7, #24]
 8002534:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002538:	ee67 7a86 	vmul.f32	s15, s15, s12
 800253c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002540:	edd7 7a03 	vldr	s15, [r7, #12]
 8002544:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002548:	ee37 7a67 	vsub.f32	s14, s14, s15
 800254c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002550:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800258c <dq0+0x114>
 8002554:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002558:	edd7 7a06 	vldr	s15, [r7, #24]
 800255c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002560:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002564:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002568:	edd7 7a02 	vldr	s15, [r7, #8]
 800256c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002570:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002574:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002594 <dq0+0x11c>
 8002578:	ee67 7a87 	vmul.f32	s15, s15, s14
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	edc3 7a00 	vstr	s15, [r3]

    }
 8002582:	bf00      	nop
 8002584:	3720      	adds	r7, #32
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	3f5db3d7 	.word	0x3f5db3d7
 8002590:	bf5db3d7 	.word	0xbf5db3d7
 8002594:	3f2aaaab 	.word	0x3f2aaaab

08002598 <svm>:
//    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
//    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
//
//    }

void svm(float v_bus, float u, float v, float w, int i_sector, float *dtc_u, float *dtc_v, float *dtc_w){
 8002598:	b580      	push	{r7, lr}
 800259a:	ed2d 8b02 	vpush	{d8}
 800259e:	b08c      	sub	sp, #48	; 0x30
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	ed87 0a07 	vstr	s0, [r7, #28]
 80025a6:	edc7 0a06 	vstr	s1, [r7, #24]
 80025aa:	ed87 1a05 	vstr	s2, [r7, #20]
 80025ae:	edc7 1a04 	vstr	s3, [r7, #16]
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
    /// Space Vector Modulation ///
    /// u,v,w amplitude = v_bus for full modulation depth ///

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 80025ba:	ed97 1a04 	vldr	s2, [r7, #16]
 80025be:	edd7 0a05 	vldr	s1, [r7, #20]
 80025c2:	ed97 0a06 	vldr	s0, [r7, #24]
 80025c6:	f001 fd4e 	bl	8004066 <fminf3>
 80025ca:	eeb0 8a40 	vmov.f32	s16, s0
 80025ce:	ed97 1a04 	vldr	s2, [r7, #16]
 80025d2:	edd7 0a05 	vldr	s1, [r7, #20]
 80025d6:	ed97 0a06 	vldr	s0, [r7, #24]
 80025da:	f001 fd10 	bl	8003ffe <fmaxf3>
 80025de:	eef0 7a40 	vmov.f32	s15, s0
 80025e2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80025e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80025ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025ee:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

    // Dead-time compensation
    float u_comp = DTC_COMP*(-(i_sector==4) + (i_sector==3));
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	bf0c      	ite	eq
 80025f8:	2301      	moveq	r3, #1
 80025fa:	2300      	movne	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	461a      	mov	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2b04      	cmp	r3, #4
 8002604:	bf0c      	ite	eq
 8002606:	2301      	moveq	r3, #1
 8002608:	2300      	movne	r3, #0
 800260a:	b2db      	uxtb	r3, r3
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	ee07 3a90 	vmov	s15, r3
 8002612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002616:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800279c <svm+0x204>
 800261a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800261e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float v_comp = DTC_COMP*(-(i_sector==2) + (i_sector==5));
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2b05      	cmp	r3, #5
 8002626:	bf0c      	ite	eq
 8002628:	2301      	moveq	r3, #1
 800262a:	2300      	movne	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b02      	cmp	r3, #2
 8002634:	bf0c      	ite	eq
 8002636:	2301      	moveq	r3, #1
 8002638:	2300      	movne	r3, #0
 800263a:	b2db      	uxtb	r3, r3
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	ee07 3a90 	vmov	s15, r3
 8002642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002646:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800279c <svm+0x204>
 800264a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800264e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float w_comp = DTC_COMP*((i_sector==6) - (i_sector==1));
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2b06      	cmp	r3, #6
 8002656:	bf0c      	ite	eq
 8002658:	2301      	moveq	r3, #1
 800265a:	2300      	movne	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	461a      	mov	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b01      	cmp	r3, #1
 8002664:	bf0c      	ite	eq
 8002666:	2301      	moveq	r3, #1
 8002668:	2300      	movne	r3, #0
 800266a:	b2db      	uxtb	r3, r3
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	ee07 3a90 	vmov	s15, r3
 8002672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002676:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800279c <svm+0x204>
 800267a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800267e:	edc7 7a08 	vstr	s15, [r7, #32]


    *dtc_u = fminf(fmaxf((.5f*(u -v_offset)/(v_bus*(DTC_MAX-DTC_MIN)) + (DTC_MAX+DTC_MIN)*.5f + u_comp), DTC_MIN), DTC_MAX);
 8002682:	ed97 7a06 	vldr	s14, [r7, #24]
 8002686:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800268a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800268e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002692:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002696:	edd7 7a07 	vldr	s15, [r7, #28]
 800269a:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80027a0 <svm+0x208>
 800269e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026a6:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80027a4 <svm+0x20c>
 80026aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80026ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80026b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b6:	eddf 0a39 	vldr	s1, [pc, #228]	; 800279c <svm+0x204>
 80026ba:	eeb0 0a67 	vmov.f32	s0, s15
 80026be:	f00c fa73 	bl	800eba8 <fmaxf>
 80026c2:	eef0 7a40 	vmov.f32	s15, s0
 80026c6:	eddf 0a36 	vldr	s1, [pc, #216]	; 80027a0 <svm+0x208>
 80026ca:	eeb0 0a67 	vmov.f32	s0, s15
 80026ce:	f00c fa86 	bl	800ebde <fminf>
 80026d2:	eef0 7a40 	vmov.f32	s15, s0
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fminf(fmaxf((.5f*(v -v_offset)/(v_bus*(DTC_MAX-DTC_MIN)) + (DTC_MAX+DTC_MIN)*.5f + v_comp), DTC_MIN), DTC_MAX);
 80026dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80026e0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80026ec:	ee67 6a87 	vmul.f32	s13, s15, s14
 80026f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80026f4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80027a0 <svm+0x208>
 80026f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002700:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80027a4 <svm+0x20c>
 8002704:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002708:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800270c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002710:	eddf 0a22 	vldr	s1, [pc, #136]	; 800279c <svm+0x204>
 8002714:	eeb0 0a67 	vmov.f32	s0, s15
 8002718:	f00c fa46 	bl	800eba8 <fmaxf>
 800271c:	eef0 7a40 	vmov.f32	s15, s0
 8002720:	eddf 0a1f 	vldr	s1, [pc, #124]	; 80027a0 <svm+0x208>
 8002724:	eeb0 0a67 	vmov.f32	s0, s15
 8002728:	f00c fa59 	bl	800ebde <fminf>
 800272c:	eef0 7a40 	vmov.f32	s15, s0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fminf(fmaxf((.5f*(w -v_offset)/(v_bus*(DTC_MAX-DTC_MIN)) + (DTC_MAX+DTC_MIN)*.5f + w_comp), DTC_MIN), DTC_MAX);
 8002736:	ed97 7a04 	vldr	s14, [r7, #16]
 800273a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800273e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002742:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002746:	ee67 6a87 	vmul.f32	s13, s15, s14
 800274a:	edd7 7a07 	vldr	s15, [r7, #28]
 800274e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80027a0 <svm+0x208>
 8002752:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800275a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80027a4 <svm+0x20c>
 800275e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002762:	edd7 7a08 	vldr	s15, [r7, #32]
 8002766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800276a:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800279c <svm+0x204>
 800276e:	eeb0 0a67 	vmov.f32	s0, s15
 8002772:	f00c fa19 	bl	800eba8 <fmaxf>
 8002776:	eef0 7a40 	vmov.f32	s15, s0
 800277a:	eddf 0a09 	vldr	s1, [pc, #36]	; 80027a0 <svm+0x208>
 800277e:	eeb0 0a67 	vmov.f32	s0, s15
 8002782:	f00c fa2c 	bl	800ebde <fminf>
 8002786:	eef0 7a40 	vmov.f32	s15, s0
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fminf(fmaxf((v/v_bus + .5f), DTC_MIN), DTC_MAX);
    *dtc_w = fminf(fmaxf((w/v_bus + .5f), DTC_MIN), DTC_MAX);
    */


    }
 8002790:	bf00      	nop
 8002792:	3730      	adds	r7, #48	; 0x30
 8002794:	46bd      	mov	sp, r7
 8002796:	ecbd 8b02 	vpop	{d8}
 800279a:	bd80      	pop	{r7, pc}
 800279c:	00000000 	.word	0x00000000
 80027a0:	3f70a3d7 	.word	0x3f70a3d7
 80027a4:	3ef0a3d7 	.word	0x3ef0a3d7

080027a8 <zero_current>:

void zero_current(ControllerStruct *controller){
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc1_offset = 0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
    int adc2_offset = 0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	613b      	str	r3, [r7, #16]
    int n = 1000;
 80027b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027bc:	60bb      	str	r3, [r7, #8]
    controller->dtc_u = 0.f;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	649a      	str	r2, [r3, #72]	; 0x48
    controller->dtc_v = 0.f;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	64da      	str	r2, [r3, #76]	; 0x4c
    controller->dtc_w = 0.f;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	651a      	str	r2, [r3, #80]	; 0x50
    set_dtc(controller);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff fd1c 	bl	8002214 <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	e00f      	b.n	8002802 <zero_current+0x5a>
    	analog_sample(controller);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff fdba 	bl	800235c <analog_sample>
    	adc1_offset +=  controller->adc1_raw;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	4413      	add	r3, r2
 80027f0:	617b      	str	r3, [r7, #20]
    	adc2_offset += controller->adc2_raw;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4413      	add	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
    for (int i = 0; i<n; i++){               // Average n samples
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	3301      	adds	r3, #1
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	429a      	cmp	r2, r3
 8002808:	dbeb      	blt.n	80027e2 <zero_current+0x3a>
     }
    controller->adc1_offset = adc1_offset/n;
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	fb92 f2f3 	sdiv	r2, r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	67da      	str	r2, [r3, #124]	; 0x7c
    controller->adc2_offset = adc2_offset/n;
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	fb92 f2f3 	sdiv	r2, r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    }
 8002824:	bf00      	nop
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 8002834:	4b3d      	ldr	r3, [pc, #244]	; (800292c <init_controller_params+0x100>)
 8002836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	669a      	str	r2, [r3, #104]	; 0x68
    controller->ki_q = KI_Q;
 800283c:	4b3b      	ldr	r3, [pc, #236]	; (800292c <init_controller_params+0x100>)
 800283e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	66da      	str	r2, [r3, #108]	; 0x6c
    controller->k_d = K_SCALE*I_BW;
 8002844:	4b39      	ldr	r3, [pc, #228]	; (800292c <init_controller_params+0x100>)
 8002846:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800284a:	4b38      	ldr	r3, [pc, #224]	; (800292c <init_controller_params+0x100>)
 800284c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
    controller->k_q = K_SCALE*I_BW;
 800285a:	4b34      	ldr	r3, [pc, #208]	; (800292c <init_controller_params+0x100>)
 800285c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002860:	4b32      	ldr	r3, [pc, #200]	; (800292c <init_controller_params+0x100>)
 8002862:	edd3 7a02 	vldr	s15, [r3, #8]
 8002866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002870:	4b2e      	ldr	r3, [pc, #184]	; (800292c <init_controller_params+0x100>)
 8002872:	edd3 7a02 	vldr	s15, [r3, #8]
 8002876:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002930 <init_controller_params+0x104>
 800287a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800287e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002934 <init_controller_params+0x108>
 8002882:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002886:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800288a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800288e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002896:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800289a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
//    controller->ki_fw = .1f*controller->ki_d;
//    controller->phase_order = PHASE_ORDER;
//    if(I_MAX <= 40.0f){controller->i_scale = I_SCALE;}
//    else{controller->i_scale = 2.0f*I_SCALE;}
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	e037      	b.n	800291a <init_controller_params+0xee>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	ee07 3a90 	vmov	s15, r3
 80028b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028b4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002938 <init_controller_params+0x10c>
 80028b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028bc:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800293c <init_controller_params+0x110>
 80028c0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80028c4:	ee16 0a90 	vmov	r0, s13
 80028c8:	f7fd fe5e 	bl	8000588 <__aeabi_f2d>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	ec43 2b10 	vmov	d0, r2, r3
 80028d4:	f00c f9bc 	bl	800ec50 <exp>
 80028d8:	ec51 0b10 	vmov	r0, r1, d0
 80028dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028e0:	4b17      	ldr	r3, [pc, #92]	; (8002940 <init_controller_params+0x114>)
 80028e2:	f7fd fea9 	bl	8000638 <__aeabi_dmul>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	4b14      	ldr	r3, [pc, #80]	; (8002944 <init_controller_params+0x118>)
 80028f4:	f7fd fcea 	bl	80002cc <__adddf3>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4610      	mov	r0, r2
 80028fe:	4619      	mov	r1, r3
 8002900:	f7fe f992 	bl	8000c28 <__aeabi_d2f>
 8002904:	4601      	mov	r1, r0
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	33b2      	adds	r3, #178	; 0xb2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	3304      	adds	r3, #4
 8002912:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	3301      	adds	r3, #1
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2b7f      	cmp	r3, #127	; 0x7f
 800291e:	ddc4      	ble.n	80028aa <init_controller_params+0x7e>
    }

    }
 8002920:	bf00      	nop
 8002922:	bf00      	nop
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	2000033c 	.word	0x2000033c
 8002930:	37d1b717 	.word	0x37d1b717
 8002934:	40c90fdb 	.word	0x40c90fdb
 8002938:	bc000000 	.word	0xbc000000
 800293c:	3d03126f 	.word	0x3d03126f
 8002940:	3ff33333 	.word	0x3ff33333
 8002944:	3ff00000 	.word	0x3ff00000

08002948 <reset_foc>:

void reset_foc(ControllerStruct *controller){
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]

	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002950:	4b35      	ldr	r3, [pc, #212]	; (8002a28 <reset_foc+0xe0>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002956:	ee07 3a90 	vmov	s15, r3
 800295a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800295e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002962:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002966:	4b30      	ldr	r3, [pc, #192]	; (8002a28 <reset_foc+0xe0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800296e:	ee17 2a90 	vmov	r2, s15
 8002972:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002974:	4b2c      	ldr	r3, [pc, #176]	; (8002a28 <reset_foc+0xe0>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	ee07 3a90 	vmov	s15, r3
 800297e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002982:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002986:	ee67 7a87 	vmul.f32	s15, s15, s14
 800298a:	4b27      	ldr	r3, [pc, #156]	; (8002a28 <reset_foc+0xe0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002992:	ee17 2a90 	vmov	r2, s15
 8002996:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002998:	4b23      	ldr	r3, [pc, #140]	; (8002a28 <reset_foc+0xe0>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299e:	ee07 3a90 	vmov	s15, r3
 80029a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ae:	4b1e      	ldr	r3, [pc, #120]	; (8002a28 <reset_foc+0xe0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029b6:	ee17 2a90 	vmov	r2, s15
 80029ba:	639a      	str	r2, [r3, #56]	; 0x38
    controller->i_d_ref = 0;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    controller->i_q_ref = 0;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    controller->i_d = 0;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30
    controller->i_q = 0;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	635a      	str	r2, [r3, #52]	; 0x34
    controller->i_q_filt = 0;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	639a      	str	r2, [r3, #56]	; 0x38
    controller->q_int = 0;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	679a      	str	r2, [r3, #120]	; 0x78
    controller->d_int = 0;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	675a      	str	r2, [r3, #116]	; 0x74
    controller->v_q = 0;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	645a      	str	r2, [r3, #68]	; 0x44
    controller->v_d = 0;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	641a      	str	r2, [r3, #64]	; 0x40
    controller->fw_int = 0;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    controller->otw_flag = 0;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

    }
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	20009960 	.word	0x20009960

08002a2c <field_weaken>:
    float val2 = controller->inverter_tab[index+1];
    return val1 + (val2 - val1)*(duty*128.0f - (float)index);
}

void field_weaken(ControllerStruct *controller)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
//       controller->i_d_des = controller->fw_int;
//       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
//       controller->i_q_des = fast_fmaxf(fast_fminf(controller->i_q_des, q_max), -q_max);


}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <commutate>:
//void commutate(ControllerStruct *controller, EncoderStruct *encoder)
void commutate(ControllerStruct *controller, EncoderCMUStruct *encoder)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
//       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
//       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
//
//       set_dtc(controller);

    }
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <torque_control>:


void torque_control(ControllerStruct *controller){
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
//
//    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
//    controller->i_q_des = fast_fmaxf(fast_fminf(torque_des/(KT*GR), controller->i_max), -controller->i_max);
//    controller->i_d_des = 0.0f;

    }
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <zero_commands>:



void zero_commands(ControllerStruct * controller){
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
//	controller->kp = 0;
//	controller->kd = 0;
//	controller->p_des = 0;
//	controller->v_des = 0;
//	controller->i_q_des = 0;
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <run_fsm>:
#include "math_ops.h"
#include "position_sensor.h"
#include "position_sensor_icmu.h"
#include "drv8323.h"

 void run_fsm(FSMStruct * fsmstate){
 8002a80:	b5b0      	push	{r4, r5, r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */

	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	785a      	ldrb	r2, [r3, #1]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d00d      	beq.n	8002ab0 <run_fsm+0x30>
		 fsm_exit_state(fsmstate);		// safely exit the old state
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f959 	bl	8002d4c <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	78db      	ldrb	r3, [r3, #3]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d006      	beq.n	8002ab0 <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	785a      	ldrb	r2, [r3, #1]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f8ea 	bl	8002c84 <fsm_enter_state>
		 }
	 }

	 switch(fsmstate->state){
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b06      	cmp	r3, #6
 8002ab6:	f200 80cc 	bhi.w	8002c52 <run_fsm+0x1d2>
 8002aba:	a201      	add	r2, pc, #4	; (adr r2, 8002ac0 <run_fsm+0x40>)
 8002abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac0:	08002c51 	.word	0x08002c51
 8002ac4:	08002add 	.word	0x08002add
 8002ac8:	08002bfd 	.word	0x08002bfd
 8002acc:	08002c53 	.word	0x08002c53
 8002ad0:	08002c51 	.word	0x08002c51
 8002ad4:	08002c3f 	.word	0x08002c3f
 8002ad8:	08002c51 	.word	0x08002c51
		 case MENU_MODE:
			 break;

		 case CALIBRATION_MODE:
			 if(!comm_encoder_cal.done_ordering){
 8002adc:	4b5f      	ldr	r3, [pc, #380]	; (8002c5c <run_fsm+0x1dc>)
 8002ade:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d108      	bne.n	8002af8 <run_fsm+0x78>
				 order_phases(&new_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8002ae6:	4b5e      	ldr	r3, [pc, #376]	; (8002c60 <run_fsm+0x1e0>)
 8002ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aec:	4a5b      	ldr	r2, [pc, #364]	; (8002c5c <run_fsm+0x1dc>)
 8002aee:	495c      	ldr	r1, [pc, #368]	; (8002c60 <run_fsm+0x1e0>)
 8002af0:	485c      	ldr	r0, [pc, #368]	; (8002c64 <run_fsm+0x1e4>)
 8002af2:	f7fe fc45 	bl	8001380 <order_phases>
				 preference_writer_close(&prefs);
				 preference_writer_load(prefs);
				 update_fsm(fsmstate, 27);
			 }

			 break;
 8002af6:	e0ac      	b.n	8002c52 <run_fsm+0x1d2>
			 else if(!comm_encoder_cal.done_cal){
 8002af8:	4b58      	ldr	r3, [pc, #352]	; (8002c5c <run_fsm+0x1dc>)
 8002afa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d108      	bne.n	8002b14 <run_fsm+0x94>
				 calibrate_encoder(&new_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8002b02:	4b57      	ldr	r3, [pc, #348]	; (8002c60 <run_fsm+0x1e0>)
 8002b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b08:	4a54      	ldr	r2, [pc, #336]	; (8002c5c <run_fsm+0x1dc>)
 8002b0a:	4955      	ldr	r1, [pc, #340]	; (8002c60 <run_fsm+0x1e0>)
 8002b0c:	4855      	ldr	r0, [pc, #340]	; (8002c64 <run_fsm+0x1e4>)
 8002b0e:	f7fe fe71 	bl	80017f4 <calibrate_encoder>
			 break;
 8002b12:	e09e      	b.n	8002c52 <run_fsm+0x1d2>
				 E_ZERO = comm_encoder_cal.ezero;
 8002b14:	4b51      	ldr	r3, [pc, #324]	; (8002c5c <run_fsm+0x1dc>)
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	ee07 3a90 	vmov	s15, r3
 8002b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b20:	4b51      	ldr	r3, [pc, #324]	; (8002c68 <run_fsm+0x1e8>)
 8002b22:	edc3 7a00 	vstr	s15, [r3]
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((new_encoder._ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 8002b26:	4b50      	ldr	r3, [pc, #320]	; (8002c68 <run_fsm+0x1e8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fd fd2c 	bl	8000588 <__aeabi_f2d>
 8002b30:	4604      	mov	r4, r0
 8002b32:	460d      	mov	r5, r1
 8002b34:	4b4b      	ldr	r3, [pc, #300]	; (8002c64 <run_fsm+0x1e4>)
 8002b36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002b3a:	ee07 3a90 	vmov	s15, r3
 8002b3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b42:	4b49      	ldr	r3, [pc, #292]	; (8002c68 <run_fsm+0x1e8>)
 8002b44:	edd3 7a00 	vldr	s15, [r3]
 8002b48:	eef1 7a67 	vneg.f32	s15, s15
 8002b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b50:	eddf 6a46 	vldr	s13, [pc, #280]	; 8002c6c <run_fsm+0x1ec>
 8002b54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b58:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002b5c:	eeb0 0a47 	vmov.f32	s0, s14
 8002b60:	f00c f95a 	bl	800ee18 <fmodf>
 8002b64:	eef0 7a40 	vmov.f32	s15, s0
 8002b68:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002c70 <run_fsm+0x1f0>
 8002b6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b70:	ee17 0a90 	vmov	r0, s15
 8002b74:	f7fd fd08 	bl	8000588 <__aeabi_f2d>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	e9cd 2300 	strd	r2, r3, [sp]
 8002b80:	4622      	mov	r2, r4
 8002b82:	462b      	mov	r3, r5
 8002b84:	483b      	ldr	r0, [pc, #236]	; (8002c74 <run_fsm+0x1f4>)
 8002b86:	f008 fb61 	bl	800b24c <iprintf>
				 memcpy(&new_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(new_encoder.offset_lut));
 8002b8a:	4b36      	ldr	r3, [pc, #216]	; (8002c64 <run_fsm+0x1e4>)
 8002b8c:	4a33      	ldr	r2, [pc, #204]	; (8002c5c <run_fsm+0x1dc>)
 8002b8e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002b92:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002b96:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 8002b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f007 fed4 	bl	800a94c <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 8002ba4:	4b34      	ldr	r3, [pc, #208]	; (8002c78 <run_fsm+0x1f8>)
 8002ba6:	4a2d      	ldr	r2, [pc, #180]	; (8002c5c <run_fsm+0x1dc>)
 8002ba8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002bac:	3314      	adds	r3, #20
 8002bae:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 8002bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f007 fec8 	bl	800a94c <memcpy>
				 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 8002bbc:	4b2f      	ldr	r3, [pc, #188]	; (8002c7c <run_fsm+0x1fc>)
 8002bbe:	691a      	ldr	r2, [r3, #16]
 8002bc0:	9200      	str	r2, [sp, #0]
 8002bc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bc4:	f001 fe5a 	bl	800487c <preference_writer_ready>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f083 0301 	eor.w	r3, r3, #1
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d002      	beq.n	8002bda <run_fsm+0x15a>
 8002bd4:	4829      	ldr	r0, [pc, #164]	; (8002c7c <run_fsm+0x1fc>)
 8002bd6:	f001 fe42 	bl	800485e <preference_writer_open>
				 preference_writer_flush(&prefs);
 8002bda:	4828      	ldr	r0, [pc, #160]	; (8002c7c <run_fsm+0x1fc>)
 8002bdc:	f001 fe5c 	bl	8004898 <preference_writer_flush>
				 preference_writer_close(&prefs);
 8002be0:	4826      	ldr	r0, [pc, #152]	; (8002c7c <run_fsm+0x1fc>)
 8002be2:	f001 fed7 	bl	8004994 <preference_writer_close>
				 preference_writer_load(prefs);
 8002be6:	4b25      	ldr	r3, [pc, #148]	; (8002c7c <run_fsm+0x1fc>)
 8002be8:	691a      	ldr	r2, [r3, #16]
 8002bea:	9200      	str	r2, [sp, #0]
 8002bec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bee:	f001 fe8f 	bl	8004910 <preference_writer_load>
				 update_fsm(fsmstate, 27);
 8002bf2:	211b      	movs	r1, #27
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f901 	bl	8002dfc <update_fsm>
			 break;
 8002bfa:	e02a      	b.n	8002c52 <run_fsm+0x1d2>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 8002bfc:	4b1e      	ldr	r3, [pc, #120]	; (8002c78 <run_fsm+0x1f8>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	dd0a      	ble.n	8002c1a <run_fsm+0x19a>
 8002c04:	4b16      	ldr	r3, [pc, #88]	; (8002c60 <run_fsm+0x1e0>)
 8002c06:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002c0a:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <run_fsm+0x1f8>)
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	dd03      	ble.n	8002c1a <run_fsm+0x19a>
				 zero_commands(&controller);
 8002c12:	4813      	ldr	r0, [pc, #76]	; (8002c60 <run_fsm+0x1e0>)
 8002c14:	f7ff ff29 	bl	8002a6a <zero_commands>
 8002c18:	e009      	b.n	8002c2e <run_fsm+0x1ae>
			 }
			 /* Otherwise, commutate */
			 else{
				 torque_control(&controller);
 8002c1a:	4811      	ldr	r0, [pc, #68]	; (8002c60 <run_fsm+0x1e0>)
 8002c1c:	f7ff ff1b 	bl	8002a56 <torque_control>
				 field_weaken(&controller);
 8002c20:	480f      	ldr	r0, [pc, #60]	; (8002c60 <run_fsm+0x1e0>)
 8002c22:	f7ff ff03 	bl	8002a2c <field_weaken>
//				 commutate(&controller, &comm_encoder);
				 commutate(&controller, &new_encoder);
 8002c26:	490f      	ldr	r1, [pc, #60]	; (8002c64 <run_fsm+0x1e4>)
 8002c28:	480d      	ldr	r0, [pc, #52]	; (8002c60 <run_fsm+0x1e0>)
 8002c2a:	f7ff ff09 	bl	8002a40 <commutate>
			 }
			 controller.timeout ++;
 8002c2e:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <run_fsm+0x1e0>)
 8002c30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c34:	3301      	adds	r3, #1
 8002c36:	4a0a      	ldr	r2, [pc, #40]	; (8002c60 <run_fsm+0x1e0>)
 8002c38:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			 break;
 8002c3c:	e009      	b.n	8002c52 <run_fsm+0x1d2>
		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
//			 ps_print(&comm_encoder, 100);
			 printCMUEncoder(&new_encoder);
 8002c3e:	4809      	ldr	r0, [pc, #36]	; (8002c64 <run_fsm+0x1e4>)
 8002c40:	f001 fdd8 	bl	80047f4 <printCMUEncoder>
			 Sample(&new_encoder, DT);
 8002c44:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8002c80 <run_fsm+0x200>
 8002c48:	4806      	ldr	r0, [pc, #24]	; (8002c64 <run_fsm+0x1e4>)
 8002c4a:	f001 fb8b 	bl	8004364 <Sample>

			 break;
 8002c4e:	e000      	b.n	8002c52 <run_fsm+0x1d2>
			 break;
 8002c50:	bf00      	nop

		 case INIT_TEMP_MODE:
			 break;
	 }

 }
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bdb0      	pop	{r4, r5, r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	2000132c 	.word	0x2000132c
 8002c60:	20000850 	.word	0x20000850
 8002c64:	20001014 	.word	0x20001014
 8002c68:	2000033c 	.word	0x2000033c
 8002c6c:	47800000 	.word	0x47800000
 8002c70:	40c90fdb 	.word	0x40c90fdb
 8002c74:	08010240 	.word	0x08010240
 8002c78:	2000043c 	.word	0x2000043c
 8002c7c:	2000083c 	.word	0x2000083c
 8002c80:	37d1b717 	.word	0x37d1b717

08002c84 <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b05      	cmp	r3, #5
 8002c92:	d84b      	bhi.n	8002d2c <fsm_enter_state+0xa8>
 8002c94:	a201      	add	r2, pc, #4	; (adr r2, 8002c9c <fsm_enter_state+0x18>)
 8002c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9a:	bf00      	nop
 8002c9c:	08002cb5 	.word	0x08002cb5
 8002ca0:	08002ce9 	.word	0x08002ce9
 8002ca4:	08002cc1 	.word	0x08002cc1
 8002ca8:	08002d2d 	.word	0x08002d2d
 8002cac:	08002cbb 	.word	0x08002cbb
 8002cb0:	08002d2b 	.word	0x08002d2b
				case MENU_MODE:
				//printf("Entering Main Menu\r\n");
				enter_menu_state();
 8002cb4:	f000 f972 	bl	8002f9c <enter_menu_state>
				break;
 8002cb8:	e038      	b.n	8002d2c <fsm_enter_state+0xa8>
			case SETUP_MODE:
				//printf("Entering Setup\r\n");
				enter_setup_state();
 8002cba:	f000 f99b 	bl	8002ff4 <enter_setup_state>
				break;
 8002cbe:	e035      	b.n	8002d2c <fsm_enter_state+0xa8>
				//printf("Entering Encoder Mode\r\n");
				break;
			case MOTOR_MODE:

				//printf("Entering Motor Mode\r\n");
				HAL_GPIO_WritePin(LED, GPIO_PIN_SET );
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	2120      	movs	r1, #32
 8002cc4:	481b      	ldr	r0, [pc, #108]	; (8002d34 <fsm_enter_state+0xb0>)
 8002cc6:	f004 fbb7 	bl	8007438 <HAL_GPIO_WritePin>
				reset_foc(&controller);
 8002cca:	481b      	ldr	r0, [pc, #108]	; (8002d38 <fsm_enter_state+0xb4>)
 8002ccc:	f7ff fe3c 	bl	8002948 <reset_foc>
				drv_enable_gd(drv);
 8002cd0:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <fsm_enter_state+0xb8>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	889a      	ldrh	r2, [r3, #4]
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f362 030f 	bfi	r3, r2, #0, #16
 8002cde:	4608      	mov	r0, r1
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f7ff f8c8 	bl	8001e76 <drv_enable_gd>
				break;
 8002ce6:	e021      	b.n	8002d2c <fsm_enter_state+0xa8>
			case CALIBRATION_MODE:
				//printf("Entering Calibration Mode\r\n");
				/* zero out all calibrations before starting */

				comm_encoder_cal.done_cal = 0;
 8002ce8:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <fsm_enter_state+0xbc>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 8002cf0:	4b13      	ldr	r3, [pc, #76]	; (8002d40 <fsm_enter_state+0xbc>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				comm_encoder_cal.started = 0;
 8002cf8:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <fsm_enter_state+0xbc>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	741a      	strb	r2, [r3, #16]
//				comm_encoder.e_zero = 0;
//				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
				new_encoder.ElecOffset = 0;
 8002cfe:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <fsm_enter_state+0xc0>)
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	60da      	str	r2, [r3, #12]
				memset(&new_encoder.offset_lut, 0, sizeof(new_encoder.offset_lut));
 8002d06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	480e      	ldr	r0, [pc, #56]	; (8002d48 <fsm_enter_state+0xc4>)
 8002d0e:	f007 fe2b 	bl	800a968 <memset>
				drv_enable_gd(drv);
 8002d12:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <fsm_enter_state+0xb8>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	4611      	mov	r1, r2
 8002d18:	889a      	ldrh	r2, [r3, #4]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f362 030f 	bfi	r3, r2, #0, #16
 8002d20:	4608      	mov	r0, r1
 8002d22:	4619      	mov	r1, r3
 8002d24:	f7ff f8a7 	bl	8001e76 <drv_enable_gd>
				break;
 8002d28:	e000      	b.n	8002d2c <fsm_enter_state+0xa8>
				break;
 8002d2a:	bf00      	nop

		}
 }
 8002d2c:	bf00      	nop
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40020800 	.word	0x40020800
 8002d38:	20000850 	.word	0x20000850
 8002d3c:	20001324 	.word	0x20001324
 8002d40:	2000132c 	.word	0x2000132c
 8002d44:	20001014 	.word	0x20001014
 8002d48:	20001124 	.word	0x20001124

08002d4c <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b05      	cmp	r3, #5
 8002d5a:	d844      	bhi.n	8002de6 <fsm_exit_state+0x9a>
 8002d5c:	a201      	add	r2, pc, #4	; (adr r2, 8002d64 <fsm_exit_state+0x18>)
 8002d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d62:	bf00      	nop
 8002d64:	08002d7d 	.word	0x08002d7d
 8002d68:	08002dc9 	.word	0x08002dc9
 8002d6c:	08002d95 	.word	0x08002d95
 8002d70:	08002de7 	.word	0x08002de7
 8002d74:	08002d85 	.word	0x08002d85
 8002d78:	08002d8d 	.word	0x08002d8d
			case MENU_MODE:
				//printf("Leaving Main Menu\r\n");
				fsmstate->ready = 1;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	70da      	strb	r2, [r3, #3]
				break;
 8002d82:	e030      	b.n	8002de6 <fsm_exit_state+0x9a>
			case SETUP_MODE:
				//printf("Leaving Setup Menu\r\n");
				fsmstate->ready = 1;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	70da      	strb	r2, [r3, #3]
				break;
 8002d8a:	e02c      	b.n	8002de6 <fsm_exit_state+0x9a>
			case ENCODER_MODE:
				//printf("Leaving Encoder Mode\r\n");
				fsmstate->ready = 1;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	70da      	strb	r2, [r3, #3]
				break;
 8002d92:	e028      	b.n	8002de6 <fsm_exit_state+0x9a>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
				//if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
					fsmstate->ready = 1;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	70da      	strb	r2, [r3, #3]
					drv_disable_gd(drv);
 8002d9a:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <fsm_exit_state+0xa4>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	4611      	mov	r1, r2
 8002da0:	889a      	ldrh	r2, [r3, #4]
 8002da2:	2300      	movs	r3, #0
 8002da4:	f362 030f 	bfi	r3, r2, #0, #16
 8002da8:	4608      	mov	r0, r1
 8002daa:	4619      	mov	r1, r3
 8002dac:	f7ff f87d 	bl	8001eaa <drv_disable_gd>
					reset_foc(&controller);
 8002db0:	4810      	ldr	r0, [pc, #64]	; (8002df4 <fsm_exit_state+0xa8>)
 8002db2:	f7ff fdc9 	bl	8002948 <reset_foc>
					//printf("Leaving Motor Mode\r\n");
					HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 8002db6:	2200      	movs	r2, #0
 8002db8:	2120      	movs	r1, #32
 8002dba:	480f      	ldr	r0, [pc, #60]	; (8002df8 <fsm_exit_state+0xac>)
 8002dbc:	f004 fb3c 	bl	8007438 <HAL_GPIO_WritePin>
				//}
				zero_commands(&controller);		// Set commands to zero
 8002dc0:	480c      	ldr	r0, [pc, #48]	; (8002df4 <fsm_exit_state+0xa8>)
 8002dc2:	f7ff fe52 	bl	8002a6a <zero_commands>
				break;
 8002dc6:	e00e      	b.n	8002de6 <fsm_exit_state+0x9a>
			case CALIBRATION_MODE:
				//printf("Exiting Calibration Mode\r\n");
				drv_disable_gd(drv);
 8002dc8:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <fsm_exit_state+0xa4>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4611      	mov	r1, r2
 8002dce:	889a      	ldrh	r2, [r3, #4]
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f362 030f 	bfi	r3, r2, #0, #16
 8002dd6:	4608      	mov	r0, r1
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f7ff f866 	bl	8001eaa <drv_disable_gd>
				//free(error_array);
				//free(lut_array);

				fsmstate->ready = 1;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	70da      	strb	r2, [r3, #3]
				break;
 8002de4:	bf00      	nop
		}

 }
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20001324 	.word	0x20001324
 8002df4:	20000850 	.word	0x20000850
 8002df8:	40020800 	.word	0x40020800

08002dfc <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
	if(fsm_input == MENU_CMD){	// escape to exit to rest mode
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	2b1b      	cmp	r3, #27
 8002e0c:	d106      	bne.n	8002e1c <update_fsm+0x20>
		fsmstate->next_state = MENU_MODE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	70da      	strb	r2, [r3, #3]
		return;
 8002e1a:	e0b3      	b.n	8002f84 <update_fsm+0x188>
	}
	switch(fsmstate->state){
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b05      	cmp	r3, #5
 8002e22:	f200 80af 	bhi.w	8002f84 <update_fsm+0x188>
 8002e26:	a201      	add	r2, pc, #4	; (adr r2, 8002e2c <update_fsm+0x30>)
 8002e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2c:	08002e45 	.word	0x08002e45
 8002e30:	08002f85 	.word	0x08002f85
 8002e34:	08002f85 	.word	0x08002f85
 8002e38:	08002f85 	.word	0x08002f85
 8002e3c:	08002f49 	.word	0x08002f49
 8002e40:	08002f85 	.word	0x08002f85
		case MENU_MODE:
			switch (fsm_input){
 8002e44:	78fb      	ldrb	r3, [r7, #3]
 8002e46:	3b63      	subs	r3, #99	; 0x63
 8002e48:	2b17      	cmp	r3, #23
 8002e4a:	f200 809a 	bhi.w	8002f82 <update_fsm+0x186>
 8002e4e:	a201      	add	r2, pc, #4	; (adr r2, 8002e54 <update_fsm+0x58>)
 8002e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e54:	08002eb5 	.word	0x08002eb5
 8002e58:	08002f83 	.word	0x08002f83
 8002e5c:	08002ed1 	.word	0x08002ed1
 8002e60:	08002f83 	.word	0x08002f83
 8002e64:	08002f83 	.word	0x08002f83
 8002e68:	08002f83 	.word	0x08002f83
 8002e6c:	08002f83 	.word	0x08002f83
 8002e70:	08002f83 	.word	0x08002f83
 8002e74:	08002f83 	.word	0x08002f83
 8002e78:	08002f83 	.word	0x08002f83
 8002e7c:	08002ec3 	.word	0x08002ec3
 8002e80:	08002f83 	.word	0x08002f83
 8002e84:	08002f83 	.word	0x08002f83
 8002e88:	08002f83 	.word	0x08002f83
 8002e8c:	08002f83 	.word	0x08002f83
 8002e90:	08002f83 	.word	0x08002f83
 8002e94:	08002edf 	.word	0x08002edf
 8002e98:	08002f83 	.word	0x08002f83
 8002e9c:	08002f83 	.word	0x08002f83
 8002ea0:	08002f83 	.word	0x08002f83
 8002ea4:	08002f83 	.word	0x08002f83
 8002ea8:	08002f83 	.word	0x08002f83
 8002eac:	08002f83 	.word	0x08002f83
 8002eb0:	08002eed 	.word	0x08002eed
				case CAL_CMD:
					fsmstate->next_state = CALIBRATION_MODE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	70da      	strb	r2, [r3, #3]
					break;
 8002ec0:	e041      	b.n	8002f46 <update_fsm+0x14a>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	70da      	strb	r2, [r3, #3]
					break;
 8002ece:	e03a      	b.n	8002f46 <update_fsm+0x14a>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2205      	movs	r2, #5
 8002ed4:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	70da      	strb	r2, [r3, #3]
					break;
 8002edc:	e033      	b.n	8002f46 <update_fsm+0x14a>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2204      	movs	r2, #4
 8002ee2:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	70da      	strb	r2, [r3, #3]
					break;
 8002eea:	e02c      	b.n	8002f46 <update_fsm+0x14a>
				case ZERO_CMD:
//					comm_encoder.m_zero = 0;
//					ps_sample(&comm_encoder, DT);
//					int zero_count = comm_encoder.count;
//					M_ZERO = zero_count;
					ZeroPosition(&new_encoder);
 8002eec:	4827      	ldr	r0, [pc, #156]	; (8002f8c <update_fsm+0x190>)
 8002eee:	f001 fc65 	bl	80047bc <ZeroPosition>
					M_ZERO = new_encoder.MechOffset;
 8002ef2:	4b26      	ldr	r3, [pc, #152]	; (8002f8c <update_fsm+0x190>)
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	4a26      	ldr	r2, [pc, #152]	; (8002f90 <update_fsm+0x194>)
 8002ef8:	6053      	str	r3, [r2, #4]

					if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 8002efa:	4b26      	ldr	r3, [pc, #152]	; (8002f94 <update_fsm+0x198>)
 8002efc:	691a      	ldr	r2, [r3, #16]
 8002efe:	9200      	str	r2, [sp, #0]
 8002f00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f02:	f001 fcbb 	bl	800487c <preference_writer_ready>
 8002f06:	4603      	mov	r3, r0
 8002f08:	f083 0301 	eor.w	r3, r3, #1
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <update_fsm+0x11c>
 8002f12:	4820      	ldr	r0, [pc, #128]	; (8002f94 <update_fsm+0x198>)
 8002f14:	f001 fca3 	bl	800485e <preference_writer_open>
					preference_writer_flush(&prefs);
 8002f18:	481e      	ldr	r0, [pc, #120]	; (8002f94 <update_fsm+0x198>)
 8002f1a:	f001 fcbd 	bl	8004898 <preference_writer_flush>
					preference_writer_close(&prefs);
 8002f1e:	481d      	ldr	r0, [pc, #116]	; (8002f94 <update_fsm+0x198>)
 8002f20:	f001 fd38 	bl	8004994 <preference_writer_close>
					preference_writer_load(prefs);
 8002f24:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <update_fsm+0x198>)
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	9200      	str	r2, [sp, #0]
 8002f2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f2c:	f001 fcf0 	bl	8004910 <preference_writer_load>
					printf("\n\r  Saved new zero position:  %f\n\r\n\r", M_ZERO);
 8002f30:	4b17      	ldr	r3, [pc, #92]	; (8002f90 <update_fsm+0x194>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fd fb27 	bl	8000588 <__aeabi_f2d>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4816      	ldr	r0, [pc, #88]	; (8002f98 <update_fsm+0x19c>)
 8002f40:	f008 f984 	bl	800b24c <iprintf>
					break;
 8002f44:	bf00      	nop
				}
			break;
 8002f46:	e01c      	b.n	8002f82 <update_fsm+0x186>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	2b0d      	cmp	r3, #13
 8002f4c:	d103      	bne.n	8002f56 <update_fsm+0x15a>
				process_user_input(fsmstate);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f9c6 	bl	80032e0 <process_user_input>
				break;
 8002f54:	e016      	b.n	8002f84 <update_fsm+0x188>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	7b1b      	ldrb	r3, [r3, #12]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d103      	bne.n	8002f66 <update_fsm+0x16a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	735a      	strb	r2, [r3, #13]
 8002f64:	e006      	b.n	8002f74 <update_fsm+0x178>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	7b1b      	ldrb	r3, [r3, #12]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	4413      	add	r3, r2
 8002f70:	78fa      	ldrb	r2, [r7, #3]
 8002f72:	711a      	strb	r2, [r3, #4]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	7b1b      	ldrb	r3, [r3, #12]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	731a      	strb	r2, [r3, #12]
			/* If enter is typed, process user input */

			break;
 8002f80:	e000      	b.n	8002f84 <update_fsm+0x188>
			break;
 8002f82:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20001014 	.word	0x20001014
 8002f90:	2000033c 	.word	0x2000033c
 8002f94:	2000083c 	.word	0x2000083c
 8002f98:	08010254 	.word	0x08010254

08002f9c <enter_menu_state>:


 void enter_menu_state(void){
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r\n\r");
 8002fa0:	480c      	ldr	r0, [pc, #48]	; (8002fd4 <enter_menu_state+0x38>)
 8002fa2:	f008 f953 	bl	800b24c <iprintf>
	    printf(" Commands:\n\r");
 8002fa6:	480c      	ldr	r0, [pc, #48]	; (8002fd8 <enter_menu_state+0x3c>)
 8002fa8:	f008 f950 	bl	800b24c <iprintf>
	    printf(" m - Motor Mode\n\r");
 8002fac:	480b      	ldr	r0, [pc, #44]	; (8002fdc <enter_menu_state+0x40>)
 8002fae:	f008 f94d 	bl	800b24c <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 8002fb2:	480b      	ldr	r0, [pc, #44]	; (8002fe0 <enter_menu_state+0x44>)
 8002fb4:	f008 f94a 	bl	800b24c <iprintf>
	    printf(" s - Setup\n\r");
 8002fb8:	480a      	ldr	r0, [pc, #40]	; (8002fe4 <enter_menu_state+0x48>)
 8002fba:	f008 f947 	bl	800b24c <iprintf>
	    printf(" e - Display Encoder\n\r");
 8002fbe:	480a      	ldr	r0, [pc, #40]	; (8002fe8 <enter_menu_state+0x4c>)
 8002fc0:	f008 f944 	bl	800b24c <iprintf>
	    printf(" z - Set Zero Position\n\r");
 8002fc4:	4809      	ldr	r0, [pc, #36]	; (8002fec <enter_menu_state+0x50>)
 8002fc6:	f008 f941 	bl	800b24c <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 8002fca:	4809      	ldr	r0, [pc, #36]	; (8002ff0 <enter_menu_state+0x54>)
 8002fcc:	f008 f93e 	bl	800b24c <iprintf>

	    //gpio.led->write(0);
 }
 8002fd0:	bf00      	nop
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	0801027c 	.word	0x0801027c
 8002fd8:	08010284 	.word	0x08010284
 8002fdc:	08010294 	.word	0x08010294
 8002fe0:	080102a8 	.word	0x080102a8
 8002fe4:	080102c4 	.word	0x080102c4
 8002fe8:	080102d4 	.word	0x080102d4
 8002fec:	080102ec 	.word	0x080102ec
 8002ff0:	08010308 	.word	0x08010308

08002ff4 <enter_setup_state>:

 void enter_setup_state(void){
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 8002ffa:	487d      	ldr	r0, [pc, #500]	; (80031f0 <enter_setup_state+0x1fc>)
 8002ffc:	f008 f926 	bl	800b24c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 8003000:	4b7c      	ldr	r3, [pc, #496]	; (80031f4 <enter_setup_state+0x200>)
 8003002:	9301      	str	r3, [sp, #4]
 8003004:	4b7c      	ldr	r3, [pc, #496]	; (80031f8 <enter_setup_state+0x204>)
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	4b7c      	ldr	r3, [pc, #496]	; (80031fc <enter_setup_state+0x208>)
 800300a:	4a7d      	ldr	r2, [pc, #500]	; (8003200 <enter_setup_state+0x20c>)
 800300c:	497d      	ldr	r1, [pc, #500]	; (8003204 <enter_setup_state+0x210>)
 800300e:	487e      	ldr	r0, [pc, #504]	; (8003208 <enter_setup_state+0x214>)
 8003010:	f008 f91c 	bl	800b24c <iprintf>
	    printf("\r\n Motor:\r\n");
 8003014:	487d      	ldr	r0, [pc, #500]	; (800320c <enter_setup_state+0x218>)
 8003016:	f008 f99f 	bl	800b358 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 800301a:	4b7d      	ldr	r3, [pc, #500]	; (8003210 <enter_setup_state+0x21c>)
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	4618      	mov	r0, r3
 8003020:	f7fd fab2 	bl	8000588 <__aeabi_f2d>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800302c:	4b79      	ldr	r3, [pc, #484]	; (8003214 <enter_setup_state+0x220>)
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	4b79      	ldr	r3, [pc, #484]	; (8003218 <enter_setup_state+0x224>)
 8003032:	4a7a      	ldr	r2, [pc, #488]	; (800321c <enter_setup_state+0x228>)
 8003034:	497a      	ldr	r1, [pc, #488]	; (8003220 <enter_setup_state+0x22c>)
 8003036:	487b      	ldr	r0, [pc, #492]	; (8003224 <enter_setup_state+0x230>)
 8003038:	f008 f908 	bl	800b24c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
 800303c:	4b74      	ldr	r3, [pc, #464]	; (8003210 <enter_setup_state+0x21c>)
 800303e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003040:	4618      	mov	r0, r3
 8003042:	f7fd faa1 	bl	8000588 <__aeabi_f2d>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800304e:	4b71      	ldr	r3, [pc, #452]	; (8003214 <enter_setup_state+0x220>)
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	4b71      	ldr	r3, [pc, #452]	; (8003218 <enter_setup_state+0x224>)
 8003054:	4a74      	ldr	r2, [pc, #464]	; (8003228 <enter_setup_state+0x234>)
 8003056:	4975      	ldr	r1, [pc, #468]	; (800322c <enter_setup_state+0x238>)
 8003058:	4875      	ldr	r0, [pc, #468]	; (8003230 <enter_setup_state+0x23c>)
 800305a:	f008 f8f7 	bl	800b24c <iprintf>
	    printf("\r\n Control:\r\n");
 800305e:	4875      	ldr	r0, [pc, #468]	; (8003234 <enter_setup_state+0x240>)
 8003060:	f008 f97a 	bl	800b358 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 8003064:	4b6a      	ldr	r3, [pc, #424]	; (8003210 <enter_setup_state+0x21c>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	4618      	mov	r0, r3
 800306a:	f7fd fa8d 	bl	8000588 <__aeabi_f2d>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003076:	4b70      	ldr	r3, [pc, #448]	; (8003238 <enter_setup_state+0x244>)
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	4b70      	ldr	r3, [pc, #448]	; (800323c <enter_setup_state+0x248>)
 800307c:	4a70      	ldr	r2, [pc, #448]	; (8003240 <enter_setup_state+0x24c>)
 800307e:	4971      	ldr	r1, [pc, #452]	; (8003244 <enter_setup_state+0x250>)
 8003080:	4871      	ldr	r0, [pc, #452]	; (8003248 <enter_setup_state+0x254>)
 8003082:	f008 f8e3 	bl	800b24c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "60.0", I_MAX);
 8003086:	4b62      	ldr	r3, [pc, #392]	; (8003210 <enter_setup_state+0x21c>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	4618      	mov	r0, r3
 800308c:	f7fd fa7c 	bl	8000588 <__aeabi_f2d>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003098:	4b6c      	ldr	r3, [pc, #432]	; (800324c <enter_setup_state+0x258>)
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	4b6c      	ldr	r3, [pc, #432]	; (8003250 <enter_setup_state+0x25c>)
 800309e:	4a6d      	ldr	r2, [pc, #436]	; (8003254 <enter_setup_state+0x260>)
 80030a0:	496d      	ldr	r1, [pc, #436]	; (8003258 <enter_setup_state+0x264>)
 80030a2:	4869      	ldr	r0, [pc, #420]	; (8003248 <enter_setup_state+0x254>)
 80030a4:	f008 f8d2 	bl	800b24c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "p", "Max Position Setpoint (rad)", "-", "-", P_MAX);
 80030a8:	4b59      	ldr	r3, [pc, #356]	; (8003210 <enter_setup_state+0x21c>)
 80030aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fd fa6b 	bl	8000588 <__aeabi_f2d>
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80030ba:	4b56      	ldr	r3, [pc, #344]	; (8003214 <enter_setup_state+0x220>)
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	4b55      	ldr	r3, [pc, #340]	; (8003214 <enter_setup_state+0x220>)
 80030c0:	4a66      	ldr	r2, [pc, #408]	; (800325c <enter_setup_state+0x268>)
 80030c2:	4967      	ldr	r1, [pc, #412]	; (8003260 <enter_setup_state+0x26c>)
 80030c4:	4860      	ldr	r0, [pc, #384]	; (8003248 <enter_setup_state+0x254>)
 80030c6:	f008 f8c1 	bl	800b24c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 80030ca:	4b51      	ldr	r3, [pc, #324]	; (8003210 <enter_setup_state+0x21c>)
 80030cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fd fa5a 	bl	8000588 <__aeabi_f2d>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80030dc:	4b4d      	ldr	r3, [pc, #308]	; (8003214 <enter_setup_state+0x220>)
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	4b4c      	ldr	r3, [pc, #304]	; (8003214 <enter_setup_state+0x220>)
 80030e2:	4a60      	ldr	r2, [pc, #384]	; (8003264 <enter_setup_state+0x270>)
 80030e4:	4960      	ldr	r1, [pc, #384]	; (8003268 <enter_setup_state+0x274>)
 80030e6:	4858      	ldr	r0, [pc, #352]	; (8003248 <enter_setup_state+0x254>)
 80030e8:	f008 f8b0 	bl	800b24c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "x", "Max Position Gain (N-m/rad)", "0.0", "1000.0", KP_MAX);
 80030ec:	4b48      	ldr	r3, [pc, #288]	; (8003210 <enter_setup_state+0x21c>)
 80030ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fd fa49 	bl	8000588 <__aeabi_f2d>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80030fe:	4b5b      	ldr	r3, [pc, #364]	; (800326c <enter_setup_state+0x278>)
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	4b53      	ldr	r3, [pc, #332]	; (8003250 <enter_setup_state+0x25c>)
 8003104:	4a5a      	ldr	r2, [pc, #360]	; (8003270 <enter_setup_state+0x27c>)
 8003106:	495b      	ldr	r1, [pc, #364]	; (8003274 <enter_setup_state+0x280>)
 8003108:	484f      	ldr	r0, [pc, #316]	; (8003248 <enter_setup_state+0x254>)
 800310a:	f008 f89f 	bl	800b24c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "d", "Max Velocity Gain (N-m/rad/s)", "0.0", "5.0", KD_MAX);
 800310e:	4b40      	ldr	r3, [pc, #256]	; (8003210 <enter_setup_state+0x21c>)
 8003110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003112:	4618      	mov	r0, r3
 8003114:	f7fd fa38 	bl	8000588 <__aeabi_f2d>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003120:	4b55      	ldr	r3, [pc, #340]	; (8003278 <enter_setup_state+0x284>)
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	4b4a      	ldr	r3, [pc, #296]	; (8003250 <enter_setup_state+0x25c>)
 8003126:	4a55      	ldr	r2, [pc, #340]	; (800327c <enter_setup_state+0x288>)
 8003128:	4955      	ldr	r1, [pc, #340]	; (8003280 <enter_setup_state+0x28c>)
 800312a:	4847      	ldr	r0, [pc, #284]	; (8003248 <enter_setup_state+0x254>)
 800312c:	f008 f88e 	bl	800b24c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 8003130:	4b37      	ldr	r3, [pc, #220]	; (8003210 <enter_setup_state+0x21c>)
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	4618      	mov	r0, r3
 8003136:	f7fd fa27 	bl	8000588 <__aeabi_f2d>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003142:	4b50      	ldr	r3, [pc, #320]	; (8003284 <enter_setup_state+0x290>)
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	4b42      	ldr	r3, [pc, #264]	; (8003250 <enter_setup_state+0x25c>)
 8003148:	4a4f      	ldr	r2, [pc, #316]	; (8003288 <enter_setup_state+0x294>)
 800314a:	4950      	ldr	r1, [pc, #320]	; (800328c <enter_setup_state+0x298>)
 800314c:	483e      	ldr	r0, [pc, #248]	; (8003248 <enter_setup_state+0x254>)
 800314e:	f008 f87d 	bl	800b24c <iprintf>
	    //printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0", "150", TEMP_MAX);
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
 8003152:	4b2f      	ldr	r3, [pc, #188]	; (8003210 <enter_setup_state+0x21c>)
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	4618      	mov	r0, r3
 8003158:	f7fd fa16 	bl	8000588 <__aeabi_f2d>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003164:	4b4a      	ldr	r3, [pc, #296]	; (8003290 <enter_setup_state+0x29c>)
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	4b39      	ldr	r3, [pc, #228]	; (8003250 <enter_setup_state+0x25c>)
 800316a:	4a4a      	ldr	r2, [pc, #296]	; (8003294 <enter_setup_state+0x2a0>)
 800316c:	494a      	ldr	r1, [pc, #296]	; (8003298 <enter_setup_state+0x2a4>)
 800316e:	4836      	ldr	r0, [pc, #216]	; (8003248 <enter_setup_state+0x254>)
 8003170:	f008 f86c 	bl	800b24c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
 8003174:	4b26      	ldr	r3, [pc, #152]	; (8003210 <enter_setup_state+0x21c>)
 8003176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003178:	4618      	mov	r0, r3
 800317a:	f7fd fa05 	bl	8000588 <__aeabi_f2d>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003186:	4b45      	ldr	r3, [pc, #276]	; (800329c <enter_setup_state+0x2a8>)
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	4b31      	ldr	r3, [pc, #196]	; (8003250 <enter_setup_state+0x25c>)
 800318c:	4a44      	ldr	r2, [pc, #272]	; (80032a0 <enter_setup_state+0x2ac>)
 800318e:	4945      	ldr	r1, [pc, #276]	; (80032a4 <enter_setup_state+0x2b0>)
 8003190:	482d      	ldr	r0, [pc, #180]	; (8003248 <enter_setup_state+0x254>)
 8003192:	f008 f85b 	bl	800b24c <iprintf>
	    printf("\r\n CAN:\r\n");
 8003196:	4844      	ldr	r0, [pc, #272]	; (80032a8 <enter_setup_state+0x2b4>)
 8003198:	f008 f8de 	bl	800b358 <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 800319c:	4b43      	ldr	r3, [pc, #268]	; (80032ac <enter_setup_state+0x2b8>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	9301      	str	r3, [sp, #4]
 80031a2:	4b43      	ldr	r3, [pc, #268]	; (80032b0 <enter_setup_state+0x2bc>)
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	4b1c      	ldr	r3, [pc, #112]	; (8003218 <enter_setup_state+0x224>)
 80031a8:	4a42      	ldr	r2, [pc, #264]	; (80032b4 <enter_setup_state+0x2c0>)
 80031aa:	4943      	ldr	r1, [pc, #268]	; (80032b8 <enter_setup_state+0x2c4>)
 80031ac:	4843      	ldr	r0, [pc, #268]	; (80032bc <enter_setup_state+0x2c8>)
 80031ae:	f008 f84d 	bl	800b24c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN TX ID", "0", "127", CAN_MASTER);
 80031b2:	4b3e      	ldr	r3, [pc, #248]	; (80032ac <enter_setup_state+0x2b8>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	9301      	str	r3, [sp, #4]
 80031b8:	4b3d      	ldr	r3, [pc, #244]	; (80032b0 <enter_setup_state+0x2bc>)
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	4b16      	ldr	r3, [pc, #88]	; (8003218 <enter_setup_state+0x224>)
 80031be:	4a40      	ldr	r2, [pc, #256]	; (80032c0 <enter_setup_state+0x2cc>)
 80031c0:	4940      	ldr	r1, [pc, #256]	; (80032c4 <enter_setup_state+0x2d0>)
 80031c2:	483e      	ldr	r0, [pc, #248]	; (80032bc <enter_setup_state+0x2c8>)
 80031c4:	f008 f842 	bl	800b24c <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 80031c8:	4b38      	ldr	r3, [pc, #224]	; (80032ac <enter_setup_state+0x2b8>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	9301      	str	r3, [sp, #4]
 80031ce:	4b3e      	ldr	r3, [pc, #248]	; (80032c8 <enter_setup_state+0x2d4>)
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	4b11      	ldr	r3, [pc, #68]	; (8003218 <enter_setup_state+0x224>)
 80031d4:	4a3d      	ldr	r2, [pc, #244]	; (80032cc <enter_setup_state+0x2d8>)
 80031d6:	493e      	ldr	r1, [pc, #248]	; (80032d0 <enter_setup_state+0x2dc>)
 80031d8:	483e      	ldr	r0, [pc, #248]	; (80032d4 <enter_setup_state+0x2e0>)
 80031da:	f008 f837 	bl	800b24c <iprintf>
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 80031de:	483e      	ldr	r0, [pc, #248]	; (80032d8 <enter_setup_state+0x2e4>)
 80031e0:	f008 f834 	bl	800b24c <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 80031e4:	483d      	ldr	r0, [pc, #244]	; (80032dc <enter_setup_state+0x2e8>)
 80031e6:	f008 f831 	bl	800b24c <iprintf>
 }
 80031ea:	bf00      	nop
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	08010320 	.word	0x08010320
 80031f4:	08010374 	.word	0x08010374
 80031f8:	08010384 	.word	0x08010384
 80031fc:	0801033c 	.word	0x0801033c
 8003200:	08010340 	.word	0x08010340
 8003204:	0801034c 	.word	0x0801034c
 8003208:	08010354 	.word	0x08010354
 800320c:	08010388 	.word	0x08010388
 8003210:	2000033c 	.word	0x2000033c
 8003214:	080103c8 	.word	0x080103c8
 8003218:	08010394 	.word	0x08010394
 800321c:	08010398 	.word	0x08010398
 8003220:	080103a4 	.word	0x080103a4
 8003224:	080103a8 	.word	0x080103a8
 8003228:	080103cc 	.word	0x080103cc
 800322c:	080103e4 	.word	0x080103e4
 8003230:	080103e8 	.word	0x080103e8
 8003234:	08010408 	.word	0x08010408
 8003238:	08010458 	.word	0x08010458
 800323c:	08010418 	.word	0x08010418
 8003240:	0801041c 	.word	0x0801041c
 8003244:	08010434 	.word	0x08010434
 8003248:	08010438 	.word	0x08010438
 800324c:	0801047c 	.word	0x0801047c
 8003250:	08010460 	.word	0x08010460
 8003254:	08010464 	.word	0x08010464
 8003258:	08010478 	.word	0x08010478
 800325c:	08010484 	.word	0x08010484
 8003260:	080104a0 	.word	0x080104a0
 8003264:	080104a4 	.word	0x080104a4
 8003268:	080104c4 	.word	0x080104c4
 800326c:	080104e8 	.word	0x080104e8
 8003270:	080104c8 	.word	0x080104c8
 8003274:	080104e4 	.word	0x080104e4
 8003278:	08010514 	.word	0x08010514
 800327c:	080104f0 	.word	0x080104f0
 8003280:	08010510 	.word	0x08010510
 8003284:	08010534 	.word	0x08010534
 8003288:	08010518 	.word	0x08010518
 800328c:	08010530 	.word	0x08010530
 8003290:	08010558 	.word	0x08010558
 8003294:	0801053c 	.word	0x0801053c
 8003298:	08010554 	.word	0x08010554
 800329c:	0801057c 	.word	0x0801057c
 80032a0:	08010560 	.word	0x08010560
 80032a4:	08010578 	.word	0x08010578
 80032a8:	08010584 	.word	0x08010584
 80032ac:	2000043c 	.word	0x2000043c
 80032b0:	080105bc 	.word	0x080105bc
 80032b4:	08010590 	.word	0x08010590
 80032b8:	08010598 	.word	0x08010598
 80032bc:	0801059c 	.word	0x0801059c
 80032c0:	080105c0 	.word	0x080105c0
 80032c4:	080105cc 	.word	0x080105cc
 80032c8:	08010610 	.word	0x08010610
 80032cc:	080105d0 	.word	0x080105d0
 80032d0:	080105f0 	.word	0x080105f0
 80032d4:	080105f4 	.word	0x080105f4
 80032d8:	08010618 	.word	0x08010618
 80032dc:	08010664 	.word	0x08010664

080032e0 <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af02      	add	r7, sp, #8
 80032e6:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 switch (fsmstate->cmd_id){
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	7b5b      	ldrb	r3, [r3, #13]
 80032ec:	3b61      	subs	r3, #97	; 0x61
 80032ee:	2b17      	cmp	r3, #23
 80032f0:	f200 8268 	bhi.w	80037c4 <process_user_input+0x4e4>
 80032f4:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <process_user_input+0x1c>)
 80032f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fa:	bf00      	nop
 80032fc:	0800355b 	.word	0x0800355b
 8003300:	0800335d 	.word	0x0800335d
 8003304:	08003507 	.word	0x08003507
 8003308:	080036d9 	.word	0x080036d9
 800330c:	080037c5 	.word	0x080037c5
 8003310:	08003441 	.word	0x08003441
 8003314:	080035af 	.word	0x080035af
 8003318:	080034b3 	.word	0x080034b3
 800331c:	080033b1 	.word	0x080033b1
 8003320:	080037c5 	.word	0x080037c5
 8003324:	080035f3 	.word	0x080035f3
 8003328:	080033ed 	.word	0x080033ed
 800332c:	080033cf 	.word	0x080033cf
 8003330:	080037c5 	.word	0x080037c5
 8003334:	080037c5 	.word	0x080037c5
 8003338:	0800371d 	.word	0x0800371d
 800333c:	080037c5 	.word	0x080037c5
 8003340:	080037c5 	.word	0x080037c5
 8003344:	080037c5 	.word	0x080037c5
 8003348:	08003495 	.word	0x08003495
 800334c:	080037c5 	.word	0x080037c5
 8003350:	08003771 	.word	0x08003771
 8003354:	080037c5 	.word	0x080037c5
 8003358:	08003637 	.word	0x08003637
		 case 'b':
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3304      	adds	r3, #4
 8003360:	4618      	mov	r0, r3
 8003362:	f007 fac1 	bl	800a8e8 <atof>
 8003366:	ec53 2b10 	vmov	r2, r3, d0
 800336a:	4610      	mov	r0, r2
 800336c:	4619      	mov	r1, r3
 800336e:	f7fd fc5b 	bl	8000c28 <__aeabi_d2f>
 8003372:	4603      	mov	r3, r0
 8003374:	eddf 0ac1 	vldr	s1, [pc, #772]	; 800367c <process_user_input+0x39c>
 8003378:	ee00 3a10 	vmov	s0, r3
 800337c:	f00b fc2f 	bl	800ebde <fminf>
 8003380:	eef0 7a40 	vmov.f32	s15, s0
 8003384:	eddf 0abe 	vldr	s1, [pc, #760]	; 8003680 <process_user_input+0x3a0>
 8003388:	eeb0 0a67 	vmov.f32	s0, s15
 800338c:	f00b fc0c 	bl	800eba8 <fmaxf>
 8003390:	eef0 7a40 	vmov.f32	s15, s0
 8003394:	4bbb      	ldr	r3, [pc, #748]	; (8003684 <process_user_input+0x3a4>)
 8003396:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 800339a:	4bba      	ldr	r3, [pc, #744]	; (8003684 <process_user_input+0x3a4>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd f8f2 	bl	8000588 <__aeabi_f2d>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	48b7      	ldr	r0, [pc, #732]	; (8003688 <process_user_input+0x3a8>)
 80033aa:	f007 ff4f 	bl	800b24c <iprintf>
			 break;
 80033ae:	e210      	b.n	80037d2 <process_user_input+0x4f2>
		 case 'i':
			 CAN_ID = atoi(fsmstate->cmd_buff);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3304      	adds	r3, #4
 80033b4:	4618      	mov	r0, r3
 80033b6:	f007 fa9a 	bl	800a8ee <atoi>
 80033ba:	4603      	mov	r3, r0
 80033bc:	4ab3      	ldr	r2, [pc, #716]	; (800368c <process_user_input+0x3ac>)
 80033be:	6053      	str	r3, [r2, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 80033c0:	4bb2      	ldr	r3, [pc, #712]	; (800368c <process_user_input+0x3ac>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	4619      	mov	r1, r3
 80033c6:	48b2      	ldr	r0, [pc, #712]	; (8003690 <process_user_input+0x3b0>)
 80033c8:	f007 ff40 	bl	800b24c <iprintf>
			 break;
 80033cc:	e201      	b.n	80037d2 <process_user_input+0x4f2>
		 case 'm':
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3304      	adds	r3, #4
 80033d2:	4618      	mov	r0, r3
 80033d4:	f007 fa8b 	bl	800a8ee <atoi>
 80033d8:	4603      	mov	r3, r0
 80033da:	4aac      	ldr	r2, [pc, #688]	; (800368c <process_user_input+0x3ac>)
 80033dc:	6093      	str	r3, [r2, #8]
			 printf("CAN_TX_ID set to %d\r\n", CAN_MASTER);
 80033de:	4bab      	ldr	r3, [pc, #684]	; (800368c <process_user_input+0x3ac>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	4619      	mov	r1, r3
 80033e4:	48ab      	ldr	r0, [pc, #684]	; (8003694 <process_user_input+0x3b4>)
 80033e6:	f007 ff31 	bl	800b24c <iprintf>
			 break;
 80033ea:	e1f2      	b.n	80037d2 <process_user_input+0x4f2>
		 case 'l':
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 60.0f), 0.0f);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3304      	adds	r3, #4
 80033f0:	4618      	mov	r0, r3
 80033f2:	f007 fa79 	bl	800a8e8 <atof>
 80033f6:	ec53 2b10 	vmov	r2, r3, d0
 80033fa:	4610      	mov	r0, r2
 80033fc:	4619      	mov	r1, r3
 80033fe:	f7fd fc13 	bl	8000c28 <__aeabi_d2f>
 8003402:	4603      	mov	r3, r0
 8003404:	eddf 0aa4 	vldr	s1, [pc, #656]	; 8003698 <process_user_input+0x3b8>
 8003408:	ee00 3a10 	vmov	s0, r3
 800340c:	f00b fbe7 	bl	800ebde <fminf>
 8003410:	eef0 7a40 	vmov.f32	s15, s0
 8003414:	eddf 0aaf 	vldr	s1, [pc, #700]	; 80036d4 <process_user_input+0x3f4>
 8003418:	eeb0 0a67 	vmov.f32	s0, s15
 800341c:	f00b fbc4 	bl	800eba8 <fmaxf>
 8003420:	eef0 7a40 	vmov.f32	s15, s0
 8003424:	4b97      	ldr	r3, [pc, #604]	; (8003684 <process_user_input+0x3a4>)
 8003426:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 800342a:	4b96      	ldr	r3, [pc, #600]	; (8003684 <process_user_input+0x3a4>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd f8aa 	bl	8000588 <__aeabi_f2d>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4898      	ldr	r0, [pc, #608]	; (800369c <process_user_input+0x3bc>)
 800343a:	f007 ff07 	bl	800b24c <iprintf>
			 break;
 800343e:	e1c8      	b.n	80037d2 <process_user_input+0x4f2>
		 case 'f':
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3304      	adds	r3, #4
 8003444:	4618      	mov	r0, r3
 8003446:	f007 fa4f 	bl	800a8e8 <atof>
 800344a:	ec53 2b10 	vmov	r2, r3, d0
 800344e:	4610      	mov	r0, r2
 8003450:	4619      	mov	r1, r3
 8003452:	f7fd fbe9 	bl	8000c28 <__aeabi_d2f>
 8003456:	4603      	mov	r3, r0
 8003458:	eddf 0a91 	vldr	s1, [pc, #580]	; 80036a0 <process_user_input+0x3c0>
 800345c:	ee00 3a10 	vmov	s0, r3
 8003460:	f00b fbbd 	bl	800ebde <fminf>
 8003464:	eef0 7a40 	vmov.f32	s15, s0
 8003468:	eddf 0a9a 	vldr	s1, [pc, #616]	; 80036d4 <process_user_input+0x3f4>
 800346c:	eeb0 0a67 	vmov.f32	s0, s15
 8003470:	f00b fb9a 	bl	800eba8 <fmaxf>
 8003474:	eef0 7a40 	vmov.f32	s15, s0
 8003478:	4b82      	ldr	r3, [pc, #520]	; (8003684 <process_user_input+0x3a4>)
 800347a:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 800347e:	4b81      	ldr	r3, [pc, #516]	; (8003684 <process_user_input+0x3a4>)
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	4618      	mov	r0, r3
 8003484:	f7fd f880 	bl	8000588 <__aeabi_f2d>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4885      	ldr	r0, [pc, #532]	; (80036a4 <process_user_input+0x3c4>)
 800348e:	f007 fedd 	bl	800b24c <iprintf>
			 break;
 8003492:	e19e      	b.n	80037d2 <process_user_input+0x4f2>
		 case 't':
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3304      	adds	r3, #4
 8003498:	4618      	mov	r0, r3
 800349a:	f007 fa28 	bl	800a8ee <atoi>
 800349e:	4603      	mov	r3, r0
 80034a0:	4a7a      	ldr	r2, [pc, #488]	; (800368c <process_user_input+0x3ac>)
 80034a2:	60d3      	str	r3, [r2, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 80034a4:	4b79      	ldr	r3, [pc, #484]	; (800368c <process_user_input+0x3ac>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	4619      	mov	r1, r3
 80034aa:	487f      	ldr	r0, [pc, #508]	; (80036a8 <process_user_input+0x3c8>)
 80034ac:	f007 fece 	bl	800b24c <iprintf>
			 break;
 80034b0:	e18f      	b.n	80037d2 <process_user_input+0x4f2>
		 case 'h':
			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3304      	adds	r3, #4
 80034b6:	4618      	mov	r0, r3
 80034b8:	f007 fa16 	bl	800a8e8 <atof>
 80034bc:	ec53 2b10 	vmov	r2, r3, d0
 80034c0:	4610      	mov	r0, r2
 80034c2:	4619      	mov	r1, r3
 80034c4:	f7fd fbb0 	bl	8000c28 <__aeabi_d2f>
 80034c8:	4603      	mov	r3, r0
 80034ca:	eddf 0a78 	vldr	s1, [pc, #480]	; 80036ac <process_user_input+0x3cc>
 80034ce:	ee00 3a10 	vmov	s0, r3
 80034d2:	f00b fb84 	bl	800ebde <fminf>
 80034d6:	eef0 7a40 	vmov.f32	s15, s0
 80034da:	eddf 0a7e 	vldr	s1, [pc, #504]	; 80036d4 <process_user_input+0x3f4>
 80034de:	eeb0 0a67 	vmov.f32	s0, s15
 80034e2:	f00b fb61 	bl	800eba8 <fmaxf>
 80034e6:	eef0 7a40 	vmov.f32	s15, s0
 80034ea:	4b66      	ldr	r3, [pc, #408]	; (8003684 <process_user_input+0x3a4>)
 80034ec:	edc3 7a08 	vstr	s15, [r3, #32]
			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
 80034f0:	4b64      	ldr	r3, [pc, #400]	; (8003684 <process_user_input+0x3a4>)
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fd f847 	bl	8000588 <__aeabi_f2d>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	486c      	ldr	r0, [pc, #432]	; (80036b0 <process_user_input+0x3d0>)
 8003500:	f007 fea4 	bl	800b24c <iprintf>
			 break;
 8003504:	e165      	b.n	80037d2 <process_user_input+0x4f2>
		 case 'c':
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3304      	adds	r3, #4
 800350a:	4618      	mov	r0, r3
 800350c:	f007 f9ec 	bl	800a8e8 <atof>
 8003510:	ec53 2b10 	vmov	r2, r3, d0
 8003514:	4610      	mov	r0, r2
 8003516:	4619      	mov	r1, r3
 8003518:	f7fd fb86 	bl	8000c28 <__aeabi_d2f>
 800351c:	4603      	mov	r3, r0
 800351e:	eddf 0a65 	vldr	s1, [pc, #404]	; 80036b4 <process_user_input+0x3d4>
 8003522:	ee00 3a10 	vmov	s0, r3
 8003526:	f00b fb5a 	bl	800ebde <fminf>
 800352a:	eef0 7a40 	vmov.f32	s15, s0
 800352e:	eddf 0a69 	vldr	s1, [pc, #420]	; 80036d4 <process_user_input+0x3f4>
 8003532:	eeb0 0a67 	vmov.f32	s0, s15
 8003536:	f00b fb37 	bl	800eba8 <fmaxf>
 800353a:	eef0 7a40 	vmov.f32	s15, s0
 800353e:	4b51      	ldr	r3, [pc, #324]	; (8003684 <process_user_input+0x3a4>)
 8003540:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 8003544:	4b4f      	ldr	r3, [pc, #316]	; (8003684 <process_user_input+0x3a4>)
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	4618      	mov	r0, r3
 800354a:	f7fd f81d 	bl	8000588 <__aeabi_f2d>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4859      	ldr	r0, [pc, #356]	; (80036b8 <process_user_input+0x3d8>)
 8003554:	f007 fe7a 	bl	800b24c <iprintf>
			 break;
 8003558:	e13b      	b.n	80037d2 <process_user_input+0x4f2>
		 case 'a':
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3304      	adds	r3, #4
 800355e:	4618      	mov	r0, r3
 8003560:	f007 f9c2 	bl	800a8e8 <atof>
 8003564:	ec53 2b10 	vmov	r2, r3, d0
 8003568:	4610      	mov	r0, r2
 800356a:	4619      	mov	r1, r3
 800356c:	f7fd fb5c 	bl	8000c28 <__aeabi_d2f>
 8003570:	4603      	mov	r3, r0
 8003572:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8003576:	ee00 3a10 	vmov	s0, r3
 800357a:	f00b fb30 	bl	800ebde <fminf>
 800357e:	eef0 7a40 	vmov.f32	s15, s0
 8003582:	eddf 0a54 	vldr	s1, [pc, #336]	; 80036d4 <process_user_input+0x3f4>
 8003586:	eeb0 0a67 	vmov.f32	s0, s15
 800358a:	f00b fb0d 	bl	800eba8 <fmaxf>
 800358e:	eef0 7a40 	vmov.f32	s15, s0
 8003592:	4b3c      	ldr	r3, [pc, #240]	; (8003684 <process_user_input+0x3a4>)
 8003594:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			 printf("I_CAL set to %f\r\n", I_CAL);
 8003598:	4b3a      	ldr	r3, [pc, #232]	; (8003684 <process_user_input+0x3a4>)
 800359a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800359c:	4618      	mov	r0, r3
 800359e:	f7fc fff3 	bl	8000588 <__aeabi_f2d>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	4845      	ldr	r0, [pc, #276]	; (80036bc <process_user_input+0x3dc>)
 80035a8:	f007 fe50 	bl	800b24c <iprintf>
			 break;
 80035ac:	e111      	b.n	80037d2 <process_user_input+0x4f2>
		 case 'g':
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3304      	adds	r3, #4
 80035b2:	4618      	mov	r0, r3
 80035b4:	f007 f998 	bl	800a8e8 <atof>
 80035b8:	ec53 2b10 	vmov	r2, r3, d0
 80035bc:	4610      	mov	r0, r2
 80035be:	4619      	mov	r1, r3
 80035c0:	f7fd fb32 	bl	8000c28 <__aeabi_d2f>
 80035c4:	4603      	mov	r3, r0
 80035c6:	eddf 0a3e 	vldr	s1, [pc, #248]	; 80036c0 <process_user_input+0x3e0>
 80035ca:	ee00 3a10 	vmov	s0, r3
 80035ce:	f00b faeb 	bl	800eba8 <fmaxf>
 80035d2:	eef0 7a40 	vmov.f32	s15, s0
 80035d6:	4b2b      	ldr	r3, [pc, #172]	; (8003684 <process_user_input+0x3a4>)
 80035d8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			 printf("GR set to %f\r\n", GR);
 80035dc:	4b29      	ldr	r3, [pc, #164]	; (8003684 <process_user_input+0x3a4>)
 80035de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fc ffd1 	bl	8000588 <__aeabi_f2d>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4836      	ldr	r0, [pc, #216]	; (80036c4 <process_user_input+0x3e4>)
 80035ec:	f007 fe2e 	bl	800b24c <iprintf>
			 break;
 80035f0:	e0ef      	b.n	80037d2 <process_user_input+0x4f2>
		 case 'k':
			 KT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3304      	adds	r3, #4
 80035f6:	4618      	mov	r0, r3
 80035f8:	f007 f976 	bl	800a8e8 <atof>
 80035fc:	ec53 2b10 	vmov	r2, r3, d0
 8003600:	4610      	mov	r0, r2
 8003602:	4619      	mov	r1, r3
 8003604:	f7fd fb10 	bl	8000c28 <__aeabi_d2f>
 8003608:	4603      	mov	r3, r0
 800360a:	eddf 0a2f 	vldr	s1, [pc, #188]	; 80036c8 <process_user_input+0x3e8>
 800360e:	ee00 3a10 	vmov	s0, r3
 8003612:	f00b fac9 	bl	800eba8 <fmaxf>
 8003616:	eef0 7a40 	vmov.f32	s15, s0
 800361a:	4b1a      	ldr	r3, [pc, #104]	; (8003684 <process_user_input+0x3a4>)
 800361c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			 printf("KT set to %f\r\n", KT);
 8003620:	4b18      	ldr	r3, [pc, #96]	; (8003684 <process_user_input+0x3a4>)
 8003622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003624:	4618      	mov	r0, r3
 8003626:	f7fc ffaf 	bl	8000588 <__aeabi_f2d>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	4827      	ldr	r0, [pc, #156]	; (80036cc <process_user_input+0x3ec>)
 8003630:	f007 fe0c 	bl	800b24c <iprintf>
			 break;
 8003634:	e0cd      	b.n	80037d2 <process_user_input+0x4f2>
		 case 'x':
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3304      	adds	r3, #4
 800363a:	4618      	mov	r0, r3
 800363c:	f007 f954 	bl	800a8e8 <atof>
 8003640:	ec53 2b10 	vmov	r2, r3, d0
 8003644:	4610      	mov	r0, r2
 8003646:	4619      	mov	r1, r3
 8003648:	f7fd faee 	bl	8000c28 <__aeabi_d2f>
 800364c:	4603      	mov	r3, r0
 800364e:	eddf 0a21 	vldr	s1, [pc, #132]	; 80036d4 <process_user_input+0x3f4>
 8003652:	ee00 3a10 	vmov	s0, r3
 8003656:	f00b faa7 	bl	800eba8 <fmaxf>
 800365a:	eef0 7a40 	vmov.f32	s15, s0
 800365e:	4b09      	ldr	r3, [pc, #36]	; (8003684 <process_user_input+0x3a4>)
 8003660:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 8003664:	4b07      	ldr	r3, [pc, #28]	; (8003684 <process_user_input+0x3a4>)
 8003666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003668:	4618      	mov	r0, r3
 800366a:	f7fc ff8d 	bl	8000588 <__aeabi_f2d>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4817      	ldr	r0, [pc, #92]	; (80036d0 <process_user_input+0x3f0>)
 8003674:	f007 fdea 	bl	800b24c <iprintf>
			 break;
 8003678:	e0ab      	b.n	80037d2 <process_user_input+0x4f2>
 800367a:	bf00      	nop
 800367c:	44fa0000 	.word	0x44fa0000
 8003680:	42c80000 	.word	0x42c80000
 8003684:	2000033c 	.word	0x2000033c
 8003688:	08010690 	.word	0x08010690
 800368c:	2000043c 	.word	0x2000043c
 8003690:	080106a4 	.word	0x080106a4
 8003694:	080106b8 	.word	0x080106b8
 8003698:	42700000 	.word	0x42700000
 800369c:	080106d0 	.word	0x080106d0
 80036a0:	42040000 	.word	0x42040000
 80036a4:	080106e4 	.word	0x080106e4
 80036a8:	080106fc 	.word	0x080106fc
 80036ac:	43160000 	.word	0x43160000
 80036b0:	08010714 	.word	0x08010714
 80036b4:	42200000 	.word	0x42200000
 80036b8:	0801072c 	.word	0x0801072c
 80036bc:	08010744 	.word	0x08010744
 80036c0:	3a83126f 	.word	0x3a83126f
 80036c4:	08010758 	.word	0x08010758
 80036c8:	38d1b717 	.word	0x38d1b717
 80036cc:	08010768 	.word	0x08010768
 80036d0:	08010778 	.word	0x08010778
 80036d4:	00000000 	.word	0x00000000
		 case 'd':
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3304      	adds	r3, #4
 80036dc:	4618      	mov	r0, r3
 80036de:	f007 f903 	bl	800a8e8 <atof>
 80036e2:	ec53 2b10 	vmov	r2, r3, d0
 80036e6:	4610      	mov	r0, r2
 80036e8:	4619      	mov	r1, r3
 80036ea:	f7fd fa9d 	bl	8000c28 <__aeabi_d2f>
 80036ee:	4603      	mov	r3, r0
 80036f0:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 80036d4 <process_user_input+0x3f4>
 80036f4:	ee00 3a10 	vmov	s0, r3
 80036f8:	f00b fa56 	bl	800eba8 <fmaxf>
 80036fc:	eef0 7a40 	vmov.f32	s15, s0
 8003700:	4b4b      	ldr	r3, [pc, #300]	; (8003830 <process_user_input+0x550>)
 8003702:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 8003706:	4b4a      	ldr	r3, [pc, #296]	; (8003830 <process_user_input+0x550>)
 8003708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800370a:	4618      	mov	r0, r3
 800370c:	f7fc ff3c 	bl	8000588 <__aeabi_f2d>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4847      	ldr	r0, [pc, #284]	; (8003834 <process_user_input+0x554>)
 8003716:	f007 fd99 	bl	800b24c <iprintf>
			 break;
 800371a:	e05a      	b.n	80037d2 <process_user_input+0x4f2>
		 case 'p':
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3304      	adds	r3, #4
 8003720:	4618      	mov	r0, r3
 8003722:	f007 f8e1 	bl	800a8e8 <atof>
 8003726:	ec53 2b10 	vmov	r2, r3, d0
 800372a:	4610      	mov	r0, r2
 800372c:	4619      	mov	r1, r3
 800372e:	f7fd fa7b 	bl	8000c28 <__aeabi_d2f>
 8003732:	4603      	mov	r3, r0
 8003734:	eddf 0a40 	vldr	s1, [pc, #256]	; 8003838 <process_user_input+0x558>
 8003738:	ee00 3a10 	vmov	s0, r3
 800373c:	f00b fa34 	bl	800eba8 <fmaxf>
 8003740:	eef0 7a40 	vmov.f32	s15, s0
 8003744:	4b3a      	ldr	r3, [pc, #232]	; (8003830 <process_user_input+0x550>)
 8003746:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			 P_MIN = -P_MAX;
 800374a:	4b39      	ldr	r3, [pc, #228]	; (8003830 <process_user_input+0x550>)
 800374c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003750:	eef1 7a67 	vneg.f32	s15, s15
 8003754:	4b36      	ldr	r3, [pc, #216]	; (8003830 <process_user_input+0x550>)
 8003756:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			 printf("P_MAX set to %f\r\n", P_MAX);
 800375a:	4b35      	ldr	r3, [pc, #212]	; (8003830 <process_user_input+0x550>)
 800375c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800375e:	4618      	mov	r0, r3
 8003760:	f7fc ff12 	bl	8000588 <__aeabi_f2d>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	4834      	ldr	r0, [pc, #208]	; (800383c <process_user_input+0x55c>)
 800376a:	f007 fd6f 	bl	800b24c <iprintf>
			 break;
 800376e:	e030      	b.n	80037d2 <process_user_input+0x4f2>
		 case 'v':
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3304      	adds	r3, #4
 8003774:	4618      	mov	r0, r3
 8003776:	f007 f8b7 	bl	800a8e8 <atof>
 800377a:	ec53 2b10 	vmov	r2, r3, d0
 800377e:	4610      	mov	r0, r2
 8003780:	4619      	mov	r1, r3
 8003782:	f7fd fa51 	bl	8000c28 <__aeabi_d2f>
 8003786:	4603      	mov	r3, r0
 8003788:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8003838 <process_user_input+0x558>
 800378c:	ee00 3a10 	vmov	s0, r3
 8003790:	f00b fa0a 	bl	800eba8 <fmaxf>
 8003794:	eef0 7a40 	vmov.f32	s15, s0
 8003798:	4b25      	ldr	r3, [pc, #148]	; (8003830 <process_user_input+0x550>)
 800379a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			 V_MIN = -V_MAX;
 800379e:	4b24      	ldr	r3, [pc, #144]	; (8003830 <process_user_input+0x550>)
 80037a0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80037a4:	eef1 7a67 	vneg.f32	s15, s15
 80037a8:	4b21      	ldr	r3, [pc, #132]	; (8003830 <process_user_input+0x550>)
 80037aa:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			 printf("V_MAX set to %f\r\n", V_MAX);
 80037ae:	4b20      	ldr	r3, [pc, #128]	; (8003830 <process_user_input+0x550>)
 80037b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fc fee8 	bl	8000588 <__aeabi_f2d>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4820      	ldr	r0, [pc, #128]	; (8003840 <process_user_input+0x560>)
 80037be:	f007 fd45 	bl	800b24c <iprintf>
			 break;
 80037c2:	e006      	b.n	80037d2 <process_user_input+0x4f2>
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", fsmstate->cmd_buff);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3304      	adds	r3, #4
 80037c8:	4619      	mov	r1, r3
 80037ca:	481e      	ldr	r0, [pc, #120]	; (8003844 <process_user_input+0x564>)
 80037cc:	f007 fd3e 	bl	800b24c <iprintf>
			 break;
 80037d0:	bf00      	nop

		 }

	 /* Write new settings to flash */

	 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 80037d2:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <process_user_input+0x568>)
 80037d4:	691a      	ldr	r2, [r3, #16]
 80037d6:	9200      	str	r2, [sp, #0]
 80037d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037da:	f001 f84f 	bl	800487c <preference_writer_ready>
 80037de:	4603      	mov	r3, r0
 80037e0:	f083 0301 	eor.w	r3, r3, #1
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <process_user_input+0x510>
 80037ea:	4817      	ldr	r0, [pc, #92]	; (8003848 <process_user_input+0x568>)
 80037ec:	f001 f837 	bl	800485e <preference_writer_open>
	 preference_writer_flush(&prefs);
 80037f0:	4815      	ldr	r0, [pc, #84]	; (8003848 <process_user_input+0x568>)
 80037f2:	f001 f851 	bl	8004898 <preference_writer_flush>
	 preference_writer_close(&prefs);
 80037f6:	4814      	ldr	r0, [pc, #80]	; (8003848 <process_user_input+0x568>)
 80037f8:	f001 f8cc 	bl	8004994 <preference_writer_close>
	 preference_writer_load(prefs);
 80037fc:	4b12      	ldr	r3, [pc, #72]	; (8003848 <process_user_input+0x568>)
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	9200      	str	r2, [sp, #0]
 8003802:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003804:	f001 f884 	bl	8004910 <preference_writer_load>

	 enter_setup_state();
 8003808:	f7ff fbf4 	bl	8002ff4 <enter_setup_state>

	 fsmstate->bytecount = 0;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	731a      	strb	r2, [r3, #12]
	 fsmstate->cmd_id = 0;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	735a      	strb	r2, [r3, #13]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3304      	adds	r3, #4
 800381c:	2208      	movs	r2, #8
 800381e:	2100      	movs	r1, #0
 8003820:	4618      	mov	r0, r3
 8003822:	f007 f8a1 	bl	800a968 <memset>
 }
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	2000033c 	.word	0x2000033c
 8003834:	0801078c 	.word	0x0801078c
 8003838:	00000000 	.word	0x00000000
 800383c:	080107a0 	.word	0x080107a0
 8003840:	080107b4 	.word	0x080107b4
 8003844:	080107c8 	.word	0x080107c8
 8003848:	2000083c 	.word	0x2000083c

0800384c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08a      	sub	sp, #40	; 0x28
 8003850:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003852:	f107 0314 	add.w	r3, r7, #20
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	605a      	str	r2, [r3, #4]
 800385c:	609a      	str	r2, [r3, #8]
 800385e:	60da      	str	r2, [r3, #12]
 8003860:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	4b38      	ldr	r3, [pc, #224]	; (8003948 <MX_GPIO_Init+0xfc>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	4a37      	ldr	r2, [pc, #220]	; (8003948 <MX_GPIO_Init+0xfc>)
 800386c:	f043 0304 	orr.w	r3, r3, #4
 8003870:	6313      	str	r3, [r2, #48]	; 0x30
 8003872:	4b35      	ldr	r3, [pc, #212]	; (8003948 <MX_GPIO_Init+0xfc>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	f003 0304 	and.w	r3, r3, #4
 800387a:	613b      	str	r3, [r7, #16]
 800387c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	4b31      	ldr	r3, [pc, #196]	; (8003948 <MX_GPIO_Init+0xfc>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	4a30      	ldr	r2, [pc, #192]	; (8003948 <MX_GPIO_Init+0xfc>)
 8003888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800388c:	6313      	str	r3, [r2, #48]	; 0x30
 800388e:	4b2e      	ldr	r3, [pc, #184]	; (8003948 <MX_GPIO_Init+0xfc>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	60bb      	str	r3, [r7, #8]
 800389e:	4b2a      	ldr	r3, [pc, #168]	; (8003948 <MX_GPIO_Init+0xfc>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	4a29      	ldr	r2, [pc, #164]	; (8003948 <MX_GPIO_Init+0xfc>)
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	6313      	str	r3, [r2, #48]	; 0x30
 80038aa:	4b27      	ldr	r3, [pc, #156]	; (8003948 <MX_GPIO_Init+0xfc>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	60bb      	str	r3, [r7, #8]
 80038b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	607b      	str	r3, [r7, #4]
 80038ba:	4b23      	ldr	r3, [pc, #140]	; (8003948 <MX_GPIO_Init+0xfc>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	4a22      	ldr	r2, [pc, #136]	; (8003948 <MX_GPIO_Init+0xfc>)
 80038c0:	f043 0302 	orr.w	r3, r3, #2
 80038c4:	6313      	str	r3, [r2, #48]	; 0x30
 80038c6:	4b20      	ldr	r3, [pc, #128]	; (8003948 <MX_GPIO_Init+0xfc>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	607b      	str	r3, [r7, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 80038d2:	2200      	movs	r2, #0
 80038d4:	f648 0110 	movw	r1, #34832	; 0x8810
 80038d8:	481c      	ldr	r0, [pc, #112]	; (800394c <MX_GPIO_Init+0x100>)
 80038da:	f003 fdad 	bl	8007438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80038de:	2200      	movs	r2, #0
 80038e0:	2120      	movs	r1, #32
 80038e2:	481b      	ldr	r0, [pc, #108]	; (8003950 <MX_GPIO_Init+0x104>)
 80038e4:	f003 fda8 	bl	8007438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80038e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80038ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80038f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f4:	2300      	movs	r3, #0
 80038f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80038f8:	f107 0314 	add.w	r3, r7, #20
 80038fc:	4619      	mov	r1, r3
 80038fe:	4814      	ldr	r0, [pc, #80]	; (8003950 <MX_GPIO_Init+0x104>)
 8003900:	f003 fc06 	bl	8007110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15;
 8003904:	f648 0310 	movw	r3, #34832	; 0x8810
 8003908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800390a:	2301      	movs	r3, #1
 800390c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390e:	2300      	movs	r3, #0
 8003910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003912:	2303      	movs	r3, #3
 8003914:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003916:	f107 0314 	add.w	r3, r7, #20
 800391a:	4619      	mov	r1, r3
 800391c:	480b      	ldr	r0, [pc, #44]	; (800394c <MX_GPIO_Init+0x100>)
 800391e:	f003 fbf7 	bl	8007110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003922:	2320      	movs	r3, #32
 8003924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003926:	2301      	movs	r3, #1
 8003928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392a:	2300      	movs	r3, #0
 800392c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800392e:	2303      	movs	r3, #3
 8003930:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003932:	f107 0314 	add.w	r3, r7, #20
 8003936:	4619      	mov	r1, r3
 8003938:	4805      	ldr	r0, [pc, #20]	; (8003950 <MX_GPIO_Init+0x104>)
 800393a:	f003 fbe9 	bl	8007110 <HAL_GPIO_Init>

}
 800393e:	bf00      	nop
 8003940:	3728      	adds	r7, #40	; 0x28
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40023800 	.word	0x40023800
 800394c:	40020000 	.word	0x40020000
 8003950:	40020800 	.word	0x40020800

08003954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08a      	sub	sp, #40	; 0x28
 8003958:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800395a:	f001 ffcf 	bl	80058fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800395e:	f000 fad5 	bl	8003f0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003962:	f7ff ff73 	bl	800384c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003966:	f001 ff01 	bl	800576c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800396a:	f001 fde5 	bl	8005538 <MX_TIM1_Init>
  MX_CAN1_Init();
 800396e:	f7fd ff4f 	bl	8001810 <MX_CAN1_Init>
  MX_SPI1_Init();
 8003972:	f001 f81f 	bl	80049b4 <MX_SPI1_Init>
  MX_SPI3_Init();
 8003976:	f001 f855 	bl	8004a24 <MX_SPI3_Init>
  MX_ADC1_Init();
 800397a:	f7fd fb5d 	bl	8001038 <MX_ADC1_Init>
  MX_ADC2_Init();
 800397e:	f7fd fbc5 	bl	800110c <MX_ADC2_Init>
  MX_ADC3_Init();
 8003982:	f7fd fc0d 	bl	80011a0 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  /* Load settings from flash */
  preference_writer_init(&prefs, 6);
 8003986:	2106      	movs	r1, #6
 8003988:	48af      	ldr	r0, [pc, #700]	; (8003c48 <main+0x2f4>)
 800398a:	f000 ff57 	bl	800483c <preference_writer_init>
  preference_writer_load(prefs);
 800398e:	4bae      	ldr	r3, [pc, #696]	; (8003c48 <main+0x2f4>)
 8003990:	691a      	ldr	r2, [r3, #16]
 8003992:	9200      	str	r2, [sp, #0]
 8003994:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003996:	f000 ffbb 	bl	8004910 <preference_writer_load>

  /* Sanitize configs in case flash is empty*/
  if(E_ZERO==-1){E_ZERO = 0;}
 800399a:	4bac      	ldr	r3, [pc, #688]	; (8003c4c <main+0x2f8>)
 800399c:	edd3 7a00 	vldr	s15, [r3]
 80039a0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80039a4:	eef4 7a47 	vcmp.f32	s15, s14
 80039a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ac:	d103      	bne.n	80039b6 <main+0x62>
 80039ae:	4ba7      	ldr	r3, [pc, #668]	; (8003c4c <main+0x2f8>)
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
  if(M_ZERO==-1){M_ZERO = 0;}
 80039b6:	4ba5      	ldr	r3, [pc, #660]	; (8003c4c <main+0x2f8>)
 80039b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80039bc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80039c0:	eef4 7a47 	vcmp.f32	s15, s14
 80039c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c8:	d103      	bne.n	80039d2 <main+0x7e>
 80039ca:	4ba0      	ldr	r3, [pc, #640]	; (8003c4c <main+0x2f8>)
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	605a      	str	r2, [r3, #4]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 80039d2:	4b9e      	ldr	r3, [pc, #632]	; (8003c4c <main+0x2f8>)
 80039d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80039d8:	eef4 7a67 	vcmp.f32	s15, s15
 80039dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e0:	d609      	bvs.n	80039f6 <main+0xa2>
 80039e2:	4b9a      	ldr	r3, [pc, #616]	; (8003c4c <main+0x2f8>)
 80039e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80039e8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80039ec:	eef4 7a47 	vcmp.f32	s15, s14
 80039f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f4:	d102      	bne.n	80039fc <main+0xa8>
 80039f6:	4b95      	ldr	r3, [pc, #596]	; (8003c4c <main+0x2f8>)
 80039f8:	4a95      	ldr	r2, [pc, #596]	; (8003c50 <main+0x2fc>)
 80039fa:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 80039fc:	4b93      	ldr	r3, [pc, #588]	; (8003c4c <main+0x2f8>)
 80039fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a02:	eef4 7a67 	vcmp.f32	s15, s15
 8003a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a0a:	d609      	bvs.n	8003a20 <main+0xcc>
 8003a0c:	4b8f      	ldr	r3, [pc, #572]	; (8003c4c <main+0x2f8>)
 8003a0e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a12:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003a16:	eef4 7a47 	vcmp.f32	s15, s14
 8003a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a1e:	d102      	bne.n	8003a26 <main+0xd2>
 8003a20:	4b8a      	ldr	r3, [pc, #552]	; (8003c4c <main+0x2f8>)
 8003a22:	4a8c      	ldr	r2, [pc, #560]	; (8003c54 <main+0x300>)
 8003a24:	60da      	str	r2, [r3, #12]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 8003a26:	4b89      	ldr	r3, [pc, #548]	; (8003c4c <main+0x2f8>)
 8003a28:	edd3 7a06 	vldr	s15, [r3, #24]
 8003a2c:	eef4 7a67 	vcmp.f32	s15, s15
 8003a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a34:	d609      	bvs.n	8003a4a <main+0xf6>
 8003a36:	4b85      	ldr	r3, [pc, #532]	; (8003c4c <main+0x2f8>)
 8003a38:	edd3 7a06 	vldr	s15, [r3, #24]
 8003a3c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003a40:	eef4 7a47 	vcmp.f32	s15, s14
 8003a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a48:	d103      	bne.n	8003a52 <main+0xfe>
 8003a4a:	4b80      	ldr	r3, [pc, #512]	; (8003c4c <main+0x2f8>)
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	619a      	str	r2, [r3, #24]
  if(CAN_ID==-1){CAN_ID = 1;}
 8003a52:	4b81      	ldr	r3, [pc, #516]	; (8003c58 <main+0x304>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a5a:	d102      	bne.n	8003a62 <main+0x10e>
 8003a5c:	4b7e      	ldr	r3, [pc, #504]	; (8003c58 <main+0x304>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	605a      	str	r2, [r3, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 8003a62:	4b7d      	ldr	r3, [pc, #500]	; (8003c58 <main+0x304>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a6a:	d102      	bne.n	8003a72 <main+0x11e>
 8003a6c:	4b7a      	ldr	r3, [pc, #488]	; (8003c58 <main+0x304>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	609a      	str	r2, [r3, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 8003a72:	4b79      	ldr	r3, [pc, #484]	; (8003c58 <main+0x304>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a7a:	d103      	bne.n	8003a84 <main+0x130>
 8003a7c:	4b76      	ldr	r3, [pc, #472]	; (8003c58 <main+0x304>)
 8003a7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a82:	60da      	str	r2, [r3, #12]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 8003a84:	4b71      	ldr	r3, [pc, #452]	; (8003c4c <main+0x2f8>)
 8003a86:	edd3 7a07 	vldr	s15, [r3, #28]
 8003a8a:	eef4 7a67 	vcmp.f32	s15, s15
 8003a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a92:	d609      	bvs.n	8003aa8 <main+0x154>
 8003a94:	4b6d      	ldr	r3, [pc, #436]	; (8003c4c <main+0x2f8>)
 8003a96:	edd3 7a07 	vldr	s15, [r3, #28]
 8003a9a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003a9e:	eef4 7a47 	vcmp.f32	s15, s14
 8003aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa6:	d103      	bne.n	8003ab0 <main+0x15c>
 8003aa8:	4b68      	ldr	r3, [pc, #416]	; (8003c4c <main+0x2f8>)
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	61da      	str	r2, [r3, #28]
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 8003ab0:	4b66      	ldr	r3, [pc, #408]	; (8003c4c <main+0x2f8>)
 8003ab2:	edd3 7a08 	vldr	s15, [r3, #32]
 8003ab6:	eef4 7a67 	vcmp.f32	s15, s15
 8003aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003abe:	d609      	bvs.n	8003ad4 <main+0x180>
 8003ac0:	4b62      	ldr	r3, [pc, #392]	; (8003c4c <main+0x2f8>)
 8003ac2:	edd3 7a08 	vldr	s15, [r3, #32]
 8003ac6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003aca:	eef4 7a47 	vcmp.f32	s15, s14
 8003ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad2:	d102      	bne.n	8003ada <main+0x186>
 8003ad4:	4b5d      	ldr	r3, [pc, #372]	; (8003c4c <main+0x2f8>)
 8003ad6:	4a61      	ldr	r2, [pc, #388]	; (8003c5c <main+0x308>)
 8003ad8:	621a      	str	r2, [r3, #32]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8003ada:	4b5c      	ldr	r3, [pc, #368]	; (8003c4c <main+0x2f8>)
 8003adc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003ae0:	eef4 7a67 	vcmp.f32	s15, s15
 8003ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae8:	d609      	bvs.n	8003afe <main+0x1aa>
 8003aea:	4b58      	ldr	r3, [pc, #352]	; (8003c4c <main+0x2f8>)
 8003aec:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003af0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003af4:	eef4 7a47 	vcmp.f32	s15, s14
 8003af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003afc:	d102      	bne.n	8003b04 <main+0x1b0>
 8003afe:	4b53      	ldr	r3, [pc, #332]	; (8003c4c <main+0x2f8>)
 8003b00:	4a57      	ldr	r2, [pc, #348]	; (8003c60 <main+0x30c>)
 8003b02:	625a      	str	r2, [r3, #36]	; 0x24
//  if(isnan(K_SCALE) || K_SCALE==-1){K_SCALE = 0.00013310f;}                                                                                           //CURRENT CONTROLLER K_SCALE
//  if(isnan(KI_D) || KI_D==-1){KI_D = 0.0373f;}                                                                                                        //CURRENT CONTROLLER KI_D
//  if(isnan(KI_Q) || KI_Q==-1){KI_Q = 0.0373f;}
  //DEFAULT MOTOR PARAMS ARE FOR THE U12 MODULE BELOW
  //MOTOR PARAMS
  if(isnan(R_PHASE) || R_PHASE==-1){R_PHASE = 0.158f;}
 8003b04:	4b51      	ldr	r3, [pc, #324]	; (8003c4c <main+0x2f8>)
 8003b06:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003b0a:	eef4 7a67 	vcmp.f32	s15, s15
 8003b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b12:	d609      	bvs.n	8003b28 <main+0x1d4>
 8003b14:	4b4d      	ldr	r3, [pc, #308]	; (8003c4c <main+0x2f8>)
 8003b16:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003b1a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003b1e:	eef4 7a47 	vcmp.f32	s15, s14
 8003b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b26:	d102      	bne.n	8003b2e <main+0x1da>
 8003b28:	4b48      	ldr	r3, [pc, #288]	; (8003c4c <main+0x2f8>)
 8003b2a:	4a4e      	ldr	r2, [pc, #312]	; (8003c64 <main+0x310>)
 8003b2c:	635a      	str	r2, [r3, #52]	; 0x34
//  if(isnan(L_D) || L_D==-1){L_D = 0.000084f;}
//  if(isnan(L_Q) || L_Q==-1){L_Q = 0.000084f;}


  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;} // not in mbed version
 8003b2e:	4b47      	ldr	r3, [pc, #284]	; (8003c4c <main+0x2f8>)
 8003b30:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003b34:	eef4 7a67 	vcmp.f32	s15, s15
 8003b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b3c:	d609      	bvs.n	8003b52 <main+0x1fe>
 8003b3e:	4b43      	ldr	r3, [pc, #268]	; (8003c4c <main+0x2f8>)
 8003b40:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003b44:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003b48:	eef4 7a47 	vcmp.f32	s15, s14
 8003b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b50:	d102      	bne.n	8003b58 <main+0x204>
 8003b52:	4b3e      	ldr	r3, [pc, #248]	; (8003c4c <main+0x2f8>)
 8003b54:	4a44      	ldr	r2, [pc, #272]	; (8003c68 <main+0x314>)
 8003b56:	649a      	str	r2, [r3, #72]	; 0x48
//  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;} // is hardcoded in mbed ver
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 8003b58:	4b3c      	ldr	r3, [pc, #240]	; (8003c4c <main+0x2f8>)
 8003b5a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003b5e:	eef4 7a67 	vcmp.f32	s15, s15
 8003b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b66:	d609      	bvs.n	8003b7c <main+0x228>
 8003b68:	4b38      	ldr	r3, [pc, #224]	; (8003c4c <main+0x2f8>)
 8003b6a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003b6e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003b72:	eef4 7a47 	vcmp.f32	s15, s14
 8003b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b7a:	d103      	bne.n	8003b84 <main+0x230>
 8003b7c:	4b33      	ldr	r3, [pc, #204]	; (8003c4c <main+0x2f8>)
 8003b7e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003b82:	645a      	str	r2, [r3, #68]	; 0x44
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 8003b84:	4b31      	ldr	r3, [pc, #196]	; (8003c4c <main+0x2f8>)
 8003b86:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003b8a:	eef4 7a67 	vcmp.f32	s15, s15
 8003b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b92:	d609      	bvs.n	8003ba8 <main+0x254>
 8003b94:	4b2d      	ldr	r3, [pc, #180]	; (8003c4c <main+0x2f8>)
 8003b96:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003b9a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003b9e:	eef4 7a47 	vcmp.f32	s15, s14
 8003ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ba6:	d103      	bne.n	8003bb0 <main+0x25c>
 8003ba8:	4b28      	ldr	r3, [pc, #160]	; (8003c4c <main+0x2f8>)
 8003baa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003bae:	639a      	str	r2, [r3, #56]	; 0x38
//  if(isnan(R_TH) || R_TH==-1){R_TH = 1.25f;}
//  if(isnan(INV_M_TH) || INV_M_TH==-1){INV_M_TH = 0.02825f;}
//  if(isnan(T_AMBIENT) || T_AMBIENT==-1){T_AMBIENT = 25.0f;}

  // all below ones not in mbed version
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 8003bb0:	4b26      	ldr	r3, [pc, #152]	; (8003c4c <main+0x2f8>)
 8003bb2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003bb6:	eef4 7a67 	vcmp.f32	s15, s15
 8003bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bbe:	d609      	bvs.n	8003bd4 <main+0x280>
 8003bc0:	4b22      	ldr	r3, [pc, #136]	; (8003c4c <main+0x2f8>)
 8003bc2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003bc6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003bca:	eef4 7a47 	vcmp.f32	s15, s14
 8003bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd2:	d102      	bne.n	8003bda <main+0x286>
 8003bd4:	4b1d      	ldr	r3, [pc, #116]	; (8003c4c <main+0x2f8>)
 8003bd6:	4a25      	ldr	r2, [pc, #148]	; (8003c6c <main+0x318>)
 8003bd8:	65da      	str	r2, [r3, #92]	; 0x5c
  if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 5.0f;}
 8003bda:	4b1c      	ldr	r3, [pc, #112]	; (8003c4c <main+0x2f8>)
 8003bdc:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003be0:	eef4 7a67 	vcmp.f32	s15, s15
 8003be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be8:	d609      	bvs.n	8003bfe <main+0x2aa>
 8003bea:	4b18      	ldr	r3, [pc, #96]	; (8003c4c <main+0x2f8>)
 8003bec:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003bf0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003bf4:	eef4 7a47 	vcmp.f32	s15, s14
 8003bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bfc:	d102      	bne.n	8003c04 <main+0x2b0>
 8003bfe:	4b13      	ldr	r3, [pc, #76]	; (8003c4c <main+0x2f8>)
 8003c00:	4a19      	ldr	r2, [pc, #100]	; (8003c68 <main+0x314>)
 8003c02:	661a      	str	r2, [r3, #96]	; 0x60
  if(isnan(P_MAX)){P_MAX = 12.5f;}
 8003c04:	4b11      	ldr	r3, [pc, #68]	; (8003c4c <main+0x2f8>)
 8003c06:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003c0a:	eef4 7a67 	vcmp.f32	s15, s15
 8003c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c12:	d702      	bvc.n	8003c1a <main+0x2c6>
 8003c14:	4b0d      	ldr	r3, [pc, #52]	; (8003c4c <main+0x2f8>)
 8003c16:	4a16      	ldr	r2, [pc, #88]	; (8003c70 <main+0x31c>)
 8003c18:	651a      	str	r2, [r3, #80]	; 0x50
  if(isnan(P_MIN)){P_MIN = -12.5f;}
 8003c1a:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <main+0x2f8>)
 8003c1c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003c20:	eef4 7a67 	vcmp.f32	s15, s15
 8003c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c28:	d702      	bvc.n	8003c30 <main+0x2dc>
 8003c2a:	4b08      	ldr	r3, [pc, #32]	; (8003c4c <main+0x2f8>)
 8003c2c:	4a11      	ldr	r2, [pc, #68]	; (8003c74 <main+0x320>)
 8003c2e:	64da      	str	r2, [r3, #76]	; 0x4c
  if(isnan(V_MAX)){V_MAX = 65.0f;}
 8003c30:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <main+0x2f8>)
 8003c32:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003c36:	eef4 7a67 	vcmp.f32	s15, s15
 8003c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c3e:	d71d      	bvc.n	8003c7c <main+0x328>
 8003c40:	4b02      	ldr	r3, [pc, #8]	; (8003c4c <main+0x2f8>)
 8003c42:	4a0d      	ldr	r2, [pc, #52]	; (8003c78 <main+0x324>)
 8003c44:	659a      	str	r2, [r3, #88]	; 0x58
 8003c46:	e019      	b.n	8003c7c <main+0x328>
 8003c48:	2000083c 	.word	0x2000083c
 8003c4c:	2000033c 	.word	0x2000033c
 8003c50:	447a0000 	.word	0x447a0000
 8003c54:	42200000 	.word	0x42200000
 8003c58:	2000043c 	.word	0x2000043c
 8003c5c:	42fa0000 	.word	0x42fa0000
 8003c60:	41600000 	.word	0x41600000
 8003c64:	3e21cac1 	.word	0x3e21cac1
 8003c68:	40a00000 	.word	0x40a00000
 8003c6c:	43fa0000 	.word	0x43fa0000
 8003c70:	41480000 	.word	0x41480000
 8003c74:	c1480000 	.word	0xc1480000
 8003c78:	42820000 	.word	0x42820000
  if(isnan(V_MIN)){V_MIN = -65.0f;}
 8003c7c:	4b88      	ldr	r3, [pc, #544]	; (8003ea0 <main+0x54c>)
 8003c7e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003c82:	eef4 7a67 	vcmp.f32	s15, s15
 8003c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c8a:	d702      	bvc.n	8003c92 <main+0x33e>
 8003c8c:	4b84      	ldr	r3, [pc, #528]	; (8003ea0 <main+0x54c>)
 8003c8e:	4a85      	ldr	r2, [pc, #532]	; (8003ea4 <main+0x550>)
 8003c90:	655a      	str	r2, [r3, #84]	; 0x54

  printf("\n\r\n\r MIT Biomimetics Motor Driver \n\r\n\r");
 8003c92:	4885      	ldr	r0, [pc, #532]	; (8003ea8 <main+0x554>)
 8003c94:	f007 fada 	bl	800b24c <iprintf>
  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ca0:	4882      	ldr	r0, [pc, #520]	; (8003eac <main+0x558>)
 8003ca2:	f007 fad3 	bl	800b24c <iprintf>
  printf(" Position Sensor Electrical Offset:   %.4f\n\r", E_ZERO);
 8003ca6:	4b7e      	ldr	r3, [pc, #504]	; (8003ea0 <main+0x54c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fc fc6c 	bl	8000588 <__aeabi_f2d>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	487e      	ldr	r0, [pc, #504]	; (8003eb0 <main+0x55c>)
 8003cb6:	f007 fac9 	bl	800b24c <iprintf>
  printf(" Output Zero Position:  %.4f\n\r", M_ZERO);
 8003cba:	4b79      	ldr	r3, [pc, #484]	; (8003ea0 <main+0x54c>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fc fc62 	bl	8000588 <__aeabi_f2d>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	487a      	ldr	r0, [pc, #488]	; (8003eb4 <main+0x560>)
 8003cca:	f007 fabf 	bl	800b24c <iprintf>
  printf(" CAN ID:  %d\n\r", CAN_ID);
 8003cce:	4b7a      	ldr	r3, [pc, #488]	; (8003eb8 <main+0x564>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4879      	ldr	r0, [pc, #484]	; (8003ebc <main+0x568>)
 8003cd6:	f007 fab9 	bl	800b24c <iprintf>
  printf(" POLE PAIRS:  %d\n\r", PPAIRS);
 8003cda:	2115      	movs	r1, #21
 8003cdc:	4878      	ldr	r0, [pc, #480]	; (8003ec0 <main+0x56c>)
 8003cde:	f007 fab5 	bl	800b24c <iprintf>
  }
  else{

  }

  init_controller_params(&controller);
 8003ce2:	4878      	ldr	r0, [pc, #480]	; (8003ec4 <main+0x570>)
 8003ce4:	f7fe fda2 	bl	800282c <init_controller_params>

  /* calibration "encoder" zeroing */
//  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderCMUStruct));
 8003ce8:	f44f 7244 	mov.w	r2, #784	; 0x310
 8003cec:	2100      	movs	r1, #0
 8003cee:	4876      	ldr	r0, [pc, #472]	; (8003ec8 <main+0x574>)
 8003cf0:	f006 fe3a 	bl	800a968 <memset>


  /* NEW ENCODER SET UP */
  Init(&new_encoder, 524288, 0.0, 21);
 8003cf4:	2215      	movs	r2, #21
 8003cf6:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8003ecc <main+0x578>
 8003cfa:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003cfe:	4874      	ldr	r0, [pc, #464]	; (8003ed0 <main+0x57c>)
 8003d00:	f000 faa8 	bl	8004254 <Init>
//  if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
//  else{memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));}
  //for(int i = 0; i<128; i++){printf("%d\r\n", comm_encoder.offset_lut[i]);}

  /* Turn on ADCs */
  HAL_ADC_Start(&hadc1);
 8003d04:	4873      	ldr	r0, [pc, #460]	; (8003ed4 <main+0x580>)
 8003d06:	f001 fed3 	bl	8005ab0 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8003d0a:	4873      	ldr	r0, [pc, #460]	; (8003ed8 <main+0x584>)
 8003d0c:	f001 fed0 	bl	8005ab0 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 8003d10:	4872      	ldr	r0, [pc, #456]	; (8003edc <main+0x588>)
 8003d12:	f001 fecd 	bl	8005ab0 <HAL_ADC_Start>

  /* DRV8323 setup */
  HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8003d16:	2201      	movs	r2, #1
 8003d18:	2110      	movs	r1, #16
 8003d1a:	4871      	ldr	r0, [pc, #452]	; (8003ee0 <main+0x58c>)
 8003d1c:	f003 fb8c 	bl	8007438 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_PIN, GPIO_PIN_SET );
 8003d20:	2201      	movs	r2, #1
 8003d22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d26:	486e      	ldr	r0, [pc, #440]	; (8003ee0 <main+0x58c>)
 8003d28:	f003 fb86 	bl	8007438 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8003d2c:	2001      	movs	r0, #1
 8003d2e:	f001 fe57 	bl	80059e0 <HAL_Delay>
  //drv_calibrate(drv);
  HAL_Delay(1);
 8003d32:	2001      	movs	r0, #1
 8003d34:	f001 fe54 	bl	80059e0 <HAL_Delay>
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 8003d38:	496a      	ldr	r1, [pc, #424]	; (8003ee4 <main+0x590>)
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	9306      	str	r3, [sp, #24]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	9305      	str	r3, [sp, #20]
 8003d42:	2300      	movs	r3, #0
 8003d44:	9304      	str	r3, [sp, #16]
 8003d46:	2300      	movs	r3, #0
 8003d48:	9303      	str	r3, [sp, #12]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	9302      	str	r3, [sp, #8]
 8003d4e:	2301      	movs	r3, #1
 8003d50:	9301      	str	r3, [sp, #4]
 8003d52:	2300      	movs	r3, #0
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	2300      	movs	r3, #0
 8003d58:	2200      	movs	r2, #0
 8003d5a:	c903      	ldmia	r1, {r0, r1}
 8003d5c:	f7fd ffd9 	bl	8001d12 <drv_write_DCR>
  HAL_Delay(1);
 8003d60:	2001      	movs	r0, #1
 8003d62:	f001 fe3d 	bl	80059e0 <HAL_Delay>
  int CSA_GAIN;
  if(I_MAX <= 40.0f){CSA_GAIN = CSA_GAIN_40;}	// Up to 40A use 40X amplifier gain
 8003d66:	4b4e      	ldr	r3, [pc, #312]	; (8003ea0 <main+0x54c>)
 8003d68:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d6c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003ee8 <main+0x594>
 8003d70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d78:	d802      	bhi.n	8003d80 <main+0x42c>
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	607b      	str	r3, [r7, #4]
 8003d7e:	e001      	b.n	8003d84 <main+0x430>
  else{CSA_GAIN = CSA_GAIN_20;}					// From 40-60A use 20X amplifier gain.  (Make this generic in the future)
 8003d80:	2302      	movs	r3, #2
 8003d82:	607b      	str	r3, [r7, #4]
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1, SEN_LVL_0_25);
 8003d84:	4957      	ldr	r1, [pc, #348]	; (8003ee4 <main+0x590>)
 8003d86:	2300      	movs	r3, #0
 8003d88:	9306      	str	r3, [sp, #24]
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	9305      	str	r3, [sp, #20]
 8003d8e:	2301      	movs	r3, #1
 8003d90:	9304      	str	r3, [sp, #16]
 8003d92:	2301      	movs	r3, #1
 8003d94:	9303      	str	r3, [sp, #12]
 8003d96:	2300      	movs	r3, #0
 8003d98:	9302      	str	r3, [sp, #8]
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	9301      	str	r3, [sp, #4]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	2301      	movs	r3, #1
 8003da4:	2200      	movs	r2, #0
 8003da6:	c903      	ldmia	r1, {r0, r1}
 8003da8:	f7fe f823 	bl	8001df2 <drv_write_CSACR>
  HAL_Delay(1);
 8003dac:	2001      	movs	r0, #1
 8003dae:	f001 fe17 	bl	80059e0 <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN, 0x1, 0x0, 0x0, 0x0, SEN_LVL_0_25);
 8003db2:	494c      	ldr	r1, [pc, #304]	; (8003ee4 <main+0x590>)
 8003db4:	2300      	movs	r3, #0
 8003db6:	9306      	str	r3, [sp, #24]
 8003db8:	2300      	movs	r3, #0
 8003dba:	9305      	str	r3, [sp, #20]
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	9304      	str	r3, [sp, #16]
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	9303      	str	r3, [sp, #12]
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	9302      	str	r3, [sp, #8]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	9301      	str	r3, [sp, #4]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	c903      	ldmia	r1, {r0, r1}
 8003dd6:	f7fe f80c 	bl	8001df2 <drv_write_CSACR>
  HAL_Delay(1);
 8003dda:	2001      	movs	r0, #1
 8003ddc:	f001 fe00 	bl	80059e0 <HAL_Delay>
  zero_current(&controller);
 8003de0:	4838      	ldr	r0, [pc, #224]	; (8003ec4 <main+0x570>)
 8003de2:	f7fe fce1 	bl	80027a8 <zero_current>
  HAL_Delay(1);
 8003de6:	2001      	movs	r0, #1
 8003de8:	f001 fdfa 	bl	80059e0 <HAL_Delay>
  drv_write_OCPCR(drv, TRETRY_50US, DEADTIME_50NS, OCP_RETRY, OCP_DEG_4US, VDS_LVL_0_45);
 8003dec:	493d      	ldr	r1, [pc, #244]	; (8003ee4 <main+0x590>)
 8003dee:	2305      	movs	r3, #5
 8003df0:	9302      	str	r3, [sp, #8]
 8003df2:	2301      	movs	r3, #1
 8003df4:	9301      	str	r3, [sp, #4]
 8003df6:	2301      	movs	r3, #1
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	c903      	ldmia	r1, {r0, r1}
 8003e00:	f7fd ffc9 	bl	8001d96 <drv_write_OCPCR>
  HAL_Delay(1);
 8003e04:	2001      	movs	r0, #1
 8003e06:	f001 fdeb 	bl	80059e0 <HAL_Delay>
  drv_disable_gd(drv);
 8003e0a:	4b36      	ldr	r3, [pc, #216]	; (8003ee4 <main+0x590>)
 8003e0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003e10:	f7fe f84b 	bl	8001eaa <drv_disable_gd>
  HAL_Delay(1);
 8003e14:	2001      	movs	r0, #1
 8003e16:	f001 fde3 	bl	80059e0 <HAL_Delay>
  //drv_enable_gd(drv);   */
  printf("ADC A OFFSET: %d     ADC B OFFSET: %d\r\n", controller.adc1_offset, controller.adc2_offset);
 8003e1a:	4b2a      	ldr	r3, [pc, #168]	; (8003ec4 <main+0x570>)
 8003e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e1e:	4a29      	ldr	r2, [pc, #164]	; (8003ec4 <main+0x570>)
 8003e20:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003e24:	4619      	mov	r1, r3
 8003e26:	4831      	ldr	r0, [pc, #196]	; (8003eec <main+0x598>)
 8003e28:	f007 fa10 	bl	800b24c <iprintf>

  /* Turn on PWM */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4830      	ldr	r0, [pc, #192]	; (8003ef0 <main+0x59c>)
 8003e30:	f004 fd64 	bl	80088fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003e34:	2104      	movs	r1, #4
 8003e36:	482e      	ldr	r0, [pc, #184]	; (8003ef0 <main+0x59c>)
 8003e38:	f004 fd60 	bl	80088fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003e3c:	2108      	movs	r1, #8
 8003e3e:	482c      	ldr	r0, [pc, #176]	; (8003ef0 <main+0x59c>)
 8003e40:	f004 fd5c 	bl	80088fc <HAL_TIM_PWM_Start>

  /* CAN setup */
  can_rx_init(&can_rx);
 8003e44:	482b      	ldr	r0, [pc, #172]	; (8003ef4 <main+0x5a0>)
 8003e46:	f7fd fd69 	bl	800191c <can_rx_init>
  can_tx_init(&can_tx);
 8003e4a:	482b      	ldr	r0, [pc, #172]	; (8003ef8 <main+0x5a4>)
 8003e4c:	f7fd fd94 	bl	8001978 <can_tx_init>
  HAL_CAN_Start(&CAN_H); //start CAN
 8003e50:	482a      	ldr	r0, [pc, #168]	; (8003efc <main+0x5a8>)
 8003e52:	f002 fb4f 	bl	80064f4 <HAL_CAN_Start>
  //__HAL_CAN_ENABLE_IT(&CAN_H, CAN_IT_RX_FIFO0_MSG_PENDING); // Start can interrupt

  /* Set Interrupt Priorities */
  HAL_NVIC_SetPriority(PWM_ISR, 0x0,0x0); // commutation > communication
 8003e56:	2200      	movs	r2, #0
 8003e58:	2100      	movs	r1, #0
 8003e5a:	2019      	movs	r0, #25
 8003e5c:	f003 f88f 	bl	8006f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(CAN_ISR, 0x01, 0x01);
 8003e60:	2201      	movs	r2, #1
 8003e62:	2101      	movs	r1, #1
 8003e64:	2014      	movs	r0, #20
 8003e66:	f003 f88a 	bl	8006f7e <HAL_NVIC_SetPriority>

  /* Start the FSM */
  state.state = MENU_MODE;
 8003e6a:	4b25      	ldr	r3, [pc, #148]	; (8003f00 <main+0x5ac>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	701a      	strb	r2, [r3, #0]
  state.next_state = MENU_MODE;
 8003e70:	4b23      	ldr	r3, [pc, #140]	; (8003f00 <main+0x5ac>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	705a      	strb	r2, [r3, #1]
  state.ready = 1;
 8003e76:	4b22      	ldr	r3, [pc, #136]	; (8003f00 <main+0x5ac>)
 8003e78:	2201      	movs	r2, #1
 8003e7a:	70da      	strb	r2, [r3, #3]


  /* Turn on interrupts */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	4921      	ldr	r1, [pc, #132]	; (8003f04 <main+0x5b0>)
 8003e80:	4821      	ldr	r0, [pc, #132]	; (8003f08 <main+0x5b4>)
 8003e82:	f005 fd98 	bl	80099b6 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8003e86:	481a      	ldr	r0, [pc, #104]	; (8003ef0 <main+0x59c>)
 8003e88:	f004 fc6e 	bl	8008768 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(100);
 8003e8c:	2064      	movs	r0, #100	; 0x64
 8003e8e:	f001 fda7 	bl	80059e0 <HAL_Delay>
	  drv_print_faults(drv);
 8003e92:	4b14      	ldr	r3, [pc, #80]	; (8003ee4 <main+0x590>)
 8003e94:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003e98:	f7fe f822 	bl	8001ee0 <drv_print_faults>
	  HAL_Delay(100);
 8003e9c:	e7f6      	b.n	8003e8c <main+0x538>
 8003e9e:	bf00      	nop
 8003ea0:	2000033c 	.word	0x2000033c
 8003ea4:	c2820000 	.word	0xc2820000
 8003ea8:	080107f0 	.word	0x080107f0
 8003eac:	08010818 	.word	0x08010818
 8003eb0:	0801083c 	.word	0x0801083c
 8003eb4:	0801086c 	.word	0x0801086c
 8003eb8:	2000043c 	.word	0x2000043c
 8003ebc:	0801088c 	.word	0x0801088c
 8003ec0:	0801089c 	.word	0x0801089c
 8003ec4:	20000850 	.word	0x20000850
 8003ec8:	20009558 	.word	0x20009558
 8003ecc:	00000000 	.word	0x00000000
 8003ed0:	20001014 	.word	0x20001014
 8003ed4:	2000023c 	.word	0x2000023c
 8003ed8:	20000284 	.word	0x20000284
 8003edc:	200002cc 	.word	0x200002cc
 8003ee0:	40020000 	.word	0x40020000
 8003ee4:	20001324 	.word	0x20001324
 8003ee8:	42200000 	.word	0x42200000
 8003eec:	080108b0 	.word	0x080108b0
 8003ef0:	20009960 	.word	0x20009960
 8003ef4:	20009858 	.word	0x20009858
 8003ef8:	20009838 	.word	0x20009838
 8003efc:	20000314 	.word	0x20000314
 8003f00:	20000d24 	.word	0x20000d24
 8003f04:	200098a8 	.word	0x200098a8
 8003f08:	200099a8 	.word	0x200099a8

08003f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b094      	sub	sp, #80	; 0x50
 8003f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f12:	f107 031c 	add.w	r3, r7, #28
 8003f16:	2234      	movs	r2, #52	; 0x34
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f006 fd24 	bl	800a968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f20:	f107 0308 	add.w	r3, r7, #8
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	605a      	str	r2, [r3, #4]
 8003f2a:	609a      	str	r2, [r3, #8]
 8003f2c:	60da      	str	r2, [r3, #12]
 8003f2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f30:	2300      	movs	r3, #0
 8003f32:	607b      	str	r3, [r7, #4]
 8003f34:	4b2c      	ldr	r3, [pc, #176]	; (8003fe8 <SystemClock_Config+0xdc>)
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	4a2b      	ldr	r2, [pc, #172]	; (8003fe8 <SystemClock_Config+0xdc>)
 8003f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f3e:	6413      	str	r3, [r2, #64]	; 0x40
 8003f40:	4b29      	ldr	r3, [pc, #164]	; (8003fe8 <SystemClock_Config+0xdc>)
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f48:	607b      	str	r3, [r7, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	603b      	str	r3, [r7, #0]
 8003f50:	4b26      	ldr	r3, [pc, #152]	; (8003fec <SystemClock_Config+0xe0>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a25      	ldr	r2, [pc, #148]	; (8003fec <SystemClock_Config+0xe0>)
 8003f56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	4b23      	ldr	r3, [pc, #140]	; (8003fec <SystemClock_Config+0xe0>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f64:	603b      	str	r3, [r7, #0]
 8003f66:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f70:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f72:	2302      	movs	r3, #2
 8003f74:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003f80:	23b4      	movs	r3, #180	; 0xb4
 8003f82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f84:	2302      	movs	r3, #2
 8003f86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003f88:	2302      	movs	r3, #2
 8003f8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f90:	f107 031c 	add.w	r3, r7, #28
 8003f94:	4618      	mov	r0, r3
 8003f96:	f003 fe03 	bl	8007ba0 <HAL_RCC_OscConfig>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003fa0:	f000 f826 	bl	8003ff0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003fa4:	f003 fa62 	bl	800746c <HAL_PWREx_EnableOverDrive>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003fae:	f000 f81f 	bl	8003ff0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fb2:	230f      	movs	r3, #15
 8003fb4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003fbe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003fc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fc8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003fca:	f107 0308 	add.w	r3, r7, #8
 8003fce:	2105      	movs	r1, #5
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f003 fa9b 	bl	800750c <HAL_RCC_ClockConfig>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003fdc:	f000 f808 	bl	8003ff0 <Error_Handler>
  }
}
 8003fe0:	bf00      	nop
 8003fe2:	3750      	adds	r7, #80	; 0x50
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	40007000 	.word	0x40007000

08003ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003ff4:	bf00      	nop
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <fmaxf3>:
float fast_fminf(float x, float y){
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
    }

float fmaxf3(float x, float y, float z){
 8003ffe:	b480      	push	{r7}
 8004000:	b085      	sub	sp, #20
 8004002:	af00      	add	r7, sp, #0
 8004004:	ed87 0a03 	vstr	s0, [r7, #12]
 8004008:	edc7 0a02 	vstr	s1, [r7, #8]
 800400c:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 8004010:	ed97 7a03 	vldr	s14, [r7, #12]
 8004014:	edd7 7a02 	vldr	s15, [r7, #8]
 8004018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800401c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004020:	dd0c      	ble.n	800403c <fmaxf3+0x3e>
 8004022:	ed97 7a03 	vldr	s14, [r7, #12]
 8004026:	edd7 7a01 	vldr	s15, [r7, #4]
 800402a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800402e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004032:	dd01      	ble.n	8004038 <fmaxf3+0x3a>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	e00d      	b.n	8004054 <fmaxf3+0x56>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	e00b      	b.n	8004054 <fmaxf3+0x56>
 800403c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004040:	edd7 7a01 	vldr	s15, [r7, #4]
 8004044:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800404c:	dd01      	ble.n	8004052 <fmaxf3+0x54>
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	e000      	b.n	8004054 <fmaxf3+0x56>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	ee07 3a90 	vmov	s15, r3
    }
 8004058:	eeb0 0a67 	vmov.f32	s0, s15
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <fminf3>:

float fminf3(float x, float y, float z){
 8004066:	b480      	push	{r7}
 8004068:	b085      	sub	sp, #20
 800406a:	af00      	add	r7, sp, #0
 800406c:	ed87 0a03 	vstr	s0, [r7, #12]
 8004070:	edc7 0a02 	vstr	s1, [r7, #8]
 8004074:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 8004078:	ed97 7a03 	vldr	s14, [r7, #12]
 800407c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004080:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004088:	d50c      	bpl.n	80040a4 <fminf3+0x3e>
 800408a:	ed97 7a03 	vldr	s14, [r7, #12]
 800408e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004092:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800409a:	d501      	bpl.n	80040a0 <fminf3+0x3a>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	e00d      	b.n	80040bc <fminf3+0x56>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	e00b      	b.n	80040bc <fminf3+0x56>
 80040a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80040a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80040ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b4:	d501      	bpl.n	80040ba <fminf3+0x54>
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	e000      	b.n	80040bc <fminf3+0x56>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	ee07 3a90 	vmov	s15, r3
    }
 80040c0:	eeb0 0a67 	vmov.f32	s0, s15
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <float_to_uint>:
    
void limit(float *x, float min, float max){
    *x = fast_fmaxf(fast_fminf(*x, max), min);
    }

int float_to_uint(float x, float x_min, float x_max, int bits){
 80040ce:	b480      	push	{r7}
 80040d0:	b087      	sub	sp, #28
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	ed87 0a03 	vstr	s0, [r7, #12]
 80040d8:	edc7 0a02 	vstr	s1, [r7, #8]
 80040dc:	ed87 1a01 	vstr	s2, [r7, #4]
 80040e0:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 80040e2:	ed97 7a01 	vldr	s14, [r7, #4]
 80040e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80040ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040ee:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 80040f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80040fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80040fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004102:	2201      	movs	r2, #1
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	3b01      	subs	r3, #1
 800410c:	ee07 3a90 	vmov	s15, r3
 8004110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004114:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004118:	ed97 7a05 	vldr	s14, [r7, #20]
 800411c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004124:	ee17 3a90 	vmov	r3, s15
    }
 8004128:	4618      	mov	r0, r3
 800412a:	371c      	adds	r7, #28
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <uint_to_float>:
    
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004140:	edc7 0a01 	vstr	s1, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 8004146:	ed97 7a01 	vldr	s14, [r7, #4]
 800414a:	edd7 7a02 	vldr	s15, [r7, #8]
 800414e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004152:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	ee07 3a90 	vmov	s15, r3
 8004160:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004164:	edd7 7a05 	vldr	s15, [r7, #20]
 8004168:	ee67 6a27 	vmul.f32	s13, s14, s15
 800416c:	2201      	movs	r2, #1
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	ee07 3a90 	vmov	s15, r3
 800417a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800417e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004182:	edd7 7a04 	vldr	s15, [r7, #16]
 8004186:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 800418a:	eeb0 0a67 	vmov.f32	s0, s15
 800418e:	371c      	adds	r7, #28
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <sin_lut>:

float sin_lut(float theta){
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWO_PI_F);
 80041a2:	eddf 0a17 	vldr	s1, [pc, #92]	; 8004200 <sin_lut+0x68>
 80041a6:	ed97 0a01 	vldr	s0, [r7, #4]
 80041aa:	f00a fe35 	bl	800ee18 <fmodf>
 80041ae:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI_F : theta;
 80041b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80041b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041be:	d506      	bpl.n	80041ce <sin_lut+0x36>
 80041c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80041c4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004200 <sin_lut+0x68>
 80041c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041cc:	e001      	b.n	80041d2 <sin_lut+0x3a>
 80041ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80041d2:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int) (LUT_MULT*theta)];
 80041d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80041da:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004204 <sin_lut+0x6c>
 80041de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041e6:	ee17 3a90 	vmov	r3, s15
 80041ea:	4a07      	ldr	r2, [pc, #28]	; (8004208 <sin_lut+0x70>)
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	ee07 3a90 	vmov	s15, r3
}
 80041f6:	eeb0 0a67 	vmov.f32	s0, s15
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40c90fdb 	.word	0x40c90fdb
 8004204:	42a2f983 	.word	0x42a2f983
 8004208:	08010954 	.word	0x08010954

0800420c <cos_lut>:

float cos_lut(float theta){
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_2_F - theta);
 8004216:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004238 <cos_lut+0x2c>
 800421a:	edd7 7a01 	vldr	s15, [r7, #4]
 800421e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004222:	eeb0 0a67 	vmov.f32	s0, s15
 8004226:	f7ff ffb7 	bl	8004198 <sin_lut>
 800422a:	eef0 7a40 	vmov.f32	s15, s0
}
 800422e:	eeb0 0a67 	vmov.f32	s0, s15
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	3fc90fdb 	.word	0x3fc90fdb

0800423c <ps_sample>:
//		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
//		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
//	}
}

void ps_sample(EncoderStruct * encoder, float dt){
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	ed87 0a00 	vstr	s0, [r7]
//*/
//	//encoder->velocity = vel2
//	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
//	encoder->elec_velocity = encoder->ppairs*encoder->velocity;

}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <Init>:

struct timeval tv_start;
struct timeval tv_end;


void Init(EncoderCMUStruct *encoder, int CPR, float offset, int ppairs) {
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af02      	add	r7, sp, #8
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004262:	603a      	str	r2, [r7, #0]
	printf("init encoder cmu");
 8004264:	483a      	ldr	r0, [pc, #232]	; (8004350 <Init+0xfc>)
 8004266:	f006 fff1 	bl	800b24c <iprintf>
	encoder->_CPR = CPR;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	encoder->_ppairs = ppairs;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	encoder->ElecOffset = offset;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	60da      	str	r2, [r3, #12]
	encoder->rotations = 0;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	encoder->readAngleCmd = 0xffff;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800428e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	encoder->MechOffset = offset;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	615a      	str	r2, [r3, #20]
	encoder->modPosition = 0;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	619a      	str	r2, [r3, #24]
	encoder->oldModPosition = 0;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	61da      	str	r2, [r3, #28]
	encoder->oldVel = 0;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f04f 0200 	mov.w	r2, #0
 80042ae:	621a      	str	r2, [r3, #32]
	encoder->raw = 0;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	encoder->lut_shift = 12; // shift from 19bit data to 7bit lut index
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	220c      	movs	r2, #12
 80042bc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	encoder->first_sample = 0;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

	for(int i = 0; i<400; i++){
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	e037      	b.n	800433e <Init+0xea>
		if (i%4 == 0){ // alternate between A600 and 0000 to get A6 00 00 00
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d103      	bne.n	80042e0 <Init+0x8c>
			encoder->spi_tx_byte = 0xA6;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	22a6      	movs	r2, #166	; 0xa6
 80042dc:	709a      	strb	r2, [r3, #2]
 80042de:	e002      	b.n	80042e6 <Init+0x92>
		} else {
			encoder->spi_tx_byte = 0x00;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	709a      	strb	r2, [r3, #2]
		}
		printf("encoder tx: %x \n\r", (unsigned int)encoder->spi_tx_byte);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	789b      	ldrb	r3, [r3, #2]
 80042ea:	4619      	mov	r1, r3
 80042ec:	4819      	ldr	r0, [pc, #100]	; (8004354 <Init+0x100>)
 80042ee:	f006 ffad 	bl	800b24c <iprintf>

		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 80042f2:	2200      	movs	r2, #0
 80042f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042f8:	4817      	ldr	r0, [pc, #92]	; (8004358 <Init+0x104>)
 80042fa:	f003 f89d 	bl	8007438 <HAL_GPIO_WritePin>
//		HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
		HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t *)&encoder->spi_tx_byte, (uint8_t *)&encoder->spi_rx_byte, 1, 100);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	1c99      	adds	r1, r3, #2
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	1cda      	adds	r2, r3, #3
 8004306:	2364      	movs	r3, #100	; 0x64
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	2301      	movs	r3, #1
 800430c:	4813      	ldr	r0, [pc, #76]	; (800435c <Init+0x108>)
 800430e:	f003 ff6e 	bl	80081ee <HAL_SPI_TransmitReceive>
//		printf("encoder rx: %x \n\r", (unsigned int)encoder->spi_rx_byte);
		printf("encoder rx: %d \n\r", (int)encoder->spi_rx_byte);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	78db      	ldrb	r3, [r3, #3]
 8004316:	4619      	mov	r1, r3
 8004318:	4811      	ldr	r0, [pc, #68]	; (8004360 <Init+0x10c>)
 800431a:	f006 ff97 	bl	800b24c <iprintf>
//		HAL_SPI_Transmit(&ENC_SPI, (uint8_t*)encoder->spi_tx_byte, 1, 100);
		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 800431e:	bf00      	nop
 8004320:	4b0e      	ldr	r3, [pc, #56]	; (800435c <Init+0x108>)
 8004322:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d0f9      	beq.n	8004320 <Init+0xcc>
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 800432c:	2201      	movs	r2, #1
 800432e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004332:	4809      	ldr	r0, [pc, #36]	; (8004358 <Init+0x104>)
 8004334:	f003 f880 	bl	8007438 <HAL_GPIO_WritePin>
	for(int i = 0; i<400; i++){
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	3301      	adds	r3, #1
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004344:	dbc3      	blt.n	80042ce <Init+0x7a>


	}

}
 8004346:	bf00      	nop
 8004348:	bf00      	nop
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	080108d8 	.word	0x080108d8
 8004354:	080108ec 	.word	0x080108ec
 8004358:	40020000 	.word	0x40020000
 800435c:	20009904 	.word	0x20009904
 8004360:	08010900 	.word	0x08010900

08004364 <Sample>:

void Sample(EncoderCMUStruct * encoder, float dt){
 8004364:	b580      	push	{r7, lr}
 8004366:	b08e      	sub	sp, #56	; 0x38
 8004368:	af02      	add	r7, sp, #8
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	ed87 0a00 	vstr	s0, [r7]
//	unsigned long t1 = DWT->CYCCNT;
    /* SPI read/write */
	for(int i = 0; i<4; i++){
 8004370:	2300      	movs	r3, #0
 8004372:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004374:	e035      	b.n	80043e2 <Sample+0x7e>
		if (i%4 == 0){ // alternate between A600 and 0000 to get A6 00 00 00
 8004376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004378:	f003 0303 	and.w	r3, r3, #3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d103      	bne.n	8004388 <Sample+0x24>
			encoder->spi_tx_byte = 0xA6;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	22a6      	movs	r2, #166	; 0xa6
 8004384:	709a      	strb	r2, [r3, #2]
 8004386:	e002      	b.n	800438e <Sample+0x2a>
		} else {
			encoder->spi_tx_byte = 0x00;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	709a      	strb	r2, [r3, #2]
		}
//		printf("encoder tx: %x \n\r", (unsigned int)encoder->spi_tx_byte);

		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 800438e:	2200      	movs	r2, #0
 8004390:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004394:	48b9      	ldr	r0, [pc, #740]	; (800467c <Sample+0x318>)
 8004396:	f003 f84f 	bl	8007438 <HAL_GPIO_WritePin>
//		HAL_SPI_Transmit(&ENC_SPI, (uint8_t*)&encoder->spi_tx_byte, 1, 100);
		HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t *)&encoder->spi_tx_byte, (uint8_t *)&encoder->spi_rx_byte, 1, 2000);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	1c99      	adds	r1, r3, #2
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	1cda      	adds	r2, r3, #3
 80043a2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	2301      	movs	r3, #1
 80043aa:	48b5      	ldr	r0, [pc, #724]	; (8004680 <Sample+0x31c>)
 80043ac:	f003 ff1f 	bl	80081ee <HAL_SPI_TransmitReceive>
		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 80043b0:	bf00      	nop
 80043b2:	4bb3      	ldr	r3, [pc, #716]	; (8004680 <Sample+0x31c>)
 80043b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d0f9      	beq.n	80043b2 <Sample+0x4e>
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 80043be:	2201      	movs	r2, #1
 80043c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043c4:	48ad      	ldr	r0, [pc, #692]	; (800467c <Sample+0x318>)
 80043c6:	f003 f837 	bl	8007438 <HAL_GPIO_WritePin>
		encoder->raw_bytes[i] = encoder -> spi_rx_byte;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	78db      	ldrb	r3, [r3, #3]
 80043ce:	4619      	mov	r1, r3
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d4:	333a      	adds	r3, #58	; 0x3a
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	6059      	str	r1, [r3, #4]
	for(int i = 0; i<4; i++){
 80043dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043de:	3301      	adds	r3, #1
 80043e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	ddc6      	ble.n	8004376 <Sample+0x12>
//		printf("encoder rx: %x \n\r", (unsigned int)encoder->spi_rx_byte);
	}


	encoder->raw = encoder->raw_bytes[1]<<16 | encoder->raw_bytes[2]<<8 | encoder->raw_bytes[3];
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043ee:	041a      	lsls	r2, r3, #16
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043f6:	021b      	lsls	r3, r3, #8
 80043f8:	431a      	orrs	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	// From 24 received bits: 14bits MAS, 5 bits NON, 5 zero bits
	// With default filter, get 14 bits of usable data
	// But, still extract 19 bits
	encoder->raw = encoder->raw>>5;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800440e:	115a      	asrs	r2, r3, #5
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
//	printf("encoder raw: %d \n\r", (unsigned int)encoder->raw);
//	printf("encoder raw: %x  %x  %x  %x \n\r", (unsigned int)encoder->raw_bytes[3], (unsigned int)encoder->raw_bytes[2], (unsigned int)encoder->raw_bytes[1], (unsigned int)encoder->raw_bytes[0]);


	//GPIOA->ODR |= (1 << 15);
	int off_1 = encoder->offset_lut[encoder->raw>>encoder->lut_shift]; // shift 12 bits to go from 19-bit to 7-bit lut index
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004422:	411a      	asrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3244      	adds	r2, #68	; 0x44
 8004428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800442c:	61bb      	str	r3, [r7, #24]
	int off_2 = encoder->offset_lut[((encoder->raw>>encoder->lut_shift)+1)%128];
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800443a:	fa42 f303 	asr.w	r3, r2, r3
 800443e:	3301      	adds	r3, #1
 8004440:	425a      	negs	r2, r3
 8004442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004446:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800444a:	bf58      	it	pl
 800444c:	4253      	negpl	r3, r2
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	3344      	adds	r3, #68	; 0x44
 8004452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004456:	617b      	str	r3, [r7, #20]


	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>encoder->lut_shift)<<encoder->lut_shift))>>encoder->lut_shift);        // Interpolate between lookup table entries
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	f8d2 10d0 	ldr.w	r1, [r2, #208]	; 0xd0
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	f8d2 00d0 	ldr.w	r0, [r2, #208]	; 0xd0
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 8004470:	4110      	asrs	r0, r2
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 8004478:	fa00 f202 	lsl.w	r2, r0, r2
 800447c:	1a8a      	subs	r2, r1, r2
 800447e:	fb03 f202 	mul.w	r2, r3, r2
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004488:	fa42 f303 	asr.w	r3, r2, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4413      	add	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
	int angle = encoder->raw + off_interp;                                               // Correct for nonlinearity with lookup table from calibration
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4413      	add	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]

	if(encoder->first_sample){
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d029      	beq.n	80044fc <Sample+0x198>
		if(angle - encoder->old_counts > encoder->_CPR/2){
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	1ad2      	subs	r2, r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80044b8:	0fd9      	lsrs	r1, r3, #31
 80044ba:	440b      	add	r3, r1
 80044bc:	105b      	asrs	r3, r3, #1
 80044be:	429a      	cmp	r2, r3
 80044c0:	dd07      	ble.n	80044d2 <Sample+0x16e>
			encoder->rotations -= 1;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80044c8:	1e5a      	subs	r2, r3, #1
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80044d0:	e014      	b.n	80044fc <Sample+0x198>
			}
		else if (angle - encoder->old_counts < -(encoder->_CPR)/2){
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	1ad2      	subs	r2, r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80044e2:	0fd9      	lsrs	r1, r3, #31
 80044e4:	440b      	add	r3, r1
 80044e6:	105b      	asrs	r3, r3, #1
 80044e8:	425b      	negs	r3, r3
 80044ea:	429a      	cmp	r2, r3
 80044ec:	da06      	bge.n	80044fc <Sample+0x198>
			encoder->rotations += 1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			}
	}
	if(!encoder->first_sample){encoder->first_sample = 1;}
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004502:	2b00      	cmp	r3, #0
 8004504:	d103      	bne.n	800450e <Sample+0x1aa>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

	encoder->old_counts = angle;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	encoder->oldModPosition = encoder->modPosition;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	61da      	str	r2, [r3, #28]
	encoder->modPosition = ((2.0f*PI_F * ((float) angle))/ (float)encoder->_CPR);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	ee07 3a90 	vmov	s15, r3
 8004524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004528:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8004684 <Sample+0x320>
 800452c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004536:	ee07 3a90 	vmov	s15, r3
 800453a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800453e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	edc3 7a06 	vstr	s15, [r3, #24]
	encoder->position = (2.0f*PI_F * ((float) angle+(encoder->_CPR*encoder->rotations)))/ (float)encoder->_CPR;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	ee07 3a90 	vmov	s15, r3
 800454e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	f8d2 20dc 	ldr.w	r2, [r2, #220]	; 0xdc
 800455e:	fb02 f303 	mul.w	r3, r2, r3
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800456a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800456e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004684 <Sample+0x320>
 8004572:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800457c:	ee07 3a90 	vmov	s15, r3
 8004580:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	edc3 7a01 	vstr	s15, [r3, #4]

	encoder->MechPosition = encoder->position - encoder->MechOffset; // is this mech position of the rotor or output?
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	ed93 7a01 	vldr	s14, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	edd3 7a05 	vldr	s15, [r3, #20]
 800459a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	edc3 7a04 	vstr	s15, [r3, #16]

	float elec = ((2.0f*PI_F/(float)encoder->_CPR) * (float) ((encoder->_ppairs*angle)%encoder->_CPR)) + encoder->ElecOffset;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80045aa:	ee07 3a90 	vmov	s15, r3
 80045ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045b2:	eddf 6a34 	vldr	s13, [pc, #208]	; 8004684 <Sample+0x320>
 80045b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	fb02 f303 	mul.w	r3, r2, r3
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
 80045cc:	fb93 f1f2 	sdiv	r1, r3, r2
 80045d0:	fb01 f202 	mul.w	r2, r1, r2
 80045d4:	1a9b      	subs	r3, r3, r2
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80045e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045ec:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	if(elec < 0) elec += 2.0f*PI_F;
 80045f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80045f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045fc:	d508      	bpl.n	8004610 <Sample+0x2ac>
 80045fe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004602:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8004684 <Sample+0x320>
 8004606:	ee77 7a87 	vadd.f32	s15, s15, s14
 800460a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800460e:	e010      	b.n	8004632 <Sample+0x2ce>
	else if(elec > 2.0f*PI_F) elec -= 2.0f*PI_F ;
 8004610:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004614:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004684 <Sample+0x320>
 8004618:	eef4 7ac7 	vcmpe.f32	s15, s14
 800461c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004620:	dd07      	ble.n	8004632 <Sample+0x2ce>
 8004622:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004626:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004684 <Sample+0x320>
 800462a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800462e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	encoder->ElecPosition = elec;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004636:	609a      	str	r2, [r3, #8]

	float vel;
	//if(modPosition<.1f && oldModPosition>6.1f){

	if((encoder->modPosition-encoder->oldModPosition) < -3.0f){
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	ed93 7a06 	vldr	s14, [r3, #24]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	edd3 7a07 	vldr	s15, [r3, #28]
 8004644:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004648:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 800464c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004654:	d51c      	bpl.n	8004690 <Sample+0x32c>
		vel = (encoder->modPosition - encoder->oldModPosition + 2.0f*PI_F)/dt;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	ed93 7a06 	vldr	s14, [r3, #24]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	edd3 7a07 	vldr	s15, [r3, #28]
 8004662:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004666:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8004684 <Sample+0x320>
 800466a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800466e:	ed97 7a00 	vldr	s14, [r7]
 8004672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004676:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800467a:	e039      	b.n	80046f0 <Sample+0x38c>
 800467c:	40020000 	.word	0x40020000
 8004680:	20009904 	.word	0x20009904
 8004684:	40c90fdb 	.word	0x40c90fdb
 8004688:	3f7d70a4 	.word	0x3f7d70a4
 800468c:	3c23d70a 	.word	0x3c23d70a
		}
	//else if(modPosition>6.1f && oldModPosition<0.1f){
	else if((encoder->modPosition - encoder->oldModPosition) > 3.0f){
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	ed93 7a06 	vldr	s14, [r3, #24]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	edd3 7a07 	vldr	s15, [r3, #28]
 800469c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046a0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80046a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ac:	dd12      	ble.n	80046d4 <Sample+0x370>
		vel = (encoder->modPosition - encoder->oldModPosition - 2.0f*PI_F)/dt;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	ed93 7a06 	vldr	s14, [r3, #24]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	edd3 7a07 	vldr	s15, [r3, #28]
 80046ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046be:	ed1f 7a0f 	vldr	s14, [pc, #-60]	; 8004684 <Sample+0x320>
 80046c2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80046c6:	ed97 7a00 	vldr	s14, [r7]
 80046ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ce:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80046d2:	e00d      	b.n	80046f0 <Sample+0x38c>
		}
	else{
		vel = (encoder->modPosition-encoder->oldModPosition)/dt;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	ed93 7a06 	vldr	s14, [r3, #24]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	edd3 7a07 	vldr	s15, [r3, #28]
 80046e0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80046e4:	ed97 7a00 	vldr	s14, [r7]
 80046e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ec:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}

	int n = 40;
 80046f0:	2328      	movs	r3, #40	; 0x28
 80046f2:	60bb      	str	r3, [r7, #8]
	float sum = vel;
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	623b      	str	r3, [r7, #32]
	for (int i = 1; i < (n); i++){
 80046f8:	2301      	movs	r3, #1
 80046fa:	61fb      	str	r3, [r7, #28]
 80046fc:	e025      	b.n	800474a <Sample+0x3e6>
		encoder->velVec[n - i] = encoder->velVec[n-i-1];
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	1e5a      	subs	r2, r3, #1
 8004706:	68b9      	ldr	r1, [r7, #8]
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	1acb      	subs	r3, r1, r3
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	3208      	adds	r2, #8
 8004710:	0092      	lsls	r2, r2, #2
 8004712:	440a      	add	r2, r1
 8004714:	3204      	adds	r2, #4
 8004716:	6812      	ldr	r2, [r2, #0]
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	3308      	adds	r3, #8
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	440b      	add	r3, r1
 8004720:	3304      	adds	r3, #4
 8004722:	601a      	str	r2, [r3, #0]
		sum += encoder->velVec[n-i];
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	3308      	adds	r3, #8
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	3304      	adds	r3, #4
 8004734:	edd3 7a00 	vldr	s15, [r3]
 8004738:	ed97 7a08 	vldr	s14, [r7, #32]
 800473c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004740:	edc7 7a08 	vstr	s15, [r7, #32]
	for (int i = 1; i < (n); i++){
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	3301      	adds	r3, #1
 8004748:	61fb      	str	r3, [r7, #28]
 800474a:	69fa      	ldr	r2, [r7, #28]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	429a      	cmp	r2, r3
 8004750:	dbd5      	blt.n	80046fe <Sample+0x39a>
		}
	encoder->velVec[0] = vel;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004756:	625a      	str	r2, [r3, #36]	; 0x24
	encoder->MechVelocity =  sum/((float)n); // is this mech velocity of the rotor or output?
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	ee07 3a90 	vmov	s15, r3
 800475e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004762:	edd7 6a08 	vldr	s13, [r7, #32]
 8004766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4

	encoder->ElecVelocity = encoder->MechVelocity*encoder->_ppairs;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	ed93 7a31 	vldr	s14, [r3, #196]	; 0xc4
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800477c:	ee07 3a90 	vmov	s15, r3
 8004780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004784:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
	encoder->ElecVelocityFilt = 0.99f*encoder->ElecVelocityFilt + 0.01f*encoder->ElecVelocity;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8004794:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8004688 <Sample+0x324>
 8004798:	ee27 7a87 	vmul.f32	s14, s15, s14
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 80047a2:	ed5f 6a46 	vldr	s13, [pc, #-280]	; 800468c <Sample+0x328>
 80047a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80047aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc

//	unsigned long t2 = DWT->CYCCNT;
//	unsigned long diff = t2 - t1;
//	printf("diff: %d", (int)diff);
}
 80047b4:	bf00      	nop
 80047b6:	3730      	adds	r7, #48	; 0x30
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <ZeroPosition>:
//	encoder->MechOffset = offset;
//    encoder->first_sample = 0;
//}
//
//
void ZeroPosition(EncoderCMUStruct * encoder){
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
	encoder->rotations = 0;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	encoder->MechOffset = 0;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	615a      	str	r2, [r3, #20]
	Sample(encoder, .00025f);
 80047d4:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80047f0 <ZeroPosition+0x34>
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7ff fdc3 	bl	8004364 <Sample>
	encoder->MechOffset = encoder->MechPosition;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691a      	ldr	r2, [r3, #16]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	615a      	str	r2, [r3, #20]

}
 80047e6:	bf00      	nop
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	3983126f 	.word	0x3983126f

080047f4 <printCMUEncoder>:
//void WriteLUT(EncoderCMUStruct * encoder,  int new_lut[128]){
//	memcpy(encoder->offset_lut, new_lut, sizeof(encoder->offset_lut));
//
//}

void printCMUEncoder(EncoderCMUStruct * encoder){
 80047f4:	b5b0      	push	{r4, r5, r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af04      	add	r7, sp, #16
 80047fa:	6078      	str	r0, [r7, #4]
	printf( " Mechanical Angle:  %f    Electrical Angle:  %f    Raw:  %d \n\r$", encoder->MechPosition, encoder->ElecPosition, encoder->raw);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	4618      	mov	r0, r3
 8004802:	f7fb fec1 	bl	8000588 <__aeabi_f2d>
 8004806:	4604      	mov	r4, r0
 8004808:	460d      	mov	r5, r1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	4618      	mov	r0, r3
 8004810:	f7fb feba 	bl	8000588 <__aeabi_f2d>
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	6879      	ldr	r1, [r7, #4]
 800481a:	f8d1 10d0 	ldr.w	r1, [r1, #208]	; 0xd0
 800481e:	9102      	str	r1, [sp, #8]
 8004820:	e9cd 2300 	strd	r2, r3, [sp]
 8004824:	4622      	mov	r2, r4
 8004826:	462b      	mov	r3, r5
 8004828:	4803      	ldr	r0, [pc, #12]	; (8004838 <printCMUEncoder+0x44>)
 800482a:	f006 fd0f 	bl	800b24c <iprintf>
//	printf("   Single Turn: %f", encoder->angle_singleturn);
//	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
//	printf("   Electrical: %f", encoder->elec_angle);
//	printf("   Turns:  %d\r\n", encoder->turns);
//	HAL_Delay(dt_ms);
}
 800482e:	bf00      	nop
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bdb0      	pop	{r4, r5, r7, pc}
 8004836:	bf00      	nop
 8004838:	08010914 	.word	0x08010914

0800483c <preference_writer_init>:
    __sector = sector;
    __ready = false;
}
*/

void preference_writer_init(PreferenceWriter * pr, uint32_t sector){
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
	flash_writer_init(&pr->fw, sector);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6839      	ldr	r1, [r7, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f7fd fc3c 	bl	80020c8 <flash_writer_init>
	pr->sector = sector;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	60da      	str	r2, [r3, #12]
}
 8004856:	bf00      	nop
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <preference_writer_open>:


void preference_writer_open(PreferenceWriter * pr) {
 800485e:	b580      	push	{r7, lr}
 8004860:	b082      	sub	sp, #8
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
    flash_writer_open(&pr->fw);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4618      	mov	r0, r3
 800486a:	f7fd fc4b 	bl	8002104 <flash_writer_open>
    pr->ready = true;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	741a      	strb	r2, [r3, #16]
}
 8004874:	bf00      	nop
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <preference_writer_ready>:

bool  preference_writer_ready(PreferenceWriter pr) {
 800487c:	b084      	sub	sp, #16
 800487e:	b490      	push	{r4, r7}
 8004880:	af00      	add	r7, sp, #0
 8004882:	f107 0408 	add.w	r4, r7, #8
 8004886:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return pr.ready;
 800488a:	7e3b      	ldrb	r3, [r7, #24]
}
 800488c:	4618      	mov	r0, r3
 800488e:	46bd      	mov	sp, r7
 8004890:	bc90      	pop	{r4, r7}
 8004892:	b004      	add	sp, #16
 8004894:	4770      	bx	lr
	...

08004898 <preference_writer_flush>:

void preference_writer_write_float(float x, int index) {
    __float_reg[index] = x;
}

void preference_writer_flush(PreferenceWriter * pr) {
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af02      	add	r7, sp, #8
 800489e:	6078      	str	r0, [r7, #4]
    int offs;
    for (offs = 0; offs < 256; offs++) {
 80048a0:	2300      	movs	r3, #0
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	e00d      	b.n	80048c2 <preference_writer_flush+0x2a>
        flash_writer_write_int(pr->fw, offs, __int_reg[offs]);
 80048a6:	68f9      	ldr	r1, [r7, #12]
 80048a8:	4a17      	ldr	r2, [pc, #92]	; (8004908 <preference_writer_flush+0x70>)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	460b      	mov	r3, r1
 80048b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80048b8:	f7fd fc40 	bl	800213c <flash_writer_write_int>
    for (offs = 0; offs < 256; offs++) {
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	3301      	adds	r3, #1
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2bff      	cmp	r3, #255	; 0xff
 80048c6:	ddee      	ble.n	80048a6 <preference_writer_flush+0xe>
    }
    for (; offs < 320; offs++) {
 80048c8:	e012      	b.n	80048f0 <preference_writer_flush+0x58>
        flash_writer_write_float(pr->fw, offs, __float_reg[offs - 256]);
 80048ca:	68f9      	ldr	r1, [r7, #12]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80048d2:	4a0e      	ldr	r2, [pc, #56]	; (800490c <preference_writer_flush+0x74>)
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	edd3 7a00 	vldr	s15, [r3]
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	eeb0 0a67 	vmov.f32	s0, s15
 80048e2:	460b      	mov	r3, r1
 80048e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80048e6:	f7fd fc3f 	bl	8002168 <flash_writer_write_float>
    for (; offs < 320; offs++) {
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	3301      	adds	r3, #1
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80048f6:	dbe8      	blt.n	80048ca <preference_writer_flush+0x32>
    }
    pr->ready = false;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	741a      	strb	r2, [r3, #16]
}
 80048fe:	bf00      	nop
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	2000043c 	.word	0x2000043c
 800490c:	2000033c 	.word	0x2000033c

08004910 <preference_writer_load>:

void preference_writer_load(PreferenceWriter pr) {
 8004910:	b084      	sub	sp, #16
 8004912:	b590      	push	{r4, r7, lr}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	f107 0418 	add.w	r4, r7, #24
 800491c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int offs;
    for (offs = 0; offs < 256; offs++) {
 8004920:	2300      	movs	r3, #0
 8004922:	607b      	str	r3, [r7, #4]
 8004924:	e00d      	b.n	8004942 <preference_writer_load+0x32>
        __int_reg[offs] = flash_read_int(pr.fw, offs);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f107 0218 	add.w	r2, r7, #24
 800492c:	ca07      	ldmia	r2, {r0, r1, r2}
 800492e:	f7fd fc41 	bl	80021b4 <flash_read_int>
 8004932:	4602      	mov	r2, r0
 8004934:	4915      	ldr	r1, [pc, #84]	; (800498c <preference_writer_load+0x7c>)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (offs = 0; offs < 256; offs++) {
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3301      	adds	r3, #1
 8004940:	607b      	str	r3, [r7, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2bff      	cmp	r3, #255	; 0xff
 8004946:	ddee      	ble.n	8004926 <preference_writer_load+0x16>
    }
    for(; offs < 320; offs++) {
 8004948:	e013      	b.n	8004972 <preference_writer_load+0x62>
        __float_reg[offs - 256] = flash_read_float(pr.fw, offs);
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f5a3 7480 	sub.w	r4, r3, #256	; 0x100
 8004952:	4613      	mov	r3, r2
 8004954:	f107 0218 	add.w	r2, r7, #24
 8004958:	ca07      	ldmia	r2, {r0, r1, r2}
 800495a:	f7fd fc41 	bl	80021e0 <flash_read_float>
 800495e:	eef0 7a40 	vmov.f32	s15, s0
 8004962:	4a0b      	ldr	r2, [pc, #44]	; (8004990 <preference_writer_load+0x80>)
 8004964:	00a3      	lsls	r3, r4, #2
 8004966:	4413      	add	r3, r2
 8004968:	edc3 7a00 	vstr	s15, [r3]
    for(; offs < 320; offs++) {
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3301      	adds	r3, #1
 8004970:	607b      	str	r3, [r7, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004978:	dbe7      	blt.n	800494a <preference_writer_load+0x3a>
    }
}
 800497a:	bf00      	nop
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004986:	b004      	add	sp, #16
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	2000043c 	.word	0x2000043c
 8004990:	2000033c 	.word	0x2000033c

08004994 <preference_writer_close>:

void preference_writer_close(PreferenceWriter *pr) {
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
    pr->ready = false;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	741a      	strb	r2, [r3, #16]
    flash_writer_close(&pr->fw);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fd fbf8 	bl	800219a <flash_writer_close>
}
 80049aa:	bf00      	nop
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
	...

080049b4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80049b8:	4b18      	ldr	r3, [pc, #96]	; (8004a1c <MX_SPI1_Init+0x68>)
 80049ba:	4a19      	ldr	r2, [pc, #100]	; (8004a20 <MX_SPI1_Init+0x6c>)
 80049bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80049be:	4b17      	ldr	r3, [pc, #92]	; (8004a1c <MX_SPI1_Init+0x68>)
 80049c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80049c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80049c6:	4b15      	ldr	r3, [pc, #84]	; (8004a1c <MX_SPI1_Init+0x68>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80049cc:	4b13      	ldr	r3, [pc, #76]	; (8004a1c <MX_SPI1_Init+0x68>)
 80049ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80049d4:	4b11      	ldr	r3, [pc, #68]	; (8004a1c <MX_SPI1_Init+0x68>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80049da:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <MX_SPI1_Init+0x68>)
 80049dc:	2201      	movs	r2, #1
 80049de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80049e0:	4b0e      	ldr	r3, [pc, #56]	; (8004a1c <MX_SPI1_Init+0x68>)
 80049e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80049e8:	4b0c      	ldr	r3, [pc, #48]	; (8004a1c <MX_SPI1_Init+0x68>)
 80049ea:	2228      	movs	r2, #40	; 0x28
 80049ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80049ee:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <MX_SPI1_Init+0x68>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80049f4:	4b09      	ldr	r3, [pc, #36]	; (8004a1c <MX_SPI1_Init+0x68>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049fa:	4b08      	ldr	r3, [pc, #32]	; (8004a1c <MX_SPI1_Init+0x68>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004a00:	4b06      	ldr	r3, [pc, #24]	; (8004a1c <MX_SPI1_Init+0x68>)
 8004a02:	220a      	movs	r2, #10
 8004a04:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004a06:	4805      	ldr	r0, [pc, #20]	; (8004a1c <MX_SPI1_Init+0x68>)
 8004a08:	f003 fb68 	bl	80080dc <HAL_SPI_Init>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8004a12:	f7ff faed 	bl	8003ff0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004a16:	bf00      	nop
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	200098ac 	.word	0x200098ac
 8004a20:	40013000 	.word	0x40013000

08004a24 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8004a28:	4b17      	ldr	r3, [pc, #92]	; (8004a88 <MX_SPI3_Init+0x64>)
 8004a2a:	4a18      	ldr	r2, [pc, #96]	; (8004a8c <MX_SPI3_Init+0x68>)
 8004a2c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004a2e:	4b16      	ldr	r3, [pc, #88]	; (8004a88 <MX_SPI3_Init+0x64>)
 8004a30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004a34:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004a36:	4b14      	ldr	r3, [pc, #80]	; (8004a88 <MX_SPI3_Init+0x64>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004a3c:	4b12      	ldr	r3, [pc, #72]	; (8004a88 <MX_SPI3_Init+0x64>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a42:	4b11      	ldr	r3, [pc, #68]	; (8004a88 <MX_SPI3_Init+0x64>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a48:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <MX_SPI3_Init+0x64>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004a4e:	4b0e      	ldr	r3, [pc, #56]	; (8004a88 <MX_SPI3_Init+0x64>)
 8004a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a54:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004a56:	4b0c      	ldr	r3, [pc, #48]	; (8004a88 <MX_SPI3_Init+0x64>)
 8004a58:	2238      	movs	r2, #56	; 0x38
 8004a5a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a5c:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <MX_SPI3_Init+0x64>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a62:	4b09      	ldr	r3, [pc, #36]	; (8004a88 <MX_SPI3_Init+0x64>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a68:	4b07      	ldr	r3, [pc, #28]	; (8004a88 <MX_SPI3_Init+0x64>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8004a6e:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <MX_SPI3_Init+0x64>)
 8004a70:	220a      	movs	r2, #10
 8004a72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004a74:	4804      	ldr	r0, [pc, #16]	; (8004a88 <MX_SPI3_Init+0x64>)
 8004a76:	f003 fb31 	bl	80080dc <HAL_SPI_Init>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8004a80:	f7ff fab6 	bl	8003ff0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004a84:	bf00      	nop
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	20009904 	.word	0x20009904
 8004a8c:	40003c00 	.word	0x40003c00

08004a90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08c      	sub	sp, #48	; 0x30
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a98:	f107 031c 	add.w	r3, r7, #28
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	605a      	str	r2, [r3, #4]
 8004aa2:	609a      	str	r2, [r3, #8]
 8004aa4:	60da      	str	r2, [r3, #12]
 8004aa6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a32      	ldr	r2, [pc, #200]	; (8004b78 <HAL_SPI_MspInit+0xe8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d12c      	bne.n	8004b0c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61bb      	str	r3, [r7, #24]
 8004ab6:	4b31      	ldr	r3, [pc, #196]	; (8004b7c <HAL_SPI_MspInit+0xec>)
 8004ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aba:	4a30      	ldr	r2, [pc, #192]	; (8004b7c <HAL_SPI_MspInit+0xec>)
 8004abc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ac2:	4b2e      	ldr	r3, [pc, #184]	; (8004b7c <HAL_SPI_MspInit+0xec>)
 8004ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004aca:	61bb      	str	r3, [r7, #24]
 8004acc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ace:	2300      	movs	r3, #0
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	4b2a      	ldr	r3, [pc, #168]	; (8004b7c <HAL_SPI_MspInit+0xec>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	4a29      	ldr	r2, [pc, #164]	; (8004b7c <HAL_SPI_MspInit+0xec>)
 8004ad8:	f043 0301 	orr.w	r3, r3, #1
 8004adc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ade:	4b27      	ldr	r3, [pc, #156]	; (8004b7c <HAL_SPI_MspInit+0xec>)
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004aea:	23e0      	movs	r3, #224	; 0xe0
 8004aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aee:	2302      	movs	r3, #2
 8004af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af2:	2300      	movs	r3, #0
 8004af4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004af6:	2303      	movs	r3, #3
 8004af8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004afa:	2305      	movs	r3, #5
 8004afc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004afe:	f107 031c 	add.w	r3, r7, #28
 8004b02:	4619      	mov	r1, r3
 8004b04:	481e      	ldr	r0, [pc, #120]	; (8004b80 <HAL_SPI_MspInit+0xf0>)
 8004b06:	f002 fb03 	bl	8007110 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004b0a:	e031      	b.n	8004b70 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI3)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a1c      	ldr	r2, [pc, #112]	; (8004b84 <HAL_SPI_MspInit+0xf4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d12c      	bne.n	8004b70 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004b16:	2300      	movs	r3, #0
 8004b18:	613b      	str	r3, [r7, #16]
 8004b1a:	4b18      	ldr	r3, [pc, #96]	; (8004b7c <HAL_SPI_MspInit+0xec>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	4a17      	ldr	r2, [pc, #92]	; (8004b7c <HAL_SPI_MspInit+0xec>)
 8004b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b24:	6413      	str	r3, [r2, #64]	; 0x40
 8004b26:	4b15      	ldr	r3, [pc, #84]	; (8004b7c <HAL_SPI_MspInit+0xec>)
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b2e:	613b      	str	r3, [r7, #16]
 8004b30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b32:	2300      	movs	r3, #0
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	4b11      	ldr	r3, [pc, #68]	; (8004b7c <HAL_SPI_MspInit+0xec>)
 8004b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3a:	4a10      	ldr	r2, [pc, #64]	; (8004b7c <HAL_SPI_MspInit+0xec>)
 8004b3c:	f043 0304 	orr.w	r3, r3, #4
 8004b40:	6313      	str	r3, [r2, #48]	; 0x30
 8004b42:	4b0e      	ldr	r3, [pc, #56]	; (8004b7c <HAL_SPI_MspInit+0xec>)
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004b4e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b54:	2302      	movs	r3, #2
 8004b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004b60:	2306      	movs	r3, #6
 8004b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b64:	f107 031c 	add.w	r3, r7, #28
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4807      	ldr	r0, [pc, #28]	; (8004b88 <HAL_SPI_MspInit+0xf8>)
 8004b6c:	f002 fad0 	bl	8007110 <HAL_GPIO_Init>
}
 8004b70:	bf00      	nop
 8004b72:	3730      	adds	r7, #48	; 0x30
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40013000 	.word	0x40013000
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	40020000 	.word	0x40020000
 8004b84:	40003c00 	.word	0x40003c00
 8004b88:	40020800 	.word	0x40020800

08004b8c <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8004b90:	4b07      	ldr	r3, [pc, #28]	; (8004bb0 <FLASH_Unlock+0x24>)
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	da05      	bge.n	8004ba4 <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8004b98:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <FLASH_Unlock+0x24>)
 8004b9a:	4a06      	ldr	r2, [pc, #24]	; (8004bb4 <FLASH_Unlock+0x28>)
 8004b9c:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8004b9e:	4b04      	ldr	r3, [pc, #16]	; (8004bb0 <FLASH_Unlock+0x24>)
 8004ba0:	4a05      	ldr	r2, [pc, #20]	; (8004bb8 <FLASH_Unlock+0x2c>)
 8004ba2:	605a      	str	r2, [r3, #4]
  }  
}
 8004ba4:	bf00      	nop
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	40023c00 	.word	0x40023c00
 8004bb4:	45670123 	.word	0x45670123
 8004bb8:	cdef89ab 	.word	0xcdef89ab

08004bbc <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004bc0:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <FLASH_Lock+0x1c>)
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	4a04      	ldr	r2, [pc, #16]	; (8004bd8 <FLASH_Lock+0x1c>)
 8004bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004bca:	6113      	str	r3, [r2, #16]
}
 8004bcc:	bf00      	nop
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	40023c00 	.word	0x40023c00

08004bdc <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	460b      	mov	r3, r1
 8004be6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE2;
 8004bec:	2309      	movs	r3, #9
 8004bee:	72fb      	strb	r3, [r7, #11]
 
  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8004bf0:	78fb      	ldrb	r3, [r7, #3]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d102      	bne.n	8004bfc <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	e010      	b.n	8004c1e <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 8004bfc:	78fb      	ldrb	r3, [r7, #3]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d103      	bne.n	8004c0a <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004c02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	e009      	b.n	8004c1e <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 8004c0a:	78fb      	ldrb	r3, [r7, #3]
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d103      	bne.n	8004c18 <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	e002      	b.n	8004c1e <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004c18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004c1c:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation2();
 8004c1e:	f000 f8bf 	bl	8004da0 <FLASH_WaitForLastOperation2>
 8004c22:	4603      	mov	r3, r0
 8004c24:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE2)
 8004c26:	7afb      	ldrb	r3, [r7, #11]
 8004c28:	2b09      	cmp	r3, #9
 8004c2a:	d12f      	bne.n	8004c8c <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 8004c2c:	4b1a      	ldr	r3, [pc, #104]	; (8004c98 <FLASH_EraseSector+0xbc>)
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	4a19      	ldr	r2, [pc, #100]	; (8004c98 <FLASH_EraseSector+0xbc>)
 8004c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c36:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 8004c38:	4b17      	ldr	r3, [pc, #92]	; (8004c98 <FLASH_EraseSector+0xbc>)
 8004c3a:	691a      	ldr	r2, [r3, #16]
 8004c3c:	4916      	ldr	r1, [pc, #88]	; (8004c98 <FLASH_EraseSector+0xbc>)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	610b      	str	r3, [r1, #16]
    FLASH->CR &= SECTOR_MASK;
 8004c44:	4b14      	ldr	r3, [pc, #80]	; (8004c98 <FLASH_EraseSector+0xbc>)
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	4a13      	ldr	r2, [pc, #76]	; (8004c98 <FLASH_EraseSector+0xbc>)
 8004c4a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004c4e:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8004c50:	4b11      	ldr	r3, [pc, #68]	; (8004c98 <FLASH_EraseSector+0xbc>)
 8004c52:	691a      	ldr	r2, [r3, #16]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	4a0f      	ldr	r2, [pc, #60]	; (8004c98 <FLASH_EraseSector+0xbc>)
 8004c5a:	f043 0302 	orr.w	r3, r3, #2
 8004c5e:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8004c60:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <FLASH_EraseSector+0xbc>)
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	4a0c      	ldr	r2, [pc, #48]	; (8004c98 <FLASH_EraseSector+0xbc>)
 8004c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c6a:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation2();
 8004c6c:	f000 f898 	bl	8004da0 <FLASH_WaitForLastOperation2>
 8004c70:	4603      	mov	r3, r0
 8004c72:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 8004c74:	4b08      	ldr	r3, [pc, #32]	; (8004c98 <FLASH_EraseSector+0xbc>)
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	4a07      	ldr	r2, [pc, #28]	; (8004c98 <FLASH_EraseSector+0xbc>)
 8004c7a:	f023 0302 	bic.w	r3, r3, #2
 8004c7e:	6113      	str	r3, [r2, #16]
    FLASH->CR &= SECTOR_MASK; 
 8004c80:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <FLASH_EraseSector+0xbc>)
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	4a04      	ldr	r2, [pc, #16]	; (8004c98 <FLASH_EraseSector+0xbc>)
 8004c86:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004c8a:	6113      	str	r3, [r2, #16]
  }
  /* Return the Erase Status */
  return status;
 8004c8c:	7afb      	ldrb	r3, [r7, #11]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	40023c00 	.word	0x40023c00

08004c9c <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE2;
 8004ca6:	2309      	movs	r3, #9
 8004ca8:	73fb      	strb	r3, [r7, #15]
 
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation2();
 8004caa:	f000 f879 	bl	8004da0 <FLASH_WaitForLastOperation2>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE2)
 8004cb2:	7bfb      	ldrb	r3, [r7, #15]
 8004cb4:	2b09      	cmp	r3, #9
 8004cb6:	d11e      	bne.n	8004cf6 <FLASH_ProgramWord+0x5a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8004cb8:	4b11      	ldr	r3, [pc, #68]	; (8004d00 <FLASH_ProgramWord+0x64>)
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	4a10      	ldr	r2, [pc, #64]	; (8004d00 <FLASH_ProgramWord+0x64>)
 8004cbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc2:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 8004cc4:	4b0e      	ldr	r3, [pc, #56]	; (8004d00 <FLASH_ProgramWord+0x64>)
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	4a0d      	ldr	r2, [pc, #52]	; (8004d00 <FLASH_ProgramWord+0x64>)
 8004cca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cce:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 8004cd0:	4b0b      	ldr	r3, [pc, #44]	; (8004d00 <FLASH_ProgramWord+0x64>)
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	4a0a      	ldr	r2, [pc, #40]	; (8004d00 <FLASH_ProgramWord+0x64>)
 8004cd6:	f043 0301 	orr.w	r3, r3, #1
 8004cda:	6113      	str	r3, [r2, #16]
  
    *(__IO uint32_t*)Address = Data;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation2();
 8004ce2:	f000 f85d 	bl	8004da0 <FLASH_WaitForLastOperation2>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	73fb      	strb	r3, [r7, #15]
 
    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8004cea:	4b05      	ldr	r3, [pc, #20]	; (8004d00 <FLASH_ProgramWord+0x64>)
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	4a04      	ldr	r2, [pc, #16]	; (8004d00 <FLASH_ProgramWord+0x64>)
 8004cf0:	f023 0301 	bic.w	r3, r3, #1
 8004cf4:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40023c00 	.word	0x40023c00

08004d04 <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42xx/43xxx and STM32F401xx/411xE devices)   
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8004d0c:	4a04      	ldr	r2, [pc, #16]	; (8004d20 <FLASH_ClearFlag+0x1c>)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	60d3      	str	r3, [r2, #12]
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40023c00 	.word	0x40023c00

08004d24 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_RD2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE2;
 8004d2a:	2309      	movs	r3, #9
 8004d2c:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8004d2e:	4b1b      	ldr	r3, [pc, #108]	; (8004d9c <FLASH_GetStatus+0x78>)
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d3a:	d102      	bne.n	8004d42 <FLASH_GetStatus+0x1e>
  {
    flashstatus = FLASH_BUSY2;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	71fb      	strb	r3, [r7, #7]
 8004d40:	e025      	b.n	8004d8e <FLASH_GetStatus+0x6a>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 8004d42:	4b16      	ldr	r3, [pc, #88]	; (8004d9c <FLASH_GetStatus+0x78>)
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	f003 0310 	and.w	r3, r3, #16
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <FLASH_GetStatus+0x30>
    { 
      flashstatus = FLASH_ERROR_WRP2;
 8004d4e:	2306      	movs	r3, #6
 8004d50:	71fb      	strb	r3, [r7, #7]
 8004d52:	e01c      	b.n	8004d8e <FLASH_GetStatus+0x6a>
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 8004d54:	4b11      	ldr	r3, [pc, #68]	; (8004d9c <FLASH_GetStatus+0x78>)
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <FLASH_GetStatus+0x42>
      { 
        flashstatus = FLASH_ERROR_RD2;
 8004d60:	2302      	movs	r3, #2
 8004d62:	71fb      	strb	r3, [r7, #7]
 8004d64:	e013      	b.n	8004d8e <FLASH_GetStatus+0x6a>
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
 8004d66:	4b0d      	ldr	r3, [pc, #52]	; (8004d9c <FLASH_GetStatus+0x78>)
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <FLASH_GetStatus+0x54>
        {
          flashstatus = FLASH_ERROR_PROGRAM2; 
 8004d72:	2307      	movs	r3, #7
 8004d74:	71fb      	strb	r3, [r7, #7]
 8004d76:	e00a      	b.n	8004d8e <FLASH_GetStatus+0x6a>
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 8004d78:	4b08      	ldr	r3, [pc, #32]	; (8004d9c <FLASH_GetStatus+0x78>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <FLASH_GetStatus+0x66>
          {
            flashstatus = FLASH_ERROR_OPERATION2;
 8004d84:	2308      	movs	r3, #8
 8004d86:	71fb      	strb	r3, [r7, #7]
 8004d88:	e001      	b.n	8004d8e <FLASH_GetStatus+0x6a>
          }
          else
          {
            flashstatus = FLASH_COMPLETE2;
 8004d8a:	2309      	movs	r3, #9
 8004d8c:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 8004d8e:	79fb      	ldrb	r3, [r7, #7]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	40023c00 	.word	0x40023c00

08004da0 <FLASH_WaitForLastOperation2>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_WaitForLastOperation2(void)
{ 
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE2;
 8004da6:	2309      	movs	r3, #9
 8004da8:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8004daa:	f7ff ffbb 	bl	8004d24 <FLASH_GetStatus>
 8004dae:	4603      	mov	r3, r0
 8004db0:	71fb      	strb	r3, [r7, #7]
 
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY2)
 8004db2:	e003      	b.n	8004dbc <FLASH_WaitForLastOperation2+0x1c>
  {
    status = FLASH_GetStatus();
 8004db4:	f7ff ffb6 	bl	8004d24 <FLASH_GetStatus>
 8004db8:	4603      	mov	r3, r0
 8004dba:	71fb      	strb	r3, [r7, #7]
  while(status == FLASH_BUSY2)
 8004dbc:	79fb      	ldrb	r3, [r7, #7]
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d0f7      	beq.n	8004db4 <FLASH_WaitForLastOperation2+0x14>
  }
  /* Return the operation status */
  return status;
 8004dc4:	79fb      	ldrb	r3, [r7, #7]
 8004dc6:	b2db      	uxtb	r3, r3
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	607b      	str	r3, [r7, #4]
 8004dda:	4b10      	ldr	r3, [pc, #64]	; (8004e1c <HAL_MspInit+0x4c>)
 8004ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dde:	4a0f      	ldr	r2, [pc, #60]	; (8004e1c <HAL_MspInit+0x4c>)
 8004de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004de4:	6453      	str	r3, [r2, #68]	; 0x44
 8004de6:	4b0d      	ldr	r3, [pc, #52]	; (8004e1c <HAL_MspInit+0x4c>)
 8004de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dee:	607b      	str	r3, [r7, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004df2:	2300      	movs	r3, #0
 8004df4:	603b      	str	r3, [r7, #0]
 8004df6:	4b09      	ldr	r3, [pc, #36]	; (8004e1c <HAL_MspInit+0x4c>)
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	4a08      	ldr	r2, [pc, #32]	; (8004e1c <HAL_MspInit+0x4c>)
 8004dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e00:	6413      	str	r3, [r2, #64]	; 0x40
 8004e02:	4b06      	ldr	r3, [pc, #24]	; (8004e1c <HAL_MspInit+0x4c>)
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e0a:	603b      	str	r3, [r7, #0]
 8004e0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004e0e:	2007      	movs	r0, #7
 8004e10:	f002 f8aa 	bl	8006f68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e14:	bf00      	nop
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40023800 	.word	0x40023800

08004e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004e24:	bf00      	nop
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e32:	e7fe      	b.n	8004e32 <HardFault_Handler+0x4>

08004e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e38:	e7fe      	b.n	8004e38 <MemManage_Handler+0x4>

08004e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e3e:	e7fe      	b.n	8004e3e <BusFault_Handler+0x4>

08004e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e44:	e7fe      	b.n	8004e44 <UsageFault_Handler+0x4>

08004e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e46:	b480      	push	{r7}
 8004e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e4a:	bf00      	nop
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e58:	bf00      	nop
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e62:	b480      	push	{r7}
 8004e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e66:	bf00      	nop
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e74:	f000 fd94 	bl	80059a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e78:	bf00      	nop
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e7e:	b095      	sub	sp, #84	; 0x54
 8004e80:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004e82:	4883      	ldr	r0, [pc, #524]	; (8005090 <CAN1_RX0_IRQHandler+0x214>)
 8004e84:	f001 fd67 	bl	8006956 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  HAL_CAN_GetRxMessage(&CAN_H, CAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 8004e88:	4b82      	ldr	r3, [pc, #520]	; (8005094 <CAN1_RX0_IRQHandler+0x218>)
 8004e8a:	4a83      	ldr	r2, [pc, #524]	; (8005098 <CAN1_RX0_IRQHandler+0x21c>)
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	4880      	ldr	r0, [pc, #512]	; (8005090 <CAN1_RX0_IRQHandler+0x214>)
 8004e90:	f001 fc4f 	bl	8006732 <HAL_CAN_GetRxMessage>
  uint32_t TxMailbox;
  pack_reply(&can_tx, CAN_ID,  comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR);	// Pack response
 8004e94:	4b81      	ldr	r3, [pc, #516]	; (800509c <CAN1_RX0_IRQHandler+0x220>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	4a81      	ldr	r2, [pc, #516]	; (80050a0 <CAN1_RX0_IRQHandler+0x224>)
 8004e9c:	ed92 7a03 	vldr	s14, [r2, #12]
 8004ea0:	4a80      	ldr	r2, [pc, #512]	; (80050a4 <CAN1_RX0_IRQHandler+0x228>)
 8004ea2:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 8004ea6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004eaa:	4a7d      	ldr	r2, [pc, #500]	; (80050a0 <CAN1_RX0_IRQHandler+0x224>)
 8004eac:	ed92 7a18 	vldr	s14, [r2, #96]	; 0x60
 8004eb0:	4a7c      	ldr	r2, [pc, #496]	; (80050a4 <CAN1_RX0_IRQHandler+0x228>)
 8004eb2:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 8004eb6:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8004eba:	4a7b      	ldr	r2, [pc, #492]	; (80050a8 <CAN1_RX0_IRQHandler+0x22c>)
 8004ebc:	ed92 7a0e 	vldr	s14, [r2, #56]	; 0x38
 8004ec0:	4a78      	ldr	r2, [pc, #480]	; (80050a4 <CAN1_RX0_IRQHandler+0x228>)
 8004ec2:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8004ec6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004eca:	4a76      	ldr	r2, [pc, #472]	; (80050a4 <CAN1_RX0_IRQHandler+0x228>)
 8004ecc:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 8004ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed4:	eeb0 1a67 	vmov.f32	s2, s15
 8004ed8:	eef0 0a46 	vmov.f32	s1, s12
 8004edc:	eeb0 0a66 	vmov.f32	s0, s13
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	4872      	ldr	r0, [pc, #456]	; (80050ac <CAN1_RX0_IRQHandler+0x230>)
 8004ee4:	f7fc fd62 	bl	80019ac <pack_reply>
  HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 8004ee8:	1d3b      	adds	r3, r7, #4
 8004eea:	4a71      	ldr	r2, [pc, #452]	; (80050b0 <CAN1_RX0_IRQHandler+0x234>)
 8004eec:	4971      	ldr	r1, [pc, #452]	; (80050b4 <CAN1_RX0_IRQHandler+0x238>)
 8004eee:	4868      	ldr	r0, [pc, #416]	; (8005090 <CAN1_RX0_IRQHandler+0x214>)
 8004ef0:	f001 fb44 	bl	800657c <HAL_CAN_AddTxMessage>

  /* Check for special Commands */
  if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 8004ef4:	4b70      	ldr	r3, [pc, #448]	; (80050b8 <CAN1_RX0_IRQHandler+0x23c>)
 8004ef6:	785a      	ldrb	r2, [r3, #1]
 8004ef8:	4b6f      	ldr	r3, [pc, #444]	; (80050b8 <CAN1_RX0_IRQHandler+0x23c>)
 8004efa:	789b      	ldrb	r3, [r3, #2]
 8004efc:	4013      	ands	r3, r2
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	4b6d      	ldr	r3, [pc, #436]	; (80050b8 <CAN1_RX0_IRQHandler+0x23c>)
 8004f02:	78db      	ldrb	r3, [r3, #3]
 8004f04:	4013      	ands	r3, r2
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	4b6b      	ldr	r3, [pc, #428]	; (80050b8 <CAN1_RX0_IRQHandler+0x23c>)
 8004f0a:	791b      	ldrb	r3, [r3, #4]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	4b69      	ldr	r3, [pc, #420]	; (80050b8 <CAN1_RX0_IRQHandler+0x23c>)
 8004f12:	795b      	ldrb	r3, [r3, #5]
 8004f14:	4013      	ands	r3, r2
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	4b67      	ldr	r3, [pc, #412]	; (80050b8 <CAN1_RX0_IRQHandler+0x23c>)
 8004f1a:	799b      	ldrb	r3, [r3, #6]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	4b65      	ldr	r3, [pc, #404]	; (80050b8 <CAN1_RX0_IRQHandler+0x23c>)
 8004f22:	79db      	ldrb	r3, [r3, #7]
 8004f24:	4013      	ands	r3, r2
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2bff      	cmp	r3, #255	; 0xff
 8004f2a:	bf0c      	ite	eq
 8004f2c:	2301      	moveq	r3, #1
 8004f2e:	2300      	movne	r3, #0
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	4b61      	ldr	r3, [pc, #388]	; (80050b8 <CAN1_RX0_IRQHandler+0x23c>)
 8004f34:	7a1b      	ldrb	r3, [r3, #8]
 8004f36:	2bfc      	cmp	r3, #252	; 0xfc
 8004f38:	bf0c      	ite	eq
 8004f3a:	2301      	moveq	r3, #1
 8004f3c:	2300      	movne	r3, #0
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	4013      	ands	r3, r2
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d004      	beq.n	8004f52 <CAN1_RX0_IRQHandler+0xd6>
	  update_fsm(&state, MOTOR_CMD);
 8004f48:	216d      	movs	r1, #109	; 0x6d
 8004f4a:	485c      	ldr	r0, [pc, #368]	; (80050bc <CAN1_RX0_IRQHandler+0x240>)
 8004f4c:	f7fd ff56 	bl	8002dfc <update_fsm>
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
	  controller.timeout = 0;					// Reset timeout counter
  }

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004f50:	e099      	b.n	8005086 <CAN1_RX0_IRQHandler+0x20a>
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFD))){
 8004f52:	4b59      	ldr	r3, [pc, #356]	; (80050b8 <CAN1_RX0_IRQHandler+0x23c>)
 8004f54:	785a      	ldrb	r2, [r3, #1]
 8004f56:	4b58      	ldr	r3, [pc, #352]	; (80050b8 <CAN1_RX0_IRQHandler+0x23c>)
 8004f58:	789b      	ldrb	r3, [r3, #2]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	4b56      	ldr	r3, [pc, #344]	; (80050b8 <CAN1_RX0_IRQHandler+0x23c>)
 8004f60:	78db      	ldrb	r3, [r3, #3]
 8004f62:	4013      	ands	r3, r2
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2bff      	cmp	r3, #255	; 0xff
 8004f68:	bf0c      	ite	eq
 8004f6a:	2301      	moveq	r3, #1
 8004f6c:	2300      	movne	r3, #0
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	461a      	mov	r2, r3
 8004f72:	4b51      	ldr	r3, [pc, #324]	; (80050b8 <CAN1_RX0_IRQHandler+0x23c>)
 8004f74:	791b      	ldrb	r3, [r3, #4]
 8004f76:	2bff      	cmp	r3, #255	; 0xff
 8004f78:	bf0c      	ite	eq
 8004f7a:	2301      	moveq	r3, #1
 8004f7c:	2300      	movne	r3, #0
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	4619      	mov	r1, r3
 8004f82:	4b4d      	ldr	r3, [pc, #308]	; (80050b8 <CAN1_RX0_IRQHandler+0x23c>)
 8004f84:	795b      	ldrb	r3, [r3, #5]
 8004f86:	2bff      	cmp	r3, #255	; 0xff
 8004f88:	bf0c      	ite	eq
 8004f8a:	2301      	moveq	r3, #1
 8004f8c:	2300      	movne	r3, #0
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	fb01 f303 	mul.w	r3, r1, r3
 8004f94:	4013      	ands	r3, r2
 8004f96:	4a48      	ldr	r2, [pc, #288]	; (80050b8 <CAN1_RX0_IRQHandler+0x23c>)
 8004f98:	7992      	ldrb	r2, [r2, #6]
 8004f9a:	2aff      	cmp	r2, #255	; 0xff
 8004f9c:	bf0c      	ite	eq
 8004f9e:	2201      	moveq	r2, #1
 8004fa0:	2200      	movne	r2, #0
 8004fa2:	b2d2      	uxtb	r2, r2
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	4a44      	ldr	r2, [pc, #272]	; (80050b8 <CAN1_RX0_IRQHandler+0x23c>)
 8004fa8:	79d2      	ldrb	r2, [r2, #7]
 8004faa:	2aff      	cmp	r2, #255	; 0xff
 8004fac:	bf0c      	ite	eq
 8004fae:	2201      	moveq	r2, #1
 8004fb0:	2200      	movne	r2, #0
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	4a40      	ldr	r2, [pc, #256]	; (80050b8 <CAN1_RX0_IRQHandler+0x23c>)
 8004fb8:	7a12      	ldrb	r2, [r2, #8]
 8004fba:	2afd      	cmp	r2, #253	; 0xfd
 8004fbc:	bf0c      	ite	eq
 8004fbe:	2201      	moveq	r2, #1
 8004fc0:	2200      	movne	r2, #0
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d004      	beq.n	8004fd4 <CAN1_RX0_IRQHandler+0x158>
      update_fsm(&state, MENU_CMD);
 8004fca:	211b      	movs	r1, #27
 8004fcc:	483b      	ldr	r0, [pc, #236]	; (80050bc <CAN1_RX0_IRQHandler+0x240>)
 8004fce:	f7fd ff15 	bl	8002dfc <update_fsm>
}
 8004fd2:	e058      	b.n	8005086 <CAN1_RX0_IRQHandler+0x20a>
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFE))){
 8004fd4:	4b38      	ldr	r3, [pc, #224]	; (80050b8 <CAN1_RX0_IRQHandler+0x23c>)
 8004fd6:	785a      	ldrb	r2, [r3, #1]
 8004fd8:	4b37      	ldr	r3, [pc, #220]	; (80050b8 <CAN1_RX0_IRQHandler+0x23c>)
 8004fda:	789b      	ldrb	r3, [r3, #2]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	b2da      	uxtb	r2, r3
 8004fe0:	4b35      	ldr	r3, [pc, #212]	; (80050b8 <CAN1_RX0_IRQHandler+0x23c>)
 8004fe2:	78db      	ldrb	r3, [r3, #3]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2bff      	cmp	r3, #255	; 0xff
 8004fea:	bf0c      	ite	eq
 8004fec:	2301      	moveq	r3, #1
 8004fee:	2300      	movne	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	4b30      	ldr	r3, [pc, #192]	; (80050b8 <CAN1_RX0_IRQHandler+0x23c>)
 8004ff6:	791b      	ldrb	r3, [r3, #4]
 8004ff8:	2bff      	cmp	r3, #255	; 0xff
 8004ffa:	bf0c      	ite	eq
 8004ffc:	2301      	moveq	r3, #1
 8004ffe:	2300      	movne	r3, #0
 8005000:	b2db      	uxtb	r3, r3
 8005002:	4619      	mov	r1, r3
 8005004:	4b2c      	ldr	r3, [pc, #176]	; (80050b8 <CAN1_RX0_IRQHandler+0x23c>)
 8005006:	795b      	ldrb	r3, [r3, #5]
 8005008:	2bff      	cmp	r3, #255	; 0xff
 800500a:	bf0c      	ite	eq
 800500c:	2301      	moveq	r3, #1
 800500e:	2300      	movne	r3, #0
 8005010:	b2db      	uxtb	r3, r3
 8005012:	fb01 f303 	mul.w	r3, r1, r3
 8005016:	4013      	ands	r3, r2
 8005018:	4a27      	ldr	r2, [pc, #156]	; (80050b8 <CAN1_RX0_IRQHandler+0x23c>)
 800501a:	7992      	ldrb	r2, [r2, #6]
 800501c:	2aff      	cmp	r2, #255	; 0xff
 800501e:	bf0c      	ite	eq
 8005020:	2201      	moveq	r2, #1
 8005022:	2200      	movne	r2, #0
 8005024:	b2d2      	uxtb	r2, r2
 8005026:	4013      	ands	r3, r2
 8005028:	4a23      	ldr	r2, [pc, #140]	; (80050b8 <CAN1_RX0_IRQHandler+0x23c>)
 800502a:	79d2      	ldrb	r2, [r2, #7]
 800502c:	2aff      	cmp	r2, #255	; 0xff
 800502e:	bf0c      	ite	eq
 8005030:	2201      	moveq	r2, #1
 8005032:	2200      	movne	r2, #0
 8005034:	b2d2      	uxtb	r2, r2
 8005036:	4013      	ands	r3, r2
 8005038:	4a1f      	ldr	r2, [pc, #124]	; (80050b8 <CAN1_RX0_IRQHandler+0x23c>)
 800503a:	7a12      	ldrb	r2, [r2, #8]
 800503c:	2afe      	cmp	r2, #254	; 0xfe
 800503e:	bf0c      	ite	eq
 8005040:	2201      	moveq	r2, #1
 8005042:	2200      	movne	r2, #0
 8005044:	b2d2      	uxtb	r2, r2
 8005046:	4013      	ands	r3, r2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d004      	beq.n	8005056 <CAN1_RX0_IRQHandler+0x1da>
	  update_fsm(&state, ZERO_CMD);
 800504c:	217a      	movs	r1, #122	; 0x7a
 800504e:	481b      	ldr	r0, [pc, #108]	; (80050bc <CAN1_RX0_IRQHandler+0x240>)
 8005050:	f7fd fed4 	bl	8002dfc <update_fsm>
}
 8005054:	e017      	b.n	8005086 <CAN1_RX0_IRQHandler+0x20a>
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 8005056:	4e18      	ldr	r6, [pc, #96]	; (80050b8 <CAN1_RX0_IRQHandler+0x23c>)
 8005058:	4b19      	ldr	r3, [pc, #100]	; (80050c0 <CAN1_RX0_IRQHandler+0x244>)
 800505a:	9310      	str	r3, [sp, #64]	; 0x40
 800505c:	466d      	mov	r5, sp
 800505e:	f106 0410 	add.w	r4, r6, #16
 8005062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005068:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800506a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800506c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800506e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005072:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005076:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800507a:	f7fc fd0f 	bl	8001a9c <unpack_cmd>
	  controller.timeout = 0;					// Reset timeout counter
 800507e:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <CAN1_RX0_IRQHandler+0x22c>)
 8005080:	2200      	movs	r2, #0
 8005082:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800508e:	bf00      	nop
 8005090:	20000314 	.word	0x20000314
 8005094:	20009859 	.word	0x20009859
 8005098:	20009864 	.word	0x20009864
 800509c:	2000043c 	.word	0x2000043c
 80050a0:	20000d34 	.word	0x20000d34
 80050a4:	2000033c 	.word	0x2000033c
 80050a8:	20000850 	.word	0x20000850
 80050ac:	20009838 	.word	0x20009838
 80050b0:	20009839 	.word	0x20009839
 80050b4:	20009840 	.word	0x20009840
 80050b8:	20009858 	.word	0x20009858
 80050bc:	20000d24 	.word	0x20000d24
 80050c0:	200008f4 	.word	0x200008f4

080050c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	//HAL_GPIO_WritePin(LED, GPIO_PIN_SET );	// Useful for timing

	/* Sample ADCs */
	analog_sample(&controller);
 80050c8:	480c      	ldr	r0, [pc, #48]	; (80050fc <TIM1_UP_TIM10_IRQHandler+0x38>)
 80050ca:	f7fd f947 	bl	800235c <analog_sample>

	/* Sample position sensor */
	ps_sample(&comm_encoder, DT);
 80050ce:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8005100 <TIM1_UP_TIM10_IRQHandler+0x3c>
 80050d2:	480c      	ldr	r0, [pc, #48]	; (8005104 <TIM1_UP_TIM10_IRQHandler+0x40>)
 80050d4:	f7ff f8b2 	bl	800423c <ps_sample>

	/* Run Finite State Machine */
	run_fsm(&state);
 80050d8:	480b      	ldr	r0, [pc, #44]	; (8005108 <TIM1_UP_TIM10_IRQHandler+0x44>)
 80050da:	f7fd fcd1 	bl	8002a80 <run_fsm>

	/* Check for CAN messages */
	can_tx_rx();
 80050de:	f000 f833 	bl	8005148 <can_tx_rx>

	/* increment loop count */
	controller.loop_count++;
 80050e2:	4b06      	ldr	r3, [pc, #24]	; (80050fc <TIM1_UP_TIM10_IRQHandler+0x38>)
 80050e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050e8:	3301      	adds	r3, #1
 80050ea:	4a04      	ldr	r2, [pc, #16]	; (80050fc <TIM1_UP_TIM10_IRQHandler+0x38>)
 80050ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	//HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80050f0:	4806      	ldr	r0, [pc, #24]	; (800510c <TIM1_UP_TIM10_IRQHandler+0x48>)
 80050f2:	f003 fccb 	bl	8008a8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80050f6:	bf00      	nop
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20000850 	.word	0x20000850
 8005100:	37d1b717 	.word	0x37d1b717
 8005104:	20000d34 	.word	0x20000d34
 8005108:	20000d24 	.word	0x20000d24
 800510c:	20009960 	.word	0x20009960

08005110 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8005116:	4809      	ldr	r0, [pc, #36]	; (800513c <USART2_IRQHandler+0x2c>)
 8005118:	f004 fc7e 	bl	8009a18 <HAL_UART_IRQHandler>

	char c = Serial2RxBuffer[0];
 800511c:	4b08      	ldr	r3, [pc, #32]	; (8005140 <USART2_IRQHandler+0x30>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	71fb      	strb	r3, [r7, #7]
	update_fsm(&state, c);
 8005122:	79fb      	ldrb	r3, [r7, #7]
 8005124:	4619      	mov	r1, r3
 8005126:	4807      	ldr	r0, [pc, #28]	; (8005144 <USART2_IRQHandler+0x34>)
 8005128:	f7fd fe68 	bl	8002dfc <update_fsm>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800512c:	4803      	ldr	r0, [pc, #12]	; (800513c <USART2_IRQHandler+0x2c>)
 800512e:	f004 fc73 	bl	8009a18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8005132:	bf00      	nop
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	200099a8 	.word	0x200099a8
 8005140:	200098a8 	.word	0x200098a8
 8005144:	20000d24 	.word	0x20000d24

08005148 <can_tx_rx>:

/* USER CODE BEGIN 1 */

void can_tx_rx(void){
 8005148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800514a:	b095      	sub	sp, #84	; 0x54
 800514c:	af12      	add	r7, sp, #72	; 0x48

	int no_mesage = HAL_CAN_GetRxMessage(&CAN_H, CAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 800514e:	4b84      	ldr	r3, [pc, #528]	; (8005360 <can_tx_rx+0x218>)
 8005150:	4a84      	ldr	r2, [pc, #528]	; (8005364 <can_tx_rx+0x21c>)
 8005152:	2100      	movs	r1, #0
 8005154:	4884      	ldr	r0, [pc, #528]	; (8005368 <can_tx_rx+0x220>)
 8005156:	f001 faec 	bl	8006732 <HAL_CAN_GetRxMessage>
 800515a:	4603      	mov	r3, r0
 800515c:	607b      	str	r3, [r7, #4]
	if(!no_mesage){
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	f040 80f9 	bne.w	8005358 <can_tx_rx+0x210>
		uint32_t TxMailbox;
		pack_reply(&can_tx, CAN_ID,  comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR);	// Pack response
 8005166:	4b81      	ldr	r3, [pc, #516]	; (800536c <can_tx_rx+0x224>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	b2db      	uxtb	r3, r3
 800516c:	4a80      	ldr	r2, [pc, #512]	; (8005370 <can_tx_rx+0x228>)
 800516e:	ed92 7a03 	vldr	s14, [r2, #12]
 8005172:	4a80      	ldr	r2, [pc, #512]	; (8005374 <can_tx_rx+0x22c>)
 8005174:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 8005178:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800517c:	4a7c      	ldr	r2, [pc, #496]	; (8005370 <can_tx_rx+0x228>)
 800517e:	ed92 7a18 	vldr	s14, [r2, #96]	; 0x60
 8005182:	4a7c      	ldr	r2, [pc, #496]	; (8005374 <can_tx_rx+0x22c>)
 8005184:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 8005188:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800518c:	4a7a      	ldr	r2, [pc, #488]	; (8005378 <can_tx_rx+0x230>)
 800518e:	ed92 7a0e 	vldr	s14, [r2, #56]	; 0x38
 8005192:	4a78      	ldr	r2, [pc, #480]	; (8005374 <can_tx_rx+0x22c>)
 8005194:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8005198:	ee27 7a27 	vmul.f32	s14, s14, s15
 800519c:	4a75      	ldr	r2, [pc, #468]	; (8005374 <can_tx_rx+0x22c>)
 800519e:	edd2 7a11 	vldr	s15, [r2, #68]	; 0x44
 80051a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051a6:	eeb0 1a67 	vmov.f32	s2, s15
 80051aa:	eef0 0a46 	vmov.f32	s1, s12
 80051ae:	eeb0 0a66 	vmov.f32	s0, s13
 80051b2:	4619      	mov	r1, r3
 80051b4:	4871      	ldr	r0, [pc, #452]	; (800537c <can_tx_rx+0x234>)
 80051b6:	f7fc fbf9 	bl	80019ac <pack_reply>
		HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 80051ba:	463b      	mov	r3, r7
 80051bc:	4a70      	ldr	r2, [pc, #448]	; (8005380 <can_tx_rx+0x238>)
 80051be:	4971      	ldr	r1, [pc, #452]	; (8005384 <can_tx_rx+0x23c>)
 80051c0:	4869      	ldr	r0, [pc, #420]	; (8005368 <can_tx_rx+0x220>)
 80051c2:	f001 f9db 	bl	800657c <HAL_CAN_AddTxMessage>

		/* Check for special Commands */
		if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 80051c6:	4b70      	ldr	r3, [pc, #448]	; (8005388 <can_tx_rx+0x240>)
 80051c8:	785a      	ldrb	r2, [r3, #1]
 80051ca:	4b6f      	ldr	r3, [pc, #444]	; (8005388 <can_tx_rx+0x240>)
 80051cc:	789b      	ldrb	r3, [r3, #2]
 80051ce:	4013      	ands	r3, r2
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	4b6d      	ldr	r3, [pc, #436]	; (8005388 <can_tx_rx+0x240>)
 80051d4:	78db      	ldrb	r3, [r3, #3]
 80051d6:	4013      	ands	r3, r2
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	4b6b      	ldr	r3, [pc, #428]	; (8005388 <can_tx_rx+0x240>)
 80051dc:	791b      	ldrb	r3, [r3, #4]
 80051de:	4013      	ands	r3, r2
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	4b69      	ldr	r3, [pc, #420]	; (8005388 <can_tx_rx+0x240>)
 80051e4:	795b      	ldrb	r3, [r3, #5]
 80051e6:	4013      	ands	r3, r2
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	4b67      	ldr	r3, [pc, #412]	; (8005388 <can_tx_rx+0x240>)
 80051ec:	799b      	ldrb	r3, [r3, #6]
 80051ee:	4013      	ands	r3, r2
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	4b65      	ldr	r3, [pc, #404]	; (8005388 <can_tx_rx+0x240>)
 80051f4:	79db      	ldrb	r3, [r3, #7]
 80051f6:	4013      	ands	r3, r2
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2bff      	cmp	r3, #255	; 0xff
 80051fc:	bf0c      	ite	eq
 80051fe:	2301      	moveq	r3, #1
 8005200:	2300      	movne	r3, #0
 8005202:	b2da      	uxtb	r2, r3
 8005204:	4b60      	ldr	r3, [pc, #384]	; (8005388 <can_tx_rx+0x240>)
 8005206:	7a1b      	ldrb	r3, [r3, #8]
 8005208:	2bfc      	cmp	r3, #252	; 0xfc
 800520a:	bf0c      	ite	eq
 800520c:	2301      	moveq	r3, #1
 800520e:	2300      	movne	r3, #0
 8005210:	b2db      	uxtb	r3, r3
 8005212:	4013      	ands	r3, r2
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d004      	beq.n	8005224 <can_tx_rx+0xdc>
			  update_fsm(&state, MOTOR_CMD);
 800521a:	216d      	movs	r1, #109	; 0x6d
 800521c:	485b      	ldr	r0, [pc, #364]	; (800538c <can_tx_rx+0x244>)
 800521e:	f7fd fded 	bl	8002dfc <update_fsm>
			  unpack_cmd(can_rx, controller.commands);	// Unpack commands
			  controller.timeout = 0;					// Reset timeout counter
		}
	}

}
 8005222:	e099      	b.n	8005358 <can_tx_rx+0x210>
		else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFD))){
 8005224:	4b58      	ldr	r3, [pc, #352]	; (8005388 <can_tx_rx+0x240>)
 8005226:	785a      	ldrb	r2, [r3, #1]
 8005228:	4b57      	ldr	r3, [pc, #348]	; (8005388 <can_tx_rx+0x240>)
 800522a:	789b      	ldrb	r3, [r3, #2]
 800522c:	4013      	ands	r3, r2
 800522e:	b2da      	uxtb	r2, r3
 8005230:	4b55      	ldr	r3, [pc, #340]	; (8005388 <can_tx_rx+0x240>)
 8005232:	78db      	ldrb	r3, [r3, #3]
 8005234:	4013      	ands	r3, r2
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2bff      	cmp	r3, #255	; 0xff
 800523a:	bf0c      	ite	eq
 800523c:	2301      	moveq	r3, #1
 800523e:	2300      	movne	r3, #0
 8005240:	b2db      	uxtb	r3, r3
 8005242:	461a      	mov	r2, r3
 8005244:	4b50      	ldr	r3, [pc, #320]	; (8005388 <can_tx_rx+0x240>)
 8005246:	791b      	ldrb	r3, [r3, #4]
 8005248:	2bff      	cmp	r3, #255	; 0xff
 800524a:	bf0c      	ite	eq
 800524c:	2301      	moveq	r3, #1
 800524e:	2300      	movne	r3, #0
 8005250:	b2db      	uxtb	r3, r3
 8005252:	4619      	mov	r1, r3
 8005254:	4b4c      	ldr	r3, [pc, #304]	; (8005388 <can_tx_rx+0x240>)
 8005256:	795b      	ldrb	r3, [r3, #5]
 8005258:	2bff      	cmp	r3, #255	; 0xff
 800525a:	bf0c      	ite	eq
 800525c:	2301      	moveq	r3, #1
 800525e:	2300      	movne	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	fb01 f303 	mul.w	r3, r1, r3
 8005266:	4013      	ands	r3, r2
 8005268:	4a47      	ldr	r2, [pc, #284]	; (8005388 <can_tx_rx+0x240>)
 800526a:	7992      	ldrb	r2, [r2, #6]
 800526c:	2aff      	cmp	r2, #255	; 0xff
 800526e:	bf0c      	ite	eq
 8005270:	2201      	moveq	r2, #1
 8005272:	2200      	movne	r2, #0
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	4013      	ands	r3, r2
 8005278:	4a43      	ldr	r2, [pc, #268]	; (8005388 <can_tx_rx+0x240>)
 800527a:	79d2      	ldrb	r2, [r2, #7]
 800527c:	2aff      	cmp	r2, #255	; 0xff
 800527e:	bf0c      	ite	eq
 8005280:	2201      	moveq	r2, #1
 8005282:	2200      	movne	r2, #0
 8005284:	b2d2      	uxtb	r2, r2
 8005286:	4013      	ands	r3, r2
 8005288:	4a3f      	ldr	r2, [pc, #252]	; (8005388 <can_tx_rx+0x240>)
 800528a:	7a12      	ldrb	r2, [r2, #8]
 800528c:	2afd      	cmp	r2, #253	; 0xfd
 800528e:	bf0c      	ite	eq
 8005290:	2201      	moveq	r2, #1
 8005292:	2200      	movne	r2, #0
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	4013      	ands	r3, r2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d004      	beq.n	80052a6 <can_tx_rx+0x15e>
			update_fsm(&state, MENU_CMD);
 800529c:	211b      	movs	r1, #27
 800529e:	483b      	ldr	r0, [pc, #236]	; (800538c <can_tx_rx+0x244>)
 80052a0:	f7fd fdac 	bl	8002dfc <update_fsm>
}
 80052a4:	e058      	b.n	8005358 <can_tx_rx+0x210>
		else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFE))){
 80052a6:	4b38      	ldr	r3, [pc, #224]	; (8005388 <can_tx_rx+0x240>)
 80052a8:	785a      	ldrb	r2, [r3, #1]
 80052aa:	4b37      	ldr	r3, [pc, #220]	; (8005388 <can_tx_rx+0x240>)
 80052ac:	789b      	ldrb	r3, [r3, #2]
 80052ae:	4013      	ands	r3, r2
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	4b35      	ldr	r3, [pc, #212]	; (8005388 <can_tx_rx+0x240>)
 80052b4:	78db      	ldrb	r3, [r3, #3]
 80052b6:	4013      	ands	r3, r2
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2bff      	cmp	r3, #255	; 0xff
 80052bc:	bf0c      	ite	eq
 80052be:	2301      	moveq	r3, #1
 80052c0:	2300      	movne	r3, #0
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	461a      	mov	r2, r3
 80052c6:	4b30      	ldr	r3, [pc, #192]	; (8005388 <can_tx_rx+0x240>)
 80052c8:	791b      	ldrb	r3, [r3, #4]
 80052ca:	2bff      	cmp	r3, #255	; 0xff
 80052cc:	bf0c      	ite	eq
 80052ce:	2301      	moveq	r3, #1
 80052d0:	2300      	movne	r3, #0
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	4619      	mov	r1, r3
 80052d6:	4b2c      	ldr	r3, [pc, #176]	; (8005388 <can_tx_rx+0x240>)
 80052d8:	795b      	ldrb	r3, [r3, #5]
 80052da:	2bff      	cmp	r3, #255	; 0xff
 80052dc:	bf0c      	ite	eq
 80052de:	2301      	moveq	r3, #1
 80052e0:	2300      	movne	r3, #0
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	fb01 f303 	mul.w	r3, r1, r3
 80052e8:	4013      	ands	r3, r2
 80052ea:	4a27      	ldr	r2, [pc, #156]	; (8005388 <can_tx_rx+0x240>)
 80052ec:	7992      	ldrb	r2, [r2, #6]
 80052ee:	2aff      	cmp	r2, #255	; 0xff
 80052f0:	bf0c      	ite	eq
 80052f2:	2201      	moveq	r2, #1
 80052f4:	2200      	movne	r2, #0
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	4013      	ands	r3, r2
 80052fa:	4a23      	ldr	r2, [pc, #140]	; (8005388 <can_tx_rx+0x240>)
 80052fc:	79d2      	ldrb	r2, [r2, #7]
 80052fe:	2aff      	cmp	r2, #255	; 0xff
 8005300:	bf0c      	ite	eq
 8005302:	2201      	moveq	r2, #1
 8005304:	2200      	movne	r2, #0
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	4013      	ands	r3, r2
 800530a:	4a1f      	ldr	r2, [pc, #124]	; (8005388 <can_tx_rx+0x240>)
 800530c:	7a12      	ldrb	r2, [r2, #8]
 800530e:	2afe      	cmp	r2, #254	; 0xfe
 8005310:	bf0c      	ite	eq
 8005312:	2201      	moveq	r2, #1
 8005314:	2200      	movne	r2, #0
 8005316:	b2d2      	uxtb	r2, r2
 8005318:	4013      	ands	r3, r2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d004      	beq.n	8005328 <can_tx_rx+0x1e0>
			  update_fsm(&state, ZERO_CMD);
 800531e:	217a      	movs	r1, #122	; 0x7a
 8005320:	481a      	ldr	r0, [pc, #104]	; (800538c <can_tx_rx+0x244>)
 8005322:	f7fd fd6b 	bl	8002dfc <update_fsm>
}
 8005326:	e017      	b.n	8005358 <can_tx_rx+0x210>
			  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 8005328:	4e17      	ldr	r6, [pc, #92]	; (8005388 <can_tx_rx+0x240>)
 800532a:	4b19      	ldr	r3, [pc, #100]	; (8005390 <can_tx_rx+0x248>)
 800532c:	9310      	str	r3, [sp, #64]	; 0x40
 800532e:	466d      	mov	r5, sp
 8005330:	f106 0410 	add.w	r4, r6, #16
 8005334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800533a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800533c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800533e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005340:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005344:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005348:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800534c:	f7fc fba6 	bl	8001a9c <unpack_cmd>
			  controller.timeout = 0;					// Reset timeout counter
 8005350:	4b09      	ldr	r3, [pc, #36]	; (8005378 <can_tx_rx+0x230>)
 8005352:	2200      	movs	r2, #0
 8005354:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005360:	20009859 	.word	0x20009859
 8005364:	20009864 	.word	0x20009864
 8005368:	20000314 	.word	0x20000314
 800536c:	2000043c 	.word	0x2000043c
 8005370:	20000d34 	.word	0x20000d34
 8005374:	2000033c 	.word	0x2000033c
 8005378:	20000850 	.word	0x20000850
 800537c:	20009838 	.word	0x20009838
 8005380:	20009839 	.word	0x20009839
 8005384:	20009840 	.word	0x20009840
 8005388:	20009858 	.word	0x20009858
 800538c:	20000d24 	.word	0x20000d24
 8005390:	200008f4 	.word	0x200008f4

08005394 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0
	return 1;
 8005398:	2301      	movs	r3, #1
}
 800539a:	4618      	mov	r0, r3
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <_kill>:

int _kill(int pid, int sig)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80053ae:	f005 faa3 	bl	800a8f8 <__errno>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2216      	movs	r2, #22
 80053b6:	601a      	str	r2, [r3, #0]
	return -1;
 80053b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <_exit>:

void _exit (int status)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80053cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7ff ffe7 	bl	80053a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80053d6:	e7fe      	b.n	80053d6 <_exit+0x12>

080053d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053e4:	2300      	movs	r3, #0
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	e00a      	b.n	8005400 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80053ea:	f3af 8000 	nop.w
 80053ee:	4601      	mov	r1, r0
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	60ba      	str	r2, [r7, #8]
 80053f6:	b2ca      	uxtb	r2, r1
 80053f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	3301      	adds	r3, #1
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	429a      	cmp	r2, r3
 8005406:	dbf0      	blt.n	80053ea <_read+0x12>
	}

return len;
 8005408:	687b      	ldr	r3, [r7, #4]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b086      	sub	sp, #24
 8005416:	af00      	add	r7, sp, #0
 8005418:	60f8      	str	r0, [r7, #12]
 800541a:	60b9      	str	r1, [r7, #8]
 800541c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800541e:	2300      	movs	r3, #0
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	e009      	b.n	8005438 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	60ba      	str	r2, [r7, #8]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	4618      	mov	r0, r3
 800542e:	f000 fa17 	bl	8005860 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	3301      	adds	r3, #1
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	429a      	cmp	r2, r3
 800543e:	dbf1      	blt.n	8005424 <_write+0x12>
	}
	return len;
 8005440:	687b      	ldr	r3, [r7, #4]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3718      	adds	r7, #24
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <_close>:

int _close(int file)
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
	return -1;
 8005452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005456:	4618      	mov	r0, r3
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005462:	b480      	push	{r7}
 8005464:	b083      	sub	sp, #12
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005472:	605a      	str	r2, [r3, #4]
	return 0;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <_isatty>:

int _isatty(int file)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
	return 1;
 800548a:	2301      	movs	r3, #1
}
 800548c:	4618      	mov	r0, r3
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
	return 0;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
	...

080054b4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80054bc:	4b11      	ldr	r3, [pc, #68]	; (8005504 <_sbrk+0x50>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d102      	bne.n	80054ca <_sbrk+0x16>
		heap_end = &end;
 80054c4:	4b0f      	ldr	r3, [pc, #60]	; (8005504 <_sbrk+0x50>)
 80054c6:	4a10      	ldr	r2, [pc, #64]	; (8005508 <_sbrk+0x54>)
 80054c8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80054ca:	4b0e      	ldr	r3, [pc, #56]	; (8005504 <_sbrk+0x50>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80054d0:	4b0c      	ldr	r3, [pc, #48]	; (8005504 <_sbrk+0x50>)
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4413      	add	r3, r2
 80054d8:	466a      	mov	r2, sp
 80054da:	4293      	cmp	r3, r2
 80054dc:	d907      	bls.n	80054ee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80054de:	f005 fa0b 	bl	800a8f8 <__errno>
 80054e2:	4603      	mov	r3, r0
 80054e4:	220c      	movs	r2, #12
 80054e6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80054e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054ec:	e006      	b.n	80054fc <_sbrk+0x48>
	}

	heap_end += incr;
 80054ee:	4b05      	ldr	r3, [pc, #20]	; (8005504 <_sbrk+0x50>)
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4413      	add	r3, r2
 80054f6:	4a03      	ldr	r2, [pc, #12]	; (8005504 <_sbrk+0x50>)
 80054f8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80054fa:	68fb      	ldr	r3, [r7, #12]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	2000995c 	.word	0x2000995c
 8005508:	20009a00 	.word	0x20009a00

0800550c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005510:	4b08      	ldr	r3, [pc, #32]	; (8005534 <SystemInit+0x28>)
 8005512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005516:	4a07      	ldr	r2, [pc, #28]	; (8005534 <SystemInit+0x28>)
 8005518:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800551c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005520:	4b04      	ldr	r3, [pc, #16]	; (8005534 <SystemInit+0x28>)
 8005522:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005526:	609a      	str	r2, [r3, #8]
#endif
}
 8005528:	bf00      	nop
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	e000ed00 	.word	0xe000ed00

08005538 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b096      	sub	sp, #88	; 0x58
 800553c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800553e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	605a      	str	r2, [r3, #4]
 8005548:	609a      	str	r2, [r3, #8]
 800554a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800554c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005550:	2200      	movs	r2, #0
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800555a:	2200      	movs	r2, #0
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	605a      	str	r2, [r3, #4]
 8005560:	609a      	str	r2, [r3, #8]
 8005562:	60da      	str	r2, [r3, #12]
 8005564:	611a      	str	r2, [r3, #16]
 8005566:	615a      	str	r2, [r3, #20]
 8005568:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800556a:	1d3b      	adds	r3, r7, #4
 800556c:	2220      	movs	r2, #32
 800556e:	2100      	movs	r1, #0
 8005570:	4618      	mov	r0, r3
 8005572:	f005 f9f9 	bl	800a968 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005576:	4b4a      	ldr	r3, [pc, #296]	; (80056a0 <MX_TIM1_Init+0x168>)
 8005578:	4a4a      	ldr	r2, [pc, #296]	; (80056a4 <MX_TIM1_Init+0x16c>)
 800557a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800557c:	4b48      	ldr	r3, [pc, #288]	; (80056a0 <MX_TIM1_Init+0x168>)
 800557e:	2200      	movs	r2, #0
 8005580:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8005582:	4b47      	ldr	r3, [pc, #284]	; (80056a0 <MX_TIM1_Init+0x168>)
 8005584:	2220      	movs	r2, #32
 8005586:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0x8CA;
 8005588:	4b45      	ldr	r3, [pc, #276]	; (80056a0 <MX_TIM1_Init+0x168>)
 800558a:	f640 02ca 	movw	r2, #2250	; 0x8ca
 800558e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005590:	4b43      	ldr	r3, [pc, #268]	; (80056a0 <MX_TIM1_Init+0x168>)
 8005592:	2200      	movs	r2, #0
 8005594:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8005596:	4b42      	ldr	r3, [pc, #264]	; (80056a0 <MX_TIM1_Init+0x168>)
 8005598:	2201      	movs	r2, #1
 800559a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800559c:	4b40      	ldr	r3, [pc, #256]	; (80056a0 <MX_TIM1_Init+0x168>)
 800559e:	2280      	movs	r2, #128	; 0x80
 80055a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80055a2:	483f      	ldr	r0, [pc, #252]	; (80056a0 <MX_TIM1_Init+0x168>)
 80055a4:	f003 f890 	bl	80086c8 <HAL_TIM_Base_Init>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80055ae:	f7fe fd1f 	bl	8003ff0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80055b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80055b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80055bc:	4619      	mov	r1, r3
 80055be:	4838      	ldr	r0, [pc, #224]	; (80056a0 <MX_TIM1_Init+0x168>)
 80055c0:	f003 fc2e 	bl	8008e20 <HAL_TIM_ConfigClockSource>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80055ca:	f7fe fd11 	bl	8003ff0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80055ce:	4834      	ldr	r0, [pc, #208]	; (80056a0 <MX_TIM1_Init+0x168>)
 80055d0:	f003 f93a 	bl	8008848 <HAL_TIM_PWM_Init>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80055da:	f7fe fd09 	bl	8003ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055de:	2300      	movs	r3, #0
 80055e0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055e2:	2300      	movs	r3, #0
 80055e4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80055e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80055ea:	4619      	mov	r1, r3
 80055ec:	482c      	ldr	r0, [pc, #176]	; (80056a0 <MX_TIM1_Init+0x168>)
 80055ee:	f004 f821 	bl	8009634 <HAL_TIMEx_MasterConfigSynchronization>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80055f8:	f7fe fcfa 	bl	8003ff0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80055fc:	2360      	movs	r3, #96	; 0x60
 80055fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8005600:	2300      	movs	r3, #0
 8005602:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8005604:	2302      	movs	r3, #2
 8005606:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005608:	2300      	movs	r3, #0
 800560a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800560c:	2304      	movs	r3, #4
 800560e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005610:	2300      	movs	r3, #0
 8005612:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005614:	2300      	movs	r3, #0
 8005616:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800561c:	2200      	movs	r2, #0
 800561e:	4619      	mov	r1, r3
 8005620:	481f      	ldr	r0, [pc, #124]	; (80056a0 <MX_TIM1_Init+0x168>)
 8005622:	f003 fb3b 	bl	8008c9c <HAL_TIM_PWM_ConfigChannel>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800562c:	f7fe fce0 	bl	8003ff0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005634:	2204      	movs	r2, #4
 8005636:	4619      	mov	r1, r3
 8005638:	4819      	ldr	r0, [pc, #100]	; (80056a0 <MX_TIM1_Init+0x168>)
 800563a:	f003 fb2f 	bl	8008c9c <HAL_TIM_PWM_ConfigChannel>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d001      	beq.n	8005648 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8005644:	f7fe fcd4 	bl	8003ff0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800564c:	2208      	movs	r2, #8
 800564e:	4619      	mov	r1, r3
 8005650:	4813      	ldr	r0, [pc, #76]	; (80056a0 <MX_TIM1_Init+0x168>)
 8005652:	f003 fb23 	bl	8008c9c <HAL_TIM_PWM_ConfigChannel>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800565c:	f7fe fcc8 	bl	8003ff0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005660:	2300      	movs	r3, #0
 8005662:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005664:	2300      	movs	r3, #0
 8005666:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005668:	2300      	movs	r3, #0
 800566a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800566c:	2300      	movs	r3, #0
 800566e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005670:	2300      	movs	r3, #0
 8005672:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005674:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005678:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800567a:	2300      	movs	r3, #0
 800567c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800567e:	1d3b      	adds	r3, r7, #4
 8005680:	4619      	mov	r1, r3
 8005682:	4807      	ldr	r0, [pc, #28]	; (80056a0 <MX_TIM1_Init+0x168>)
 8005684:	f004 f852 	bl	800972c <HAL_TIMEx_ConfigBreakDeadTime>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800568e:	f7fe fcaf 	bl	8003ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005692:	4803      	ldr	r0, [pc, #12]	; (80056a0 <MX_TIM1_Init+0x168>)
 8005694:	f000 f830 	bl	80056f8 <HAL_TIM_MspPostInit>

}
 8005698:	bf00      	nop
 800569a:	3758      	adds	r7, #88	; 0x58
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	20009960 	.word	0x20009960
 80056a4:	40010000 	.word	0x40010000

080056a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a0e      	ldr	r2, [pc, #56]	; (80056f0 <HAL_TIM_Base_MspInit+0x48>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d115      	bne.n	80056e6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80056ba:	2300      	movs	r3, #0
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	4b0d      	ldr	r3, [pc, #52]	; (80056f4 <HAL_TIM_Base_MspInit+0x4c>)
 80056c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c2:	4a0c      	ldr	r2, [pc, #48]	; (80056f4 <HAL_TIM_Base_MspInit+0x4c>)
 80056c4:	f043 0301 	orr.w	r3, r3, #1
 80056c8:	6453      	str	r3, [r2, #68]	; 0x44
 80056ca:	4b0a      	ldr	r3, [pc, #40]	; (80056f4 <HAL_TIM_Base_MspInit+0x4c>)
 80056cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80056d6:	2200      	movs	r2, #0
 80056d8:	2100      	movs	r1, #0
 80056da:	2019      	movs	r0, #25
 80056dc:	f001 fc4f 	bl	8006f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80056e0:	2019      	movs	r0, #25
 80056e2:	f001 fc68 	bl	8006fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80056e6:	bf00      	nop
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	40010000 	.word	0x40010000
 80056f4:	40023800 	.word	0x40023800

080056f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005700:	f107 030c 	add.w	r3, r7, #12
 8005704:	2200      	movs	r2, #0
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	605a      	str	r2, [r3, #4]
 800570a:	609a      	str	r2, [r3, #8]
 800570c:	60da      	str	r2, [r3, #12]
 800570e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a12      	ldr	r2, [pc, #72]	; (8005760 <HAL_TIM_MspPostInit+0x68>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d11e      	bne.n	8005758 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800571a:	2300      	movs	r3, #0
 800571c:	60bb      	str	r3, [r7, #8]
 800571e:	4b11      	ldr	r3, [pc, #68]	; (8005764 <HAL_TIM_MspPostInit+0x6c>)
 8005720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005722:	4a10      	ldr	r2, [pc, #64]	; (8005764 <HAL_TIM_MspPostInit+0x6c>)
 8005724:	f043 0301 	orr.w	r3, r3, #1
 8005728:	6313      	str	r3, [r2, #48]	; 0x30
 800572a:	4b0e      	ldr	r3, [pc, #56]	; (8005764 <HAL_TIM_MspPostInit+0x6c>)
 800572c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	60bb      	str	r3, [r7, #8]
 8005734:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8005736:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800573a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800573c:	2302      	movs	r3, #2
 800573e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005740:	2300      	movs	r3, #0
 8005742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005744:	2303      	movs	r3, #3
 8005746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005748:	2301      	movs	r3, #1
 800574a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800574c:	f107 030c 	add.w	r3, r7, #12
 8005750:	4619      	mov	r1, r3
 8005752:	4805      	ldr	r0, [pc, #20]	; (8005768 <HAL_TIM_MspPostInit+0x70>)
 8005754:	f001 fcdc 	bl	8007110 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005758:	bf00      	nop
 800575a:	3720      	adds	r7, #32
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40010000 	.word	0x40010000
 8005764:	40023800 	.word	0x40023800
 8005768:	40020000 	.word	0x40020000

0800576c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005770:	4b11      	ldr	r3, [pc, #68]	; (80057b8 <MX_USART2_UART_Init+0x4c>)
 8005772:	4a12      	ldr	r2, [pc, #72]	; (80057bc <MX_USART2_UART_Init+0x50>)
 8005774:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005776:	4b10      	ldr	r3, [pc, #64]	; (80057b8 <MX_USART2_UART_Init+0x4c>)
 8005778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800577c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800577e:	4b0e      	ldr	r3, [pc, #56]	; (80057b8 <MX_USART2_UART_Init+0x4c>)
 8005780:	2200      	movs	r2, #0
 8005782:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005784:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <MX_USART2_UART_Init+0x4c>)
 8005786:	2200      	movs	r2, #0
 8005788:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800578a:	4b0b      	ldr	r3, [pc, #44]	; (80057b8 <MX_USART2_UART_Init+0x4c>)
 800578c:	2200      	movs	r2, #0
 800578e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005790:	4b09      	ldr	r3, [pc, #36]	; (80057b8 <MX_USART2_UART_Init+0x4c>)
 8005792:	220c      	movs	r2, #12
 8005794:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005796:	4b08      	ldr	r3, [pc, #32]	; (80057b8 <MX_USART2_UART_Init+0x4c>)
 8005798:	2200      	movs	r2, #0
 800579a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800579c:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <MX_USART2_UART_Init+0x4c>)
 800579e:	2200      	movs	r2, #0
 80057a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80057a2:	4805      	ldr	r0, [pc, #20]	; (80057b8 <MX_USART2_UART_Init+0x4c>)
 80057a4:	f004 f828 	bl	80097f8 <HAL_UART_Init>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80057ae:	f7fe fc1f 	bl	8003ff0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80057b2:	bf00      	nop
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	200099a8 	.word	0x200099a8
 80057bc:	40004400 	.word	0x40004400

080057c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b08a      	sub	sp, #40	; 0x28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057c8:	f107 0314 	add.w	r3, r7, #20
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	605a      	str	r2, [r3, #4]
 80057d2:	609a      	str	r2, [r3, #8]
 80057d4:	60da      	str	r2, [r3, #12]
 80057d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a1d      	ldr	r2, [pc, #116]	; (8005854 <HAL_UART_MspInit+0x94>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d133      	bne.n	800584a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80057e2:	2300      	movs	r3, #0
 80057e4:	613b      	str	r3, [r7, #16]
 80057e6:	4b1c      	ldr	r3, [pc, #112]	; (8005858 <HAL_UART_MspInit+0x98>)
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	4a1b      	ldr	r2, [pc, #108]	; (8005858 <HAL_UART_MspInit+0x98>)
 80057ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057f0:	6413      	str	r3, [r2, #64]	; 0x40
 80057f2:	4b19      	ldr	r3, [pc, #100]	; (8005858 <HAL_UART_MspInit+0x98>)
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fa:	613b      	str	r3, [r7, #16]
 80057fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057fe:	2300      	movs	r3, #0
 8005800:	60fb      	str	r3, [r7, #12]
 8005802:	4b15      	ldr	r3, [pc, #84]	; (8005858 <HAL_UART_MspInit+0x98>)
 8005804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005806:	4a14      	ldr	r2, [pc, #80]	; (8005858 <HAL_UART_MspInit+0x98>)
 8005808:	f043 0301 	orr.w	r3, r3, #1
 800580c:	6313      	str	r3, [r2, #48]	; 0x30
 800580e:	4b12      	ldr	r3, [pc, #72]	; (8005858 <HAL_UART_MspInit+0x98>)
 8005810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	60fb      	str	r3, [r7, #12]
 8005818:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800581a:	230c      	movs	r3, #12
 800581c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800581e:	2302      	movs	r3, #2
 8005820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005822:	2300      	movs	r3, #0
 8005824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005826:	2303      	movs	r3, #3
 8005828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800582a:	2307      	movs	r3, #7
 800582c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800582e:	f107 0314 	add.w	r3, r7, #20
 8005832:	4619      	mov	r1, r3
 8005834:	4809      	ldr	r0, [pc, #36]	; (800585c <HAL_UART_MspInit+0x9c>)
 8005836:	f001 fc6b 	bl	8007110 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800583a:	2200      	movs	r2, #0
 800583c:	2100      	movs	r1, #0
 800583e:	2026      	movs	r0, #38	; 0x26
 8005840:	f001 fb9d 	bl	8006f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005844:	2026      	movs	r0, #38	; 0x26
 8005846:	f001 fbb6 	bl	8006fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800584a:	bf00      	nop
 800584c:	3728      	adds	r7, #40	; 0x28
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	40004400 	.word	0x40004400
 8005858:	40023800 	.word	0x40023800
 800585c:	40020000 	.word	0x40020000

08005860 <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8005868:	1d39      	adds	r1, r7, #4
 800586a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800586e:	2201      	movs	r2, #1
 8005870:	4803      	ldr	r0, [pc, #12]	; (8005880 <__io_putchar+0x20>)
 8005872:	f004 f80e 	bl	8009892 <HAL_UART_Transmit>
return 0;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	200099a8 	.word	0x200099a8

08005884 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 800588c:	2201      	movs	r2, #1
 800588e:	4904      	ldr	r1, [pc, #16]	; (80058a0 <HAL_UART_RxCpltCallback+0x1c>)
 8005890:	4804      	ldr	r0, [pc, #16]	; (80058a4 <HAL_UART_RxCpltCallback+0x20>)
 8005892:	f004 f890 	bl	80099b6 <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005896:	bf00      	nop
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	200098a8 	.word	0x200098a8
 80058a4:	200099a8 	.word	0x200099a8

080058a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80058a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80058e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80058ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80058ae:	e003      	b.n	80058b8 <LoopCopyDataInit>

080058b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80058b0:	4b0c      	ldr	r3, [pc, #48]	; (80058e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80058b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80058b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80058b6:	3104      	adds	r1, #4

080058b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80058b8:	480b      	ldr	r0, [pc, #44]	; (80058e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80058ba:	4b0c      	ldr	r3, [pc, #48]	; (80058ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80058bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80058be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80058c0:	d3f6      	bcc.n	80058b0 <CopyDataInit>
  ldr  r2, =_sbss
 80058c2:	4a0b      	ldr	r2, [pc, #44]	; (80058f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80058c4:	e002      	b.n	80058cc <LoopFillZerobss>

080058c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80058c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80058c8:	f842 3b04 	str.w	r3, [r2], #4

080058cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80058cc:	4b09      	ldr	r3, [pc, #36]	; (80058f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80058ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80058d0:	d3f9      	bcc.n	80058c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80058d2:	f7ff fe1b 	bl	800550c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80058d6:	f005 f815 	bl	800a904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80058da:	f7fe f83b 	bl	8003954 <main>
  bx  lr    
 80058de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80058e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80058e4:	08011690 	.word	0x08011690
  ldr  r0, =_sdata
 80058e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80058ec:	20000220 	.word	0x20000220
  ldr  r2, =_sbss
 80058f0:	20000220 	.word	0x20000220
  ldr  r3, = _ebss
 80058f4:	20009a00 	.word	0x20009a00

080058f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80058f8:	e7fe      	b.n	80058f8 <ADC_IRQHandler>
	...

080058fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005900:	4b0e      	ldr	r3, [pc, #56]	; (800593c <HAL_Init+0x40>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a0d      	ldr	r2, [pc, #52]	; (800593c <HAL_Init+0x40>)
 8005906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800590a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800590c:	4b0b      	ldr	r3, [pc, #44]	; (800593c <HAL_Init+0x40>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a0a      	ldr	r2, [pc, #40]	; (800593c <HAL_Init+0x40>)
 8005912:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005916:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005918:	4b08      	ldr	r3, [pc, #32]	; (800593c <HAL_Init+0x40>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a07      	ldr	r2, [pc, #28]	; (800593c <HAL_Init+0x40>)
 800591e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005922:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005924:	2003      	movs	r0, #3
 8005926:	f001 fb1f 	bl	8006f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800592a:	2000      	movs	r0, #0
 800592c:	f000 f808 	bl	8005940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005930:	f7ff fa4e 	bl	8004dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	40023c00 	.word	0x40023c00

08005940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005948:	4b12      	ldr	r3, [pc, #72]	; (8005994 <HAL_InitTick+0x54>)
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	4b12      	ldr	r3, [pc, #72]	; (8005998 <HAL_InitTick+0x58>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	4619      	mov	r1, r3
 8005952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005956:	fbb3 f3f1 	udiv	r3, r3, r1
 800595a:	fbb2 f3f3 	udiv	r3, r2, r3
 800595e:	4618      	mov	r0, r3
 8005960:	f001 fb37 	bl	8006fd2 <HAL_SYSTICK_Config>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e00e      	b.n	800598c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b0f      	cmp	r3, #15
 8005972:	d80a      	bhi.n	800598a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005974:	2200      	movs	r2, #0
 8005976:	6879      	ldr	r1, [r7, #4]
 8005978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800597c:	f001 faff 	bl	8006f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005980:	4a06      	ldr	r2, [pc, #24]	; (800599c <HAL_InitTick+0x5c>)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	e000      	b.n	800598c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
}
 800598c:	4618      	mov	r0, r3
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20000040 	.word	0x20000040
 8005998:	20000048 	.word	0x20000048
 800599c:	20000044 	.word	0x20000044

080059a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80059a4:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <HAL_IncTick+0x20>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	461a      	mov	r2, r3
 80059aa:	4b06      	ldr	r3, [pc, #24]	; (80059c4 <HAL_IncTick+0x24>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4413      	add	r3, r2
 80059b0:	4a04      	ldr	r2, [pc, #16]	; (80059c4 <HAL_IncTick+0x24>)
 80059b2:	6013      	str	r3, [r2, #0]
}
 80059b4:	bf00      	nop
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	20000048 	.word	0x20000048
 80059c4:	200099ec 	.word	0x200099ec

080059c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059c8:	b480      	push	{r7}
 80059ca:	af00      	add	r7, sp, #0
  return uwTick;
 80059cc:	4b03      	ldr	r3, [pc, #12]	; (80059dc <HAL_GetTick+0x14>)
 80059ce:	681b      	ldr	r3, [r3, #0]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	200099ec 	.word	0x200099ec

080059e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80059e8:	f7ff ffee 	bl	80059c8 <HAL_GetTick>
 80059ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059f8:	d005      	beq.n	8005a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80059fa:	4b0a      	ldr	r3, [pc, #40]	; (8005a24 <HAL_Delay+0x44>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	461a      	mov	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4413      	add	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005a06:	bf00      	nop
 8005a08:	f7ff ffde 	bl	80059c8 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d8f7      	bhi.n	8005a08 <HAL_Delay+0x28>
  {
  }
}
 8005a18:	bf00      	nop
 8005a1a:	bf00      	nop
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	20000048 	.word	0x20000048

08005a28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e033      	b.n	8005aa6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d109      	bne.n	8005a5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7fb fbf4 	bl	8001234 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	f003 0310 	and.w	r3, r3, #16
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d118      	bne.n	8005a98 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005a6e:	f023 0302 	bic.w	r3, r3, #2
 8005a72:	f043 0202 	orr.w	r2, r3, #2
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fa1c 	bl	8005eb8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8a:	f023 0303 	bic.w	r3, r3, #3
 8005a8e:	f043 0201 	orr.w	r2, r3, #1
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	641a      	str	r2, [r3, #64]	; 0x40
 8005a96:	e001      	b.n	8005a9c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
	...

08005ab0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d101      	bne.n	8005aca <HAL_ADC_Start+0x1a>
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	e0b2      	b.n	8005c30 <HAL_ADC_Start+0x180>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d018      	beq.n	8005b12 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 0201 	orr.w	r2, r2, #1
 8005aee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005af0:	4b52      	ldr	r3, [pc, #328]	; (8005c3c <HAL_ADC_Start+0x18c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a52      	ldr	r2, [pc, #328]	; (8005c40 <HAL_ADC_Start+0x190>)
 8005af6:	fba2 2303 	umull	r2, r3, r2, r3
 8005afa:	0c9a      	lsrs	r2, r3, #18
 8005afc:	4613      	mov	r3, r2
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	4413      	add	r3, r2
 8005b02:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005b04:	e002      	b.n	8005b0c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1f9      	bne.n	8005b06 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d17a      	bne.n	8005c16 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b24:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005b28:	f023 0301 	bic.w	r3, r3, #1
 8005b2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d007      	beq.n	8005b52 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005b4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b5e:	d106      	bne.n	8005b6e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b64:	f023 0206 	bic.w	r2, r3, #6
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	645a      	str	r2, [r3, #68]	; 0x44
 8005b6c:	e002      	b.n	8005b74 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b7c:	4b31      	ldr	r3, [pc, #196]	; (8005c44 <HAL_ADC_Start+0x194>)
 8005b7e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005b88:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f003 031f 	and.w	r3, r3, #31
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d12a      	bne.n	8005bec <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a2b      	ldr	r2, [pc, #172]	; (8005c48 <HAL_ADC_Start+0x198>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d015      	beq.n	8005bcc <HAL_ADC_Start+0x11c>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a29      	ldr	r2, [pc, #164]	; (8005c4c <HAL_ADC_Start+0x19c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d105      	bne.n	8005bb6 <HAL_ADC_Start+0x106>
 8005baa:	4b26      	ldr	r3, [pc, #152]	; (8005c44 <HAL_ADC_Start+0x194>)
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f003 031f 	and.w	r3, r3, #31
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00a      	beq.n	8005bcc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a25      	ldr	r2, [pc, #148]	; (8005c50 <HAL_ADC_Start+0x1a0>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d136      	bne.n	8005c2e <HAL_ADC_Start+0x17e>
 8005bc0:	4b20      	ldr	r3, [pc, #128]	; (8005c44 <HAL_ADC_Start+0x194>)
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f003 0310 	and.w	r3, r3, #16
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d130      	bne.n	8005c2e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d129      	bne.n	8005c2e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005be8:	609a      	str	r2, [r3, #8]
 8005bea:	e020      	b.n	8005c2e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a15      	ldr	r2, [pc, #84]	; (8005c48 <HAL_ADC_Start+0x198>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d11b      	bne.n	8005c2e <HAL_ADC_Start+0x17e>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d114      	bne.n	8005c2e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005c12:	609a      	str	r2, [r3, #8]
 8005c14:	e00b      	b.n	8005c2e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	f043 0210 	orr.w	r2, r3, #16
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c26:	f043 0201 	orr.w	r2, r3, #1
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	20000040 	.word	0x20000040
 8005c40:	431bde83 	.word	0x431bde83
 8005c44:	40012300 	.word	0x40012300
 8005c48:	40012000 	.word	0x40012000
 8005c4c:	40012100 	.word	0x40012100
 8005c50:	40012200 	.word	0x40012200

08005c54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d101      	bne.n	8005c70 <HAL_ADC_ConfigChannel+0x1c>
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	e113      	b.n	8005e98 <HAL_ADC_ConfigChannel+0x244>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b09      	cmp	r3, #9
 8005c7e:	d925      	bls.n	8005ccc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68d9      	ldr	r1, [r3, #12]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	4613      	mov	r3, r2
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	4413      	add	r3, r2
 8005c94:	3b1e      	subs	r3, #30
 8005c96:	2207      	movs	r2, #7
 8005c98:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9c:	43da      	mvns	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	400a      	ands	r2, r1
 8005ca4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68d9      	ldr	r1, [r3, #12]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	689a      	ldr	r2, [r3, #8]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	4603      	mov	r3, r0
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	4403      	add	r3, r0
 8005cbe:	3b1e      	subs	r3, #30
 8005cc0:	409a      	lsls	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	60da      	str	r2, [r3, #12]
 8005cca:	e022      	b.n	8005d12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6919      	ldr	r1, [r3, #16]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	461a      	mov	r2, r3
 8005cda:	4613      	mov	r3, r2
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	4413      	add	r3, r2
 8005ce0:	2207      	movs	r2, #7
 8005ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce6:	43da      	mvns	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	400a      	ands	r2, r1
 8005cee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6919      	ldr	r1, [r3, #16]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	4618      	mov	r0, r3
 8005d02:	4603      	mov	r3, r0
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	4403      	add	r3, r0
 8005d08:	409a      	lsls	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	2b06      	cmp	r3, #6
 8005d18:	d824      	bhi.n	8005d64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	3b05      	subs	r3, #5
 8005d2c:	221f      	movs	r2, #31
 8005d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d32:	43da      	mvns	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	400a      	ands	r2, r1
 8005d3a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	4618      	mov	r0, r3
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	3b05      	subs	r3, #5
 8005d56:	fa00 f203 	lsl.w	r2, r0, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	635a      	str	r2, [r3, #52]	; 0x34
 8005d62:	e04c      	b.n	8005dfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2b0c      	cmp	r3, #12
 8005d6a:	d824      	bhi.n	8005db6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	4613      	mov	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	3b23      	subs	r3, #35	; 0x23
 8005d7e:	221f      	movs	r2, #31
 8005d80:	fa02 f303 	lsl.w	r3, r2, r3
 8005d84:	43da      	mvns	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	400a      	ands	r2, r1
 8005d8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	4613      	mov	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	3b23      	subs	r3, #35	; 0x23
 8005da8:	fa00 f203 	lsl.w	r2, r0, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	631a      	str	r2, [r3, #48]	; 0x30
 8005db4:	e023      	b.n	8005dfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	3b41      	subs	r3, #65	; 0x41
 8005dc8:	221f      	movs	r2, #31
 8005dca:	fa02 f303 	lsl.w	r3, r2, r3
 8005dce:	43da      	mvns	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	400a      	ands	r2, r1
 8005dd6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	4618      	mov	r0, r3
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	4613      	mov	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	3b41      	subs	r3, #65	; 0x41
 8005df2:	fa00 f203 	lsl.w	r2, r0, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005dfe:	4b29      	ldr	r3, [pc, #164]	; (8005ea4 <HAL_ADC_ConfigChannel+0x250>)
 8005e00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a28      	ldr	r2, [pc, #160]	; (8005ea8 <HAL_ADC_ConfigChannel+0x254>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d10f      	bne.n	8005e2c <HAL_ADC_ConfigChannel+0x1d8>
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b12      	cmp	r3, #18
 8005e12:	d10b      	bne.n	8005e2c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a1d      	ldr	r2, [pc, #116]	; (8005ea8 <HAL_ADC_ConfigChannel+0x254>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d12b      	bne.n	8005e8e <HAL_ADC_ConfigChannel+0x23a>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a1c      	ldr	r2, [pc, #112]	; (8005eac <HAL_ADC_ConfigChannel+0x258>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d003      	beq.n	8005e48 <HAL_ADC_ConfigChannel+0x1f4>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b11      	cmp	r3, #17
 8005e46:	d122      	bne.n	8005e8e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a11      	ldr	r2, [pc, #68]	; (8005eac <HAL_ADC_ConfigChannel+0x258>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d111      	bne.n	8005e8e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005e6a:	4b11      	ldr	r3, [pc, #68]	; (8005eb0 <HAL_ADC_ConfigChannel+0x25c>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a11      	ldr	r2, [pc, #68]	; (8005eb4 <HAL_ADC_ConfigChannel+0x260>)
 8005e70:	fba2 2303 	umull	r2, r3, r2, r3
 8005e74:	0c9a      	lsrs	r2, r3, #18
 8005e76:	4613      	mov	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005e80:	e002      	b.n	8005e88 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	3b01      	subs	r3, #1
 8005e86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1f9      	bne.n	8005e82 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	40012300 	.word	0x40012300
 8005ea8:	40012000 	.word	0x40012000
 8005eac:	10000012 	.word	0x10000012
 8005eb0:	20000040 	.word	0x20000040
 8005eb4:	431bde83 	.word	0x431bde83

08005eb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ec0:	4b79      	ldr	r3, [pc, #484]	; (80060a8 <ADC_Init+0x1f0>)
 8005ec2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	431a      	orrs	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005eec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6859      	ldr	r1, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	021a      	lsls	r2, r3, #8
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005f10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6859      	ldr	r1, [r3, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6899      	ldr	r1, [r3, #8]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4a:	4a58      	ldr	r2, [pc, #352]	; (80060ac <ADC_Init+0x1f4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d022      	beq.n	8005f96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6899      	ldr	r1, [r3, #8]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005f80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6899      	ldr	r1, [r3, #8]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	609a      	str	r2, [r3, #8]
 8005f94:	e00f      	b.n	8005fb6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005fa4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689a      	ldr	r2, [r3, #8]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005fb4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 0202 	bic.w	r2, r2, #2
 8005fc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6899      	ldr	r1, [r3, #8]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	7e1b      	ldrb	r3, [r3, #24]
 8005fd0:	005a      	lsls	r2, r3, #1
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d01b      	beq.n	800601c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ff2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006002:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6859      	ldr	r1, [r3, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	3b01      	subs	r3, #1
 8006010:	035a      	lsls	r2, r3, #13
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	605a      	str	r2, [r3, #4]
 800601a:	e007      	b.n	800602c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800602a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800603a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	3b01      	subs	r3, #1
 8006048:	051a      	lsls	r2, r3, #20
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006060:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6899      	ldr	r1, [r3, #8]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800606e:	025a      	lsls	r2, r3, #9
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689a      	ldr	r2, [r3, #8]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006086:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6899      	ldr	r1, [r3, #8]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	029a      	lsls	r2, r3, #10
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	430a      	orrs	r2, r1
 800609a:	609a      	str	r2, [r3, #8]
}
 800609c:	bf00      	nop
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	40012300 	.word	0x40012300
 80060ac:	0f000001 	.word	0x0f000001

080060b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d101      	bne.n	80060c8 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 80060c4:	2302      	movs	r3, #2
 80060c6:	e031      	b.n	800612c <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80060d0:	4b19      	ldr	r3, [pc, #100]	; (8006138 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f023 021f 	bic.w	r2, r3, #31
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	431a      	orrs	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	685a      	ldr	r2, [r3, #4]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	431a      	orrs	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	431a      	orrs	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3714      	adds	r7, #20
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	40012300 	.word	0x40012300

0800613c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e0ed      	b.n	800632a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d102      	bne.n	8006160 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7fb fb8e 	bl	800187c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0201 	orr.w	r2, r2, #1
 800616e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006170:	f7ff fc2a 	bl	80059c8 <HAL_GetTick>
 8006174:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006176:	e012      	b.n	800619e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006178:	f7ff fc26 	bl	80059c8 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b0a      	cmp	r3, #10
 8006184:	d90b      	bls.n	800619e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2205      	movs	r2, #5
 8006196:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e0c5      	b.n	800632a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d0e5      	beq.n	8006178 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0202 	bic.w	r2, r2, #2
 80061ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061bc:	f7ff fc04 	bl	80059c8 <HAL_GetTick>
 80061c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80061c2:	e012      	b.n	80061ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80061c4:	f7ff fc00 	bl	80059c8 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b0a      	cmp	r3, #10
 80061d0:	d90b      	bls.n	80061ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2205      	movs	r2, #5
 80061e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e09f      	b.n	800632a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1e5      	bne.n	80061c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	7e1b      	ldrb	r3, [r3, #24]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d108      	bne.n	8006212 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	e007      	b.n	8006222 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006220:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	7e5b      	ldrb	r3, [r3, #25]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d108      	bne.n	800623c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	e007      	b.n	800624c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800624a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	7e9b      	ldrb	r3, [r3, #26]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d108      	bne.n	8006266 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f042 0220 	orr.w	r2, r2, #32
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	e007      	b.n	8006276 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0220 	bic.w	r2, r2, #32
 8006274:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	7edb      	ldrb	r3, [r3, #27]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d108      	bne.n	8006290 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 0210 	bic.w	r2, r2, #16
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	e007      	b.n	80062a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f042 0210 	orr.w	r2, r2, #16
 800629e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	7f1b      	ldrb	r3, [r3, #28]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d108      	bne.n	80062ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f042 0208 	orr.w	r2, r2, #8
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	e007      	b.n	80062ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 0208 	bic.w	r2, r2, #8
 80062c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	7f5b      	ldrb	r3, [r3, #29]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d108      	bne.n	80062e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f042 0204 	orr.w	r2, r2, #4
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	e007      	b.n	80062f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f022 0204 	bic.w	r2, r2, #4
 80062f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	431a      	orrs	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	431a      	orrs	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	ea42 0103 	orr.w	r1, r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	1e5a      	subs	r2, r3, #1
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
	...

08006334 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8006334:	b480      	push	{r7}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 3020 	ldrb.w	r3, [r3, #32]
 800634a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800634c:	7cfb      	ldrb	r3, [r7, #19]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d003      	beq.n	800635a <HAL_CAN_ConfigFilter+0x26>
 8006352:	7cfb      	ldrb	r3, [r7, #19]
 8006354:	2b02      	cmp	r3, #2
 8006356:	f040 80be 	bne.w	80064d6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800635a:	4b65      	ldr	r3, [pc, #404]	; (80064f0 <HAL_CAN_ConfigFilter+0x1bc>)
 800635c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006364:	f043 0201 	orr.w	r2, r3, #1
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006374:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	021b      	lsls	r3, r3, #8
 800638a:	431a      	orrs	r2, r3
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	f003 031f 	and.w	r3, r3, #31
 800639a:	2201      	movs	r2, #1
 800639c:	fa02 f303 	lsl.w	r3, r2, r3
 80063a0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	43db      	mvns	r3, r3
 80063ac:	401a      	ands	r2, r3
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	69db      	ldr	r3, [r3, #28]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d123      	bne.n	8006404 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	43db      	mvns	r3, r3
 80063c6:	401a      	ands	r2, r3
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80063de:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	3248      	adds	r2, #72	; 0x48
 80063e4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80063f8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80063fa:	6979      	ldr	r1, [r7, #20]
 80063fc:	3348      	adds	r3, #72	; 0x48
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	440b      	add	r3, r1
 8006402:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	69db      	ldr	r3, [r3, #28]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d122      	bne.n	8006452 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	431a      	orrs	r2, r3
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800642c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	3248      	adds	r2, #72	; 0x48
 8006432:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006446:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006448:	6979      	ldr	r1, [r7, #20]
 800644a:	3348      	adds	r3, #72	; 0x48
 800644c:	00db      	lsls	r3, r3, #3
 800644e:	440b      	add	r3, r1
 8006450:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d109      	bne.n	800646e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	43db      	mvns	r3, r3
 8006464:	401a      	ands	r2, r3
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800646c:	e007      	b.n	800647e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	431a      	orrs	r2, r3
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d109      	bne.n	800649a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	43db      	mvns	r3, r3
 8006490:	401a      	ands	r2, r3
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006498:	e007      	b.n	80064aa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	431a      	orrs	r2, r3
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d107      	bne.n	80064c2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	431a      	orrs	r2, r3
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064c8:	f023 0201 	bic.w	r2, r3, #1
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	e006      	b.n	80064e4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
  }
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	371c      	adds	r7, #28
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	40006400 	.word	0x40006400

080064f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b01      	cmp	r3, #1
 8006506:	d12e      	bne.n	8006566 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 0201 	bic.w	r2, r2, #1
 800651e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006520:	f7ff fa52 	bl	80059c8 <HAL_GetTick>
 8006524:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006526:	e012      	b.n	800654e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006528:	f7ff fa4e 	bl	80059c8 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b0a      	cmp	r3, #10
 8006534:	d90b      	bls.n	800654e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2205      	movs	r2, #5
 8006546:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e012      	b.n	8006574 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1e5      	bne.n	8006528 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	e006      	b.n	8006574 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
  }
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800657c:	b480      	push	{r7}
 800657e:	b089      	sub	sp, #36	; 0x24
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
 8006588:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006590:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800659a:	7ffb      	ldrb	r3, [r7, #31]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d003      	beq.n	80065a8 <HAL_CAN_AddTxMessage+0x2c>
 80065a0:	7ffb      	ldrb	r3, [r7, #31]
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	f040 80b8 	bne.w	8006718 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10a      	bne.n	80065c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d105      	bne.n	80065c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f000 80a0 	beq.w	8006708 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	0e1b      	lsrs	r3, r3, #24
 80065cc:	f003 0303 	and.w	r3, r3, #3
 80065d0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d907      	bls.n	80065e8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e09e      	b.n	8006726 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80065e8:	2201      	movs	r2, #1
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	409a      	lsls	r2, r3
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10d      	bne.n	8006616 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006604:	68f9      	ldr	r1, [r7, #12]
 8006606:	6809      	ldr	r1, [r1, #0]
 8006608:	431a      	orrs	r2, r3
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	3318      	adds	r3, #24
 800660e:	011b      	lsls	r3, r3, #4
 8006610:	440b      	add	r3, r1
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	e00f      	b.n	8006636 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006620:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006626:	68f9      	ldr	r1, [r7, #12]
 8006628:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800662a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	3318      	adds	r3, #24
 8006630:	011b      	lsls	r3, r3, #4
 8006632:	440b      	add	r3, r1
 8006634:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6819      	ldr	r1, [r3, #0]
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	691a      	ldr	r2, [r3, #16]
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	3318      	adds	r3, #24
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	440b      	add	r3, r1
 8006646:	3304      	adds	r3, #4
 8006648:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	7d1b      	ldrb	r3, [r3, #20]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d111      	bne.n	8006676 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	3318      	adds	r3, #24
 800665a:	011b      	lsls	r3, r3, #4
 800665c:	4413      	add	r3, r2
 800665e:	3304      	adds	r3, #4
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	6811      	ldr	r1, [r2, #0]
 8006666:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	3318      	adds	r3, #24
 800666e:	011b      	lsls	r3, r3, #4
 8006670:	440b      	add	r3, r1
 8006672:	3304      	adds	r3, #4
 8006674:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	3307      	adds	r3, #7
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	061a      	lsls	r2, r3, #24
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3306      	adds	r3, #6
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	041b      	lsls	r3, r3, #16
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	3305      	adds	r3, #5
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	021b      	lsls	r3, r3, #8
 8006690:	4313      	orrs	r3, r2
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	3204      	adds	r2, #4
 8006696:	7812      	ldrb	r2, [r2, #0]
 8006698:	4610      	mov	r0, r2
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	6811      	ldr	r1, [r2, #0]
 800669e:	ea43 0200 	orr.w	r2, r3, r0
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	011b      	lsls	r3, r3, #4
 80066a6:	440b      	add	r3, r1
 80066a8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80066ac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	3303      	adds	r3, #3
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	061a      	lsls	r2, r3, #24
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	3302      	adds	r3, #2
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	041b      	lsls	r3, r3, #16
 80066be:	431a      	orrs	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3301      	adds	r3, #1
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	021b      	lsls	r3, r3, #8
 80066c8:	4313      	orrs	r3, r2
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	7812      	ldrb	r2, [r2, #0]
 80066ce:	4610      	mov	r0, r2
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	6811      	ldr	r1, [r2, #0]
 80066d4:	ea43 0200 	orr.w	r2, r3, r0
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	011b      	lsls	r3, r3, #4
 80066dc:	440b      	add	r3, r1
 80066de:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80066e2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	3318      	adds	r3, #24
 80066ec:	011b      	lsls	r3, r3, #4
 80066ee:	4413      	add	r3, r2
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	6811      	ldr	r1, [r2, #0]
 80066f6:	f043 0201 	orr.w	r2, r3, #1
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	3318      	adds	r3, #24
 80066fe:	011b      	lsls	r3, r3, #4
 8006700:	440b      	add	r3, r1
 8006702:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006704:	2300      	movs	r3, #0
 8006706:	e00e      	b.n	8006726 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e006      	b.n	8006726 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
  }
}
 8006726:	4618      	mov	r0, r3
 8006728:	3724      	adds	r7, #36	; 0x24
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006732:	b480      	push	{r7}
 8006734:	b087      	sub	sp, #28
 8006736:	af00      	add	r7, sp, #0
 8006738:	60f8      	str	r0, [r7, #12]
 800673a:	60b9      	str	r1, [r7, #8]
 800673c:	607a      	str	r2, [r7, #4]
 800673e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006746:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006748:	7dfb      	ldrb	r3, [r7, #23]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d003      	beq.n	8006756 <HAL_CAN_GetRxMessage+0x24>
 800674e:	7dfb      	ldrb	r3, [r7, #23]
 8006750:	2b02      	cmp	r3, #2
 8006752:	f040 80f3 	bne.w	800693c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10e      	bne.n	800677a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	f003 0303 	and.w	r3, r3, #3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d116      	bne.n	8006798 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e0e7      	b.n	800694a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	f003 0303 	and.w	r3, r3, #3
 8006784:	2b00      	cmp	r3, #0
 8006786:	d107      	bne.n	8006798 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e0d8      	b.n	800694a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	331b      	adds	r3, #27
 80067a0:	011b      	lsls	r3, r3, #4
 80067a2:	4413      	add	r3, r2
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0204 	and.w	r2, r3, #4
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10c      	bne.n	80067d0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	331b      	adds	r3, #27
 80067be:	011b      	lsls	r3, r3, #4
 80067c0:	4413      	add	r3, r2
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	0d5b      	lsrs	r3, r3, #21
 80067c6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	e00b      	b.n	80067e8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	331b      	adds	r3, #27
 80067d8:	011b      	lsls	r3, r3, #4
 80067da:	4413      	add	r3, r2
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	08db      	lsrs	r3, r3, #3
 80067e0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	331b      	adds	r3, #27
 80067f0:	011b      	lsls	r3, r3, #4
 80067f2:	4413      	add	r3, r2
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0202 	and.w	r2, r3, #2
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	331b      	adds	r3, #27
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	4413      	add	r3, r2
 800680a:	3304      	adds	r3, #4
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 020f 	and.w	r2, r3, #15
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	331b      	adds	r3, #27
 800681e:	011b      	lsls	r3, r3, #4
 8006820:	4413      	add	r3, r2
 8006822:	3304      	adds	r3, #4
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	0a1b      	lsrs	r3, r3, #8
 8006828:	b2da      	uxtb	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	331b      	adds	r3, #27
 8006836:	011b      	lsls	r3, r3, #4
 8006838:	4413      	add	r3, r2
 800683a:	3304      	adds	r3, #4
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	0c1b      	lsrs	r3, r3, #16
 8006840:	b29a      	uxth	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	011b      	lsls	r3, r3, #4
 800684e:	4413      	add	r3, r2
 8006850:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	b2da      	uxtb	r2, r3
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	011b      	lsls	r3, r3, #4
 8006864:	4413      	add	r3, r2
 8006866:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	0a1a      	lsrs	r2, r3, #8
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	3301      	adds	r3, #1
 8006872:	b2d2      	uxtb	r2, r2
 8006874:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	011b      	lsls	r3, r3, #4
 800687e:	4413      	add	r3, r2
 8006880:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	0c1a      	lsrs	r2, r3, #16
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	3302      	adds	r3, #2
 800688c:	b2d2      	uxtb	r2, r2
 800688e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	011b      	lsls	r3, r3, #4
 8006898:	4413      	add	r3, r2
 800689a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	0e1a      	lsrs	r2, r3, #24
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	3303      	adds	r3, #3
 80068a6:	b2d2      	uxtb	r2, r2
 80068a8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	011b      	lsls	r3, r3, #4
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	3304      	adds	r3, #4
 80068be:	b2d2      	uxtb	r2, r2
 80068c0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	011b      	lsls	r3, r3, #4
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	0a1a      	lsrs	r2, r3, #8
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	3305      	adds	r3, #5
 80068d8:	b2d2      	uxtb	r2, r2
 80068da:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	011b      	lsls	r3, r3, #4
 80068e4:	4413      	add	r3, r2
 80068e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	0c1a      	lsrs	r2, r3, #16
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	3306      	adds	r3, #6
 80068f2:	b2d2      	uxtb	r2, r2
 80068f4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	011b      	lsls	r3, r3, #4
 80068fe:	4413      	add	r3, r2
 8006900:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	0e1a      	lsrs	r2, r3, #24
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	3307      	adds	r3, #7
 800690c:	b2d2      	uxtb	r2, r2
 800690e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d108      	bne.n	8006928 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68da      	ldr	r2, [r3, #12]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f042 0220 	orr.w	r2, r2, #32
 8006924:	60da      	str	r2, [r3, #12]
 8006926:	e007      	b.n	8006938 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691a      	ldr	r2, [r3, #16]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f042 0220 	orr.w	r2, r2, #32
 8006936:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006938:	2300      	movs	r3, #0
 800693a:	e006      	b.n	800694a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
  }
}
 800694a:	4618      	mov	r0, r3
 800694c:	371c      	adds	r7, #28
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b08a      	sub	sp, #40	; 0x28
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800695e:	2300      	movs	r3, #0
 8006960:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	695b      	ldr	r3, [r3, #20]
 8006968:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006992:	6a3b      	ldr	r3, [r7, #32]
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	d07c      	beq.n	8006a96 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d023      	beq.n	80069ee <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2201      	movs	r2, #1
 80069ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	f003 0302 	and.w	r3, r3, #2
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f983 	bl	8006cc4 <HAL_CAN_TxMailbox0CompleteCallback>
 80069be:	e016      	b.n	80069ee <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	f003 0304 	and.w	r3, r3, #4
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d004      	beq.n	80069d4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80069ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80069d0:	627b      	str	r3, [r7, #36]	; 0x24
 80069d2:	e00c      	b.n	80069ee <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	f003 0308 	and.w	r3, r3, #8
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d004      	beq.n	80069e8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80069e4:	627b      	str	r3, [r7, #36]	; 0x24
 80069e6:	e002      	b.n	80069ee <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f989 	bl	8006d00 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d024      	beq.n	8006a42 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f963 	bl	8006cd8 <HAL_CAN_TxMailbox1CompleteCallback>
 8006a12:	e016      	b.n	8006a42 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d004      	beq.n	8006a28 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006a24:	627b      	str	r3, [r7, #36]	; 0x24
 8006a26:	e00c      	b.n	8006a42 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d004      	beq.n	8006a3c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a38:	627b      	str	r3, [r7, #36]	; 0x24
 8006a3a:	e002      	b.n	8006a42 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 f969 	bl	8006d14 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d024      	beq.n	8006a96 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006a54:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f943 	bl	8006cec <HAL_CAN_TxMailbox2CompleteCallback>
 8006a66:	e016      	b.n	8006a96 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d004      	beq.n	8006a7c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a78:	627b      	str	r3, [r7, #36]	; 0x24
 8006a7a:	e00c      	b.n	8006a96 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d004      	beq.n	8006a90 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a8e:	e002      	b.n	8006a96 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f949 	bl	8006d28 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006a96:	6a3b      	ldr	r3, [r7, #32]
 8006a98:	f003 0308 	and.w	r3, r3, #8
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00c      	beq.n	8006aba <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f003 0310 	and.w	r3, r3, #16
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d007      	beq.n	8006aba <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ab0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2210      	movs	r2, #16
 8006ab8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	f003 0304 	and.w	r3, r3, #4
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00b      	beq.n	8006adc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f003 0308 	and.w	r3, r3, #8
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d006      	beq.n	8006adc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2208      	movs	r2, #8
 8006ad4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f93a 	bl	8006d50 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	f003 0302 	and.w	r3, r3, #2
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d009      	beq.n	8006afa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f003 0303 	and.w	r3, r3, #3
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d002      	beq.n	8006afa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f921 	bl	8006d3c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00c      	beq.n	8006b1e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f003 0310 	and.w	r3, r3, #16
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d007      	beq.n	8006b1e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b14:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2210      	movs	r2, #16
 8006b1c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
 8006b20:	f003 0320 	and.w	r3, r3, #32
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00b      	beq.n	8006b40 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f003 0308 	and.w	r3, r3, #8
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d006      	beq.n	8006b40 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2208      	movs	r2, #8
 8006b38:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f91c 	bl	8006d78 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006b40:	6a3b      	ldr	r3, [r7, #32]
 8006b42:	f003 0310 	and.w	r3, r3, #16
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d009      	beq.n	8006b5e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	f003 0303 	and.w	r3, r3, #3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d002      	beq.n	8006b5e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f903 	bl	8006d64 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00b      	beq.n	8006b80 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	f003 0310 	and.w	r3, r3, #16
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d006      	beq.n	8006b80 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2210      	movs	r2, #16
 8006b78:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f906 	bl	8006d8c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00b      	beq.n	8006ba2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	f003 0308 	and.w	r3, r3, #8
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d006      	beq.n	8006ba2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2208      	movs	r2, #8
 8006b9a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f8ff 	bl	8006da0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d07b      	beq.n	8006ca4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	f003 0304 	and.w	r3, r3, #4
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d072      	beq.n	8006c9c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d008      	beq.n	8006bd2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bcc:	f043 0301 	orr.w	r3, r3, #1
 8006bd0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d008      	beq.n	8006bee <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d003      	beq.n	8006bee <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be8:	f043 0302 	orr.w	r3, r3, #2
 8006bec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d008      	beq.n	8006c0a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	f043 0304 	orr.w	r3, r3, #4
 8006c08:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006c0a:	6a3b      	ldr	r3, [r7, #32]
 8006c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d043      	beq.n	8006c9c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d03e      	beq.n	8006c9c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c24:	2b60      	cmp	r3, #96	; 0x60
 8006c26:	d02b      	beq.n	8006c80 <HAL_CAN_IRQHandler+0x32a>
 8006c28:	2b60      	cmp	r3, #96	; 0x60
 8006c2a:	d82e      	bhi.n	8006c8a <HAL_CAN_IRQHandler+0x334>
 8006c2c:	2b50      	cmp	r3, #80	; 0x50
 8006c2e:	d022      	beq.n	8006c76 <HAL_CAN_IRQHandler+0x320>
 8006c30:	2b50      	cmp	r3, #80	; 0x50
 8006c32:	d82a      	bhi.n	8006c8a <HAL_CAN_IRQHandler+0x334>
 8006c34:	2b40      	cmp	r3, #64	; 0x40
 8006c36:	d019      	beq.n	8006c6c <HAL_CAN_IRQHandler+0x316>
 8006c38:	2b40      	cmp	r3, #64	; 0x40
 8006c3a:	d826      	bhi.n	8006c8a <HAL_CAN_IRQHandler+0x334>
 8006c3c:	2b30      	cmp	r3, #48	; 0x30
 8006c3e:	d010      	beq.n	8006c62 <HAL_CAN_IRQHandler+0x30c>
 8006c40:	2b30      	cmp	r3, #48	; 0x30
 8006c42:	d822      	bhi.n	8006c8a <HAL_CAN_IRQHandler+0x334>
 8006c44:	2b10      	cmp	r3, #16
 8006c46:	d002      	beq.n	8006c4e <HAL_CAN_IRQHandler+0x2f8>
 8006c48:	2b20      	cmp	r3, #32
 8006c4a:	d005      	beq.n	8006c58 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006c4c:	e01d      	b.n	8006c8a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c50:	f043 0308 	orr.w	r3, r3, #8
 8006c54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006c56:	e019      	b.n	8006c8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	f043 0310 	orr.w	r3, r3, #16
 8006c5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006c60:	e014      	b.n	8006c8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c64:	f043 0320 	orr.w	r3, r3, #32
 8006c68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006c6a:	e00f      	b.n	8006c8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006c74:	e00a      	b.n	8006c8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006c7e:	e005      	b.n	8006c8c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006c88:	e000      	b.n	8006c8c <HAL_CAN_IRQHandler+0x336>
            break;
 8006c8a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	699a      	ldr	r2, [r3, #24]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006c9a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2204      	movs	r2, #4
 8006ca2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d008      	beq.n	8006cbc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb0:	431a      	orrs	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f87c 	bl	8006db4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006cbc:	bf00      	nop
 8006cbe:	3728      	adds	r7, #40	; 0x28
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f003 0307 	and.w	r3, r3, #7
 8006dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006dd8:	4b0c      	ldr	r3, [pc, #48]	; (8006e0c <__NVIC_SetPriorityGrouping+0x44>)
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006de4:	4013      	ands	r3, r2
 8006de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006dfa:	4a04      	ldr	r2, [pc, #16]	; (8006e0c <__NVIC_SetPriorityGrouping+0x44>)
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	60d3      	str	r3, [r2, #12]
}
 8006e00:	bf00      	nop
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	e000ed00 	.word	0xe000ed00

08006e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e14:	4b04      	ldr	r3, [pc, #16]	; (8006e28 <__NVIC_GetPriorityGrouping+0x18>)
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	0a1b      	lsrs	r3, r3, #8
 8006e1a:	f003 0307 	and.w	r3, r3, #7
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr
 8006e28:	e000ed00 	.word	0xe000ed00

08006e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	4603      	mov	r3, r0
 8006e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	db0b      	blt.n	8006e56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e3e:	79fb      	ldrb	r3, [r7, #7]
 8006e40:	f003 021f 	and.w	r2, r3, #31
 8006e44:	4907      	ldr	r1, [pc, #28]	; (8006e64 <__NVIC_EnableIRQ+0x38>)
 8006e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e4a:	095b      	lsrs	r3, r3, #5
 8006e4c:	2001      	movs	r0, #1
 8006e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8006e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	e000e100 	.word	0xe000e100

08006e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	4603      	mov	r3, r0
 8006e70:	6039      	str	r1, [r7, #0]
 8006e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	db0a      	blt.n	8006e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	b2da      	uxtb	r2, r3
 8006e80:	490c      	ldr	r1, [pc, #48]	; (8006eb4 <__NVIC_SetPriority+0x4c>)
 8006e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e86:	0112      	lsls	r2, r2, #4
 8006e88:	b2d2      	uxtb	r2, r2
 8006e8a:	440b      	add	r3, r1
 8006e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e90:	e00a      	b.n	8006ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	4908      	ldr	r1, [pc, #32]	; (8006eb8 <__NVIC_SetPriority+0x50>)
 8006e98:	79fb      	ldrb	r3, [r7, #7]
 8006e9a:	f003 030f 	and.w	r3, r3, #15
 8006e9e:	3b04      	subs	r3, #4
 8006ea0:	0112      	lsls	r2, r2, #4
 8006ea2:	b2d2      	uxtb	r2, r2
 8006ea4:	440b      	add	r3, r1
 8006ea6:	761a      	strb	r2, [r3, #24]
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr
 8006eb4:	e000e100 	.word	0xe000e100
 8006eb8:	e000ed00 	.word	0xe000ed00

08006ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b089      	sub	sp, #36	; 0x24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f003 0307 	and.w	r3, r3, #7
 8006ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	f1c3 0307 	rsb	r3, r3, #7
 8006ed6:	2b04      	cmp	r3, #4
 8006ed8:	bf28      	it	cs
 8006eda:	2304      	movcs	r3, #4
 8006edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	3304      	adds	r3, #4
 8006ee2:	2b06      	cmp	r3, #6
 8006ee4:	d902      	bls.n	8006eec <NVIC_EncodePriority+0x30>
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	3b03      	subs	r3, #3
 8006eea:	e000      	b.n	8006eee <NVIC_EncodePriority+0x32>
 8006eec:	2300      	movs	r3, #0
 8006eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ef0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8006efa:	43da      	mvns	r2, r3
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	401a      	ands	r2, r3
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f0e:	43d9      	mvns	r1, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f14:	4313      	orrs	r3, r2
         );
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3724      	adds	r7, #36	; 0x24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
	...

08006f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f34:	d301      	bcc.n	8006f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f36:	2301      	movs	r3, #1
 8006f38:	e00f      	b.n	8006f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f3a:	4a0a      	ldr	r2, [pc, #40]	; (8006f64 <SysTick_Config+0x40>)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f42:	210f      	movs	r1, #15
 8006f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f48:	f7ff ff8e 	bl	8006e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f4c:	4b05      	ldr	r3, [pc, #20]	; (8006f64 <SysTick_Config+0x40>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f52:	4b04      	ldr	r3, [pc, #16]	; (8006f64 <SysTick_Config+0x40>)
 8006f54:	2207      	movs	r2, #7
 8006f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	e000e010 	.word	0xe000e010

08006f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f7ff ff29 	bl	8006dc8 <__NVIC_SetPriorityGrouping>
}
 8006f76:	bf00      	nop
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b086      	sub	sp, #24
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	4603      	mov	r3, r0
 8006f86:	60b9      	str	r1, [r7, #8]
 8006f88:	607a      	str	r2, [r7, #4]
 8006f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006f90:	f7ff ff3e 	bl	8006e10 <__NVIC_GetPriorityGrouping>
 8006f94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	68b9      	ldr	r1, [r7, #8]
 8006f9a:	6978      	ldr	r0, [r7, #20]
 8006f9c:	f7ff ff8e 	bl	8006ebc <NVIC_EncodePriority>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fa6:	4611      	mov	r1, r2
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7ff ff5d 	bl	8006e68 <__NVIC_SetPriority>
}
 8006fae:	bf00      	nop
 8006fb0:	3718      	adds	r7, #24
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b082      	sub	sp, #8
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7ff ff31 	bl	8006e2c <__NVIC_EnableIRQ>
}
 8006fca:	bf00      	nop
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b082      	sub	sp, #8
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7ff ffa2 	bl	8006f24 <SysTick_Config>
 8006fe0:	4603      	mov	r3, r0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b084      	sub	sp, #16
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ff6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006ff8:	f7fe fce6 	bl	80059c8 <HAL_GetTick>
 8006ffc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b02      	cmp	r3, #2
 8007008:	d008      	beq.n	800701c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2280      	movs	r2, #128	; 0x80
 800700e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e052      	b.n	80070c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f022 0216 	bic.w	r2, r2, #22
 800702a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	695a      	ldr	r2, [r3, #20]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800703a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007040:	2b00      	cmp	r3, #0
 8007042:	d103      	bne.n	800704c <HAL_DMA_Abort+0x62>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007048:	2b00      	cmp	r3, #0
 800704a:	d007      	beq.n	800705c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f022 0208 	bic.w	r2, r2, #8
 800705a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f022 0201 	bic.w	r2, r2, #1
 800706a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800706c:	e013      	b.n	8007096 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800706e:	f7fe fcab 	bl	80059c8 <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	2b05      	cmp	r3, #5
 800707a:	d90c      	bls.n	8007096 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2220      	movs	r2, #32
 8007080:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2203      	movs	r2, #3
 8007086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e015      	b.n	80070c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1e4      	bne.n	800706e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070a8:	223f      	movs	r2, #63	; 0x3f
 80070aa:	409a      	lsls	r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b083      	sub	sp, #12
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d004      	beq.n	80070e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2280      	movs	r2, #128	; 0x80
 80070e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e00c      	b.n	8007102 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2205      	movs	r2, #5
 80070ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 0201 	bic.w	r2, r2, #1
 80070fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	370c      	adds	r7, #12
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
	...

08007110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007110:	b480      	push	{r7}
 8007112:	b089      	sub	sp, #36	; 0x24
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800711a:	2300      	movs	r3, #0
 800711c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800711e:	2300      	movs	r3, #0
 8007120:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007122:	2300      	movs	r3, #0
 8007124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007126:	2300      	movs	r3, #0
 8007128:	61fb      	str	r3, [r7, #28]
 800712a:	e165      	b.n	80073f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800712c:	2201      	movs	r2, #1
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	fa02 f303 	lsl.w	r3, r2, r3
 8007134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	4013      	ands	r3, r2
 800713e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007140:	693a      	ldr	r2, [r7, #16]
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	429a      	cmp	r2, r3
 8007146:	f040 8154 	bne.w	80073f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f003 0303 	and.w	r3, r3, #3
 8007152:	2b01      	cmp	r3, #1
 8007154:	d005      	beq.n	8007162 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800715e:	2b02      	cmp	r3, #2
 8007160:	d130      	bne.n	80071c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	005b      	lsls	r3, r3, #1
 800716c:	2203      	movs	r2, #3
 800716e:	fa02 f303 	lsl.w	r3, r2, r3
 8007172:	43db      	mvns	r3, r3
 8007174:	69ba      	ldr	r2, [r7, #24]
 8007176:	4013      	ands	r3, r2
 8007178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	68da      	ldr	r2, [r3, #12]
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	005b      	lsls	r3, r3, #1
 8007182:	fa02 f303 	lsl.w	r3, r2, r3
 8007186:	69ba      	ldr	r2, [r7, #24]
 8007188:	4313      	orrs	r3, r2
 800718a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007198:	2201      	movs	r2, #1
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	fa02 f303 	lsl.w	r3, r2, r3
 80071a0:	43db      	mvns	r3, r3
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	4013      	ands	r3, r2
 80071a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	091b      	lsrs	r3, r3, #4
 80071ae:	f003 0201 	and.w	r2, r3, #1
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	fa02 f303 	lsl.w	r3, r2, r3
 80071b8:	69ba      	ldr	r2, [r7, #24]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	69ba      	ldr	r2, [r7, #24]
 80071c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f003 0303 	and.w	r3, r3, #3
 80071cc:	2b03      	cmp	r3, #3
 80071ce:	d017      	beq.n	8007200 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	005b      	lsls	r3, r3, #1
 80071da:	2203      	movs	r2, #3
 80071dc:	fa02 f303 	lsl.w	r3, r2, r3
 80071e0:	43db      	mvns	r3, r3
 80071e2:	69ba      	ldr	r2, [r7, #24]
 80071e4:	4013      	ands	r3, r2
 80071e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	689a      	ldr	r2, [r3, #8]
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	005b      	lsls	r3, r3, #1
 80071f0:	fa02 f303 	lsl.w	r3, r2, r3
 80071f4:	69ba      	ldr	r2, [r7, #24]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	f003 0303 	and.w	r3, r3, #3
 8007208:	2b02      	cmp	r3, #2
 800720a:	d123      	bne.n	8007254 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	08da      	lsrs	r2, r3, #3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	3208      	adds	r2, #8
 8007214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007218:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	f003 0307 	and.w	r3, r3, #7
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	220f      	movs	r2, #15
 8007224:	fa02 f303 	lsl.w	r3, r2, r3
 8007228:	43db      	mvns	r3, r3
 800722a:	69ba      	ldr	r2, [r7, #24]
 800722c:	4013      	ands	r3, r2
 800722e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	691a      	ldr	r2, [r3, #16]
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	f003 0307 	and.w	r3, r3, #7
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	fa02 f303 	lsl.w	r3, r2, r3
 8007240:	69ba      	ldr	r2, [r7, #24]
 8007242:	4313      	orrs	r3, r2
 8007244:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	08da      	lsrs	r2, r3, #3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	3208      	adds	r2, #8
 800724e:	69b9      	ldr	r1, [r7, #24]
 8007250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	005b      	lsls	r3, r3, #1
 800725e:	2203      	movs	r2, #3
 8007260:	fa02 f303 	lsl.w	r3, r2, r3
 8007264:	43db      	mvns	r3, r3
 8007266:	69ba      	ldr	r2, [r7, #24]
 8007268:	4013      	ands	r3, r2
 800726a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	f003 0203 	and.w	r2, r3, #3
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	fa02 f303 	lsl.w	r3, r2, r3
 800727c:	69ba      	ldr	r2, [r7, #24]
 800727e:	4313      	orrs	r3, r2
 8007280:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	69ba      	ldr	r2, [r7, #24]
 8007286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007290:	2b00      	cmp	r3, #0
 8007292:	f000 80ae 	beq.w	80073f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007296:	2300      	movs	r3, #0
 8007298:	60fb      	str	r3, [r7, #12]
 800729a:	4b5d      	ldr	r3, [pc, #372]	; (8007410 <HAL_GPIO_Init+0x300>)
 800729c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800729e:	4a5c      	ldr	r2, [pc, #368]	; (8007410 <HAL_GPIO_Init+0x300>)
 80072a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072a4:	6453      	str	r3, [r2, #68]	; 0x44
 80072a6:	4b5a      	ldr	r3, [pc, #360]	; (8007410 <HAL_GPIO_Init+0x300>)
 80072a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80072b2:	4a58      	ldr	r2, [pc, #352]	; (8007414 <HAL_GPIO_Init+0x304>)
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	089b      	lsrs	r3, r3, #2
 80072b8:	3302      	adds	r3, #2
 80072ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	f003 0303 	and.w	r3, r3, #3
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	220f      	movs	r2, #15
 80072ca:	fa02 f303 	lsl.w	r3, r2, r3
 80072ce:	43db      	mvns	r3, r3
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	4013      	ands	r3, r2
 80072d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a4f      	ldr	r2, [pc, #316]	; (8007418 <HAL_GPIO_Init+0x308>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d025      	beq.n	800732a <HAL_GPIO_Init+0x21a>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a4e      	ldr	r2, [pc, #312]	; (800741c <HAL_GPIO_Init+0x30c>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d01f      	beq.n	8007326 <HAL_GPIO_Init+0x216>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a4d      	ldr	r2, [pc, #308]	; (8007420 <HAL_GPIO_Init+0x310>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d019      	beq.n	8007322 <HAL_GPIO_Init+0x212>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a4c      	ldr	r2, [pc, #304]	; (8007424 <HAL_GPIO_Init+0x314>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d013      	beq.n	800731e <HAL_GPIO_Init+0x20e>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a4b      	ldr	r2, [pc, #300]	; (8007428 <HAL_GPIO_Init+0x318>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d00d      	beq.n	800731a <HAL_GPIO_Init+0x20a>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a4a      	ldr	r2, [pc, #296]	; (800742c <HAL_GPIO_Init+0x31c>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d007      	beq.n	8007316 <HAL_GPIO_Init+0x206>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a49      	ldr	r2, [pc, #292]	; (8007430 <HAL_GPIO_Init+0x320>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d101      	bne.n	8007312 <HAL_GPIO_Init+0x202>
 800730e:	2306      	movs	r3, #6
 8007310:	e00c      	b.n	800732c <HAL_GPIO_Init+0x21c>
 8007312:	2307      	movs	r3, #7
 8007314:	e00a      	b.n	800732c <HAL_GPIO_Init+0x21c>
 8007316:	2305      	movs	r3, #5
 8007318:	e008      	b.n	800732c <HAL_GPIO_Init+0x21c>
 800731a:	2304      	movs	r3, #4
 800731c:	e006      	b.n	800732c <HAL_GPIO_Init+0x21c>
 800731e:	2303      	movs	r3, #3
 8007320:	e004      	b.n	800732c <HAL_GPIO_Init+0x21c>
 8007322:	2302      	movs	r3, #2
 8007324:	e002      	b.n	800732c <HAL_GPIO_Init+0x21c>
 8007326:	2301      	movs	r3, #1
 8007328:	e000      	b.n	800732c <HAL_GPIO_Init+0x21c>
 800732a:	2300      	movs	r3, #0
 800732c:	69fa      	ldr	r2, [r7, #28]
 800732e:	f002 0203 	and.w	r2, r2, #3
 8007332:	0092      	lsls	r2, r2, #2
 8007334:	4093      	lsls	r3, r2
 8007336:	69ba      	ldr	r2, [r7, #24]
 8007338:	4313      	orrs	r3, r2
 800733a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800733c:	4935      	ldr	r1, [pc, #212]	; (8007414 <HAL_GPIO_Init+0x304>)
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	089b      	lsrs	r3, r3, #2
 8007342:	3302      	adds	r3, #2
 8007344:	69ba      	ldr	r2, [r7, #24]
 8007346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800734a:	4b3a      	ldr	r3, [pc, #232]	; (8007434 <HAL_GPIO_Init+0x324>)
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	43db      	mvns	r3, r3
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	4013      	ands	r3, r2
 8007358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d003      	beq.n	800736e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007366:	69ba      	ldr	r2, [r7, #24]
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	4313      	orrs	r3, r2
 800736c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800736e:	4a31      	ldr	r2, [pc, #196]	; (8007434 <HAL_GPIO_Init+0x324>)
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007374:	4b2f      	ldr	r3, [pc, #188]	; (8007434 <HAL_GPIO_Init+0x324>)
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	43db      	mvns	r3, r3
 800737e:	69ba      	ldr	r2, [r7, #24]
 8007380:	4013      	ands	r3, r2
 8007382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d003      	beq.n	8007398 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	4313      	orrs	r3, r2
 8007396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007398:	4a26      	ldr	r2, [pc, #152]	; (8007434 <HAL_GPIO_Init+0x324>)
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800739e:	4b25      	ldr	r3, [pc, #148]	; (8007434 <HAL_GPIO_Init+0x324>)
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	43db      	mvns	r3, r3
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	4013      	ands	r3, r2
 80073ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80073ba:	69ba      	ldr	r2, [r7, #24]
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	4313      	orrs	r3, r2
 80073c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80073c2:	4a1c      	ldr	r2, [pc, #112]	; (8007434 <HAL_GPIO_Init+0x324>)
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80073c8:	4b1a      	ldr	r3, [pc, #104]	; (8007434 <HAL_GPIO_Init+0x324>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	43db      	mvns	r3, r3
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	4013      	ands	r3, r2
 80073d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80073ec:	4a11      	ldr	r2, [pc, #68]	; (8007434 <HAL_GPIO_Init+0x324>)
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	3301      	adds	r3, #1
 80073f6:	61fb      	str	r3, [r7, #28]
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	2b0f      	cmp	r3, #15
 80073fc:	f67f ae96 	bls.w	800712c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007400:	bf00      	nop
 8007402:	bf00      	nop
 8007404:	3724      	adds	r7, #36	; 0x24
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	40023800 	.word	0x40023800
 8007414:	40013800 	.word	0x40013800
 8007418:	40020000 	.word	0x40020000
 800741c:	40020400 	.word	0x40020400
 8007420:	40020800 	.word	0x40020800
 8007424:	40020c00 	.word	0x40020c00
 8007428:	40021000 	.word	0x40021000
 800742c:	40021400 	.word	0x40021400
 8007430:	40021800 	.word	0x40021800
 8007434:	40013c00 	.word	0x40013c00

08007438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	460b      	mov	r3, r1
 8007442:	807b      	strh	r3, [r7, #2]
 8007444:	4613      	mov	r3, r2
 8007446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007448:	787b      	ldrb	r3, [r7, #1]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800744e:	887a      	ldrh	r2, [r7, #2]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007454:	e003      	b.n	800745e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007456:	887b      	ldrh	r3, [r7, #2]
 8007458:	041a      	lsls	r2, r3, #16
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	619a      	str	r2, [r3, #24]
}
 800745e:	bf00      	nop
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
	...

0800746c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007472:	2300      	movs	r3, #0
 8007474:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007476:	2300      	movs	r3, #0
 8007478:	603b      	str	r3, [r7, #0]
 800747a:	4b20      	ldr	r3, [pc, #128]	; (80074fc <HAL_PWREx_EnableOverDrive+0x90>)
 800747c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747e:	4a1f      	ldr	r2, [pc, #124]	; (80074fc <HAL_PWREx_EnableOverDrive+0x90>)
 8007480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007484:	6413      	str	r3, [r2, #64]	; 0x40
 8007486:	4b1d      	ldr	r3, [pc, #116]	; (80074fc <HAL_PWREx_EnableOverDrive+0x90>)
 8007488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800748e:	603b      	str	r3, [r7, #0]
 8007490:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007492:	4b1b      	ldr	r3, [pc, #108]	; (8007500 <HAL_PWREx_EnableOverDrive+0x94>)
 8007494:	2201      	movs	r2, #1
 8007496:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007498:	f7fe fa96 	bl	80059c8 <HAL_GetTick>
 800749c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800749e:	e009      	b.n	80074b4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80074a0:	f7fe fa92 	bl	80059c8 <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074ae:	d901      	bls.n	80074b4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e01f      	b.n	80074f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80074b4:	4b13      	ldr	r3, [pc, #76]	; (8007504 <HAL_PWREx_EnableOverDrive+0x98>)
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074c0:	d1ee      	bne.n	80074a0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80074c2:	4b11      	ldr	r3, [pc, #68]	; (8007508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074c4:	2201      	movs	r2, #1
 80074c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074c8:	f7fe fa7e 	bl	80059c8 <HAL_GetTick>
 80074cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80074ce:	e009      	b.n	80074e4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80074d0:	f7fe fa7a 	bl	80059c8 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074de:	d901      	bls.n	80074e4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e007      	b.n	80074f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80074e4:	4b07      	ldr	r3, [pc, #28]	; (8007504 <HAL_PWREx_EnableOverDrive+0x98>)
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074f0:	d1ee      	bne.n	80074d0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	40023800 	.word	0x40023800
 8007500:	420e0040 	.word	0x420e0040
 8007504:	40007000 	.word	0x40007000
 8007508:	420e0044 	.word	0x420e0044

0800750c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d101      	bne.n	8007520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e0cc      	b.n	80076ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007520:	4b68      	ldr	r3, [pc, #416]	; (80076c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 030f 	and.w	r3, r3, #15
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	429a      	cmp	r2, r3
 800752c:	d90c      	bls.n	8007548 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800752e:	4b65      	ldr	r3, [pc, #404]	; (80076c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007530:	683a      	ldr	r2, [r7, #0]
 8007532:	b2d2      	uxtb	r2, r2
 8007534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007536:	4b63      	ldr	r3, [pc, #396]	; (80076c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 030f 	and.w	r3, r3, #15
 800753e:	683a      	ldr	r2, [r7, #0]
 8007540:	429a      	cmp	r2, r3
 8007542:	d001      	beq.n	8007548 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e0b8      	b.n	80076ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0302 	and.w	r3, r3, #2
 8007550:	2b00      	cmp	r3, #0
 8007552:	d020      	beq.n	8007596 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0304 	and.w	r3, r3, #4
 800755c:	2b00      	cmp	r3, #0
 800755e:	d005      	beq.n	800756c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007560:	4b59      	ldr	r3, [pc, #356]	; (80076c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	4a58      	ldr	r2, [pc, #352]	; (80076c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007566:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800756a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0308 	and.w	r3, r3, #8
 8007574:	2b00      	cmp	r3, #0
 8007576:	d005      	beq.n	8007584 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007578:	4b53      	ldr	r3, [pc, #332]	; (80076c8 <HAL_RCC_ClockConfig+0x1bc>)
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	4a52      	ldr	r2, [pc, #328]	; (80076c8 <HAL_RCC_ClockConfig+0x1bc>)
 800757e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007582:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007584:	4b50      	ldr	r3, [pc, #320]	; (80076c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	494d      	ldr	r1, [pc, #308]	; (80076c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007592:	4313      	orrs	r3, r2
 8007594:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0301 	and.w	r3, r3, #1
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d044      	beq.n	800762c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d107      	bne.n	80075ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075aa:	4b47      	ldr	r3, [pc, #284]	; (80076c8 <HAL_RCC_ClockConfig+0x1bc>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d119      	bne.n	80075ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e07f      	b.n	80076ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d003      	beq.n	80075ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	d107      	bne.n	80075da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075ca:	4b3f      	ldr	r3, [pc, #252]	; (80076c8 <HAL_RCC_ClockConfig+0x1bc>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d109      	bne.n	80075ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e06f      	b.n	80076ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075da:	4b3b      	ldr	r3, [pc, #236]	; (80076c8 <HAL_RCC_ClockConfig+0x1bc>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d101      	bne.n	80075ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e067      	b.n	80076ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075ea:	4b37      	ldr	r3, [pc, #220]	; (80076c8 <HAL_RCC_ClockConfig+0x1bc>)
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f023 0203 	bic.w	r2, r3, #3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	4934      	ldr	r1, [pc, #208]	; (80076c8 <HAL_RCC_ClockConfig+0x1bc>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075fc:	f7fe f9e4 	bl	80059c8 <HAL_GetTick>
 8007600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007602:	e00a      	b.n	800761a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007604:	f7fe f9e0 	bl	80059c8 <HAL_GetTick>
 8007608:	4602      	mov	r2, r0
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007612:	4293      	cmp	r3, r2
 8007614:	d901      	bls.n	800761a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e04f      	b.n	80076ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800761a:	4b2b      	ldr	r3, [pc, #172]	; (80076c8 <HAL_RCC_ClockConfig+0x1bc>)
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f003 020c 	and.w	r2, r3, #12
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	429a      	cmp	r2, r3
 800762a:	d1eb      	bne.n	8007604 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800762c:	4b25      	ldr	r3, [pc, #148]	; (80076c4 <HAL_RCC_ClockConfig+0x1b8>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 030f 	and.w	r3, r3, #15
 8007634:	683a      	ldr	r2, [r7, #0]
 8007636:	429a      	cmp	r2, r3
 8007638:	d20c      	bcs.n	8007654 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800763a:	4b22      	ldr	r3, [pc, #136]	; (80076c4 <HAL_RCC_ClockConfig+0x1b8>)
 800763c:	683a      	ldr	r2, [r7, #0]
 800763e:	b2d2      	uxtb	r2, r2
 8007640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007642:	4b20      	ldr	r3, [pc, #128]	; (80076c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 030f 	and.w	r3, r3, #15
 800764a:	683a      	ldr	r2, [r7, #0]
 800764c:	429a      	cmp	r2, r3
 800764e:	d001      	beq.n	8007654 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e032      	b.n	80076ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0304 	and.w	r3, r3, #4
 800765c:	2b00      	cmp	r3, #0
 800765e:	d008      	beq.n	8007672 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007660:	4b19      	ldr	r3, [pc, #100]	; (80076c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	4916      	ldr	r1, [pc, #88]	; (80076c8 <HAL_RCC_ClockConfig+0x1bc>)
 800766e:	4313      	orrs	r3, r2
 8007670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 0308 	and.w	r3, r3, #8
 800767a:	2b00      	cmp	r3, #0
 800767c:	d009      	beq.n	8007692 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800767e:	4b12      	ldr	r3, [pc, #72]	; (80076c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	00db      	lsls	r3, r3, #3
 800768c:	490e      	ldr	r1, [pc, #56]	; (80076c8 <HAL_RCC_ClockConfig+0x1bc>)
 800768e:	4313      	orrs	r3, r2
 8007690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007692:	f000 f855 	bl	8007740 <HAL_RCC_GetSysClockFreq>
 8007696:	4602      	mov	r2, r0
 8007698:	4b0b      	ldr	r3, [pc, #44]	; (80076c8 <HAL_RCC_ClockConfig+0x1bc>)
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	091b      	lsrs	r3, r3, #4
 800769e:	f003 030f 	and.w	r3, r3, #15
 80076a2:	490a      	ldr	r1, [pc, #40]	; (80076cc <HAL_RCC_ClockConfig+0x1c0>)
 80076a4:	5ccb      	ldrb	r3, [r1, r3]
 80076a6:	fa22 f303 	lsr.w	r3, r2, r3
 80076aa:	4a09      	ldr	r2, [pc, #36]	; (80076d0 <HAL_RCC_ClockConfig+0x1c4>)
 80076ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80076ae:	4b09      	ldr	r3, [pc, #36]	; (80076d4 <HAL_RCC_ClockConfig+0x1c8>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fe f944 	bl	8005940 <HAL_InitTick>

  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	40023c00 	.word	0x40023c00
 80076c8:	40023800 	.word	0x40023800
 80076cc:	08011154 	.word	0x08011154
 80076d0:	20000040 	.word	0x20000040
 80076d4:	20000044 	.word	0x20000044

080076d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076d8:	b480      	push	{r7}
 80076da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076dc:	4b03      	ldr	r3, [pc, #12]	; (80076ec <HAL_RCC_GetHCLKFreq+0x14>)
 80076de:	681b      	ldr	r3, [r3, #0]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	20000040 	.word	0x20000040

080076f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80076f4:	f7ff fff0 	bl	80076d8 <HAL_RCC_GetHCLKFreq>
 80076f8:	4602      	mov	r2, r0
 80076fa:	4b05      	ldr	r3, [pc, #20]	; (8007710 <HAL_RCC_GetPCLK1Freq+0x20>)
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	0a9b      	lsrs	r3, r3, #10
 8007700:	f003 0307 	and.w	r3, r3, #7
 8007704:	4903      	ldr	r1, [pc, #12]	; (8007714 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007706:	5ccb      	ldrb	r3, [r1, r3]
 8007708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800770c:	4618      	mov	r0, r3
 800770e:	bd80      	pop	{r7, pc}
 8007710:	40023800 	.word	0x40023800
 8007714:	08011164 	.word	0x08011164

08007718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800771c:	f7ff ffdc 	bl	80076d8 <HAL_RCC_GetHCLKFreq>
 8007720:	4602      	mov	r2, r0
 8007722:	4b05      	ldr	r3, [pc, #20]	; (8007738 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	0b5b      	lsrs	r3, r3, #13
 8007728:	f003 0307 	and.w	r3, r3, #7
 800772c:	4903      	ldr	r1, [pc, #12]	; (800773c <HAL_RCC_GetPCLK2Freq+0x24>)
 800772e:	5ccb      	ldrb	r3, [r1, r3]
 8007730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007734:	4618      	mov	r0, r3
 8007736:	bd80      	pop	{r7, pc}
 8007738:	40023800 	.word	0x40023800
 800773c:	08011164 	.word	0x08011164

08007740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007744:	b0ae      	sub	sp, #184	; 0xb8
 8007746:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007748:	2300      	movs	r3, #0
 800774a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800774e:	2300      	movs	r3, #0
 8007750:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8007754:	2300      	movs	r3, #0
 8007756:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800775a:	2300      	movs	r3, #0
 800775c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007766:	4bcb      	ldr	r3, [pc, #812]	; (8007a94 <HAL_RCC_GetSysClockFreq+0x354>)
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f003 030c 	and.w	r3, r3, #12
 800776e:	2b0c      	cmp	r3, #12
 8007770:	f200 8206 	bhi.w	8007b80 <HAL_RCC_GetSysClockFreq+0x440>
 8007774:	a201      	add	r2, pc, #4	; (adr r2, 800777c <HAL_RCC_GetSysClockFreq+0x3c>)
 8007776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800777a:	bf00      	nop
 800777c:	080077b1 	.word	0x080077b1
 8007780:	08007b81 	.word	0x08007b81
 8007784:	08007b81 	.word	0x08007b81
 8007788:	08007b81 	.word	0x08007b81
 800778c:	080077b9 	.word	0x080077b9
 8007790:	08007b81 	.word	0x08007b81
 8007794:	08007b81 	.word	0x08007b81
 8007798:	08007b81 	.word	0x08007b81
 800779c:	080077c1 	.word	0x080077c1
 80077a0:	08007b81 	.word	0x08007b81
 80077a4:	08007b81 	.word	0x08007b81
 80077a8:	08007b81 	.word	0x08007b81
 80077ac:	080079b1 	.word	0x080079b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80077b0:	4bb9      	ldr	r3, [pc, #740]	; (8007a98 <HAL_RCC_GetSysClockFreq+0x358>)
 80077b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80077b6:	e1e7      	b.n	8007b88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80077b8:	4bb8      	ldr	r3, [pc, #736]	; (8007a9c <HAL_RCC_GetSysClockFreq+0x35c>)
 80077ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80077be:	e1e3      	b.n	8007b88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077c0:	4bb4      	ldr	r3, [pc, #720]	; (8007a94 <HAL_RCC_GetSysClockFreq+0x354>)
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80077cc:	4bb1      	ldr	r3, [pc, #708]	; (8007a94 <HAL_RCC_GetSysClockFreq+0x354>)
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d071      	beq.n	80078bc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077d8:	4bae      	ldr	r3, [pc, #696]	; (8007a94 <HAL_RCC_GetSysClockFreq+0x354>)
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	099b      	lsrs	r3, r3, #6
 80077de:	2200      	movs	r2, #0
 80077e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80077e4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80077e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80077f4:	2300      	movs	r3, #0
 80077f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80077fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80077fe:	4622      	mov	r2, r4
 8007800:	462b      	mov	r3, r5
 8007802:	f04f 0000 	mov.w	r0, #0
 8007806:	f04f 0100 	mov.w	r1, #0
 800780a:	0159      	lsls	r1, r3, #5
 800780c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007810:	0150      	lsls	r0, r2, #5
 8007812:	4602      	mov	r2, r0
 8007814:	460b      	mov	r3, r1
 8007816:	4621      	mov	r1, r4
 8007818:	1a51      	subs	r1, r2, r1
 800781a:	6439      	str	r1, [r7, #64]	; 0x40
 800781c:	4629      	mov	r1, r5
 800781e:	eb63 0301 	sbc.w	r3, r3, r1
 8007822:	647b      	str	r3, [r7, #68]	; 0x44
 8007824:	f04f 0200 	mov.w	r2, #0
 8007828:	f04f 0300 	mov.w	r3, #0
 800782c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8007830:	4649      	mov	r1, r9
 8007832:	018b      	lsls	r3, r1, #6
 8007834:	4641      	mov	r1, r8
 8007836:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800783a:	4641      	mov	r1, r8
 800783c:	018a      	lsls	r2, r1, #6
 800783e:	4641      	mov	r1, r8
 8007840:	1a51      	subs	r1, r2, r1
 8007842:	63b9      	str	r1, [r7, #56]	; 0x38
 8007844:	4649      	mov	r1, r9
 8007846:	eb63 0301 	sbc.w	r3, r3, r1
 800784a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800784c:	f04f 0200 	mov.w	r2, #0
 8007850:	f04f 0300 	mov.w	r3, #0
 8007854:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007858:	4649      	mov	r1, r9
 800785a:	00cb      	lsls	r3, r1, #3
 800785c:	4641      	mov	r1, r8
 800785e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007862:	4641      	mov	r1, r8
 8007864:	00ca      	lsls	r2, r1, #3
 8007866:	4610      	mov	r0, r2
 8007868:	4619      	mov	r1, r3
 800786a:	4603      	mov	r3, r0
 800786c:	4622      	mov	r2, r4
 800786e:	189b      	adds	r3, r3, r2
 8007870:	633b      	str	r3, [r7, #48]	; 0x30
 8007872:	462b      	mov	r3, r5
 8007874:	460a      	mov	r2, r1
 8007876:	eb42 0303 	adc.w	r3, r2, r3
 800787a:	637b      	str	r3, [r7, #52]	; 0x34
 800787c:	f04f 0200 	mov.w	r2, #0
 8007880:	f04f 0300 	mov.w	r3, #0
 8007884:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007888:	4629      	mov	r1, r5
 800788a:	024b      	lsls	r3, r1, #9
 800788c:	4621      	mov	r1, r4
 800788e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007892:	4621      	mov	r1, r4
 8007894:	024a      	lsls	r2, r1, #9
 8007896:	4610      	mov	r0, r2
 8007898:	4619      	mov	r1, r3
 800789a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800789e:	2200      	movs	r2, #0
 80078a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80078a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80078a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80078ac:	f7f9 fa0c 	bl	8000cc8 <__aeabi_uldivmod>
 80078b0:	4602      	mov	r2, r0
 80078b2:	460b      	mov	r3, r1
 80078b4:	4613      	mov	r3, r2
 80078b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078ba:	e067      	b.n	800798c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078bc:	4b75      	ldr	r3, [pc, #468]	; (8007a94 <HAL_RCC_GetSysClockFreq+0x354>)
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	099b      	lsrs	r3, r3, #6
 80078c2:	2200      	movs	r2, #0
 80078c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078c8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80078cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80078d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80078d6:	2300      	movs	r3, #0
 80078d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80078da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80078de:	4622      	mov	r2, r4
 80078e0:	462b      	mov	r3, r5
 80078e2:	f04f 0000 	mov.w	r0, #0
 80078e6:	f04f 0100 	mov.w	r1, #0
 80078ea:	0159      	lsls	r1, r3, #5
 80078ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078f0:	0150      	lsls	r0, r2, #5
 80078f2:	4602      	mov	r2, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	4621      	mov	r1, r4
 80078f8:	1a51      	subs	r1, r2, r1
 80078fa:	62b9      	str	r1, [r7, #40]	; 0x28
 80078fc:	4629      	mov	r1, r5
 80078fe:	eb63 0301 	sbc.w	r3, r3, r1
 8007902:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007904:	f04f 0200 	mov.w	r2, #0
 8007908:	f04f 0300 	mov.w	r3, #0
 800790c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8007910:	4649      	mov	r1, r9
 8007912:	018b      	lsls	r3, r1, #6
 8007914:	4641      	mov	r1, r8
 8007916:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800791a:	4641      	mov	r1, r8
 800791c:	018a      	lsls	r2, r1, #6
 800791e:	4641      	mov	r1, r8
 8007920:	ebb2 0a01 	subs.w	sl, r2, r1
 8007924:	4649      	mov	r1, r9
 8007926:	eb63 0b01 	sbc.w	fp, r3, r1
 800792a:	f04f 0200 	mov.w	r2, #0
 800792e:	f04f 0300 	mov.w	r3, #0
 8007932:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007936:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800793a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800793e:	4692      	mov	sl, r2
 8007940:	469b      	mov	fp, r3
 8007942:	4623      	mov	r3, r4
 8007944:	eb1a 0303 	adds.w	r3, sl, r3
 8007948:	623b      	str	r3, [r7, #32]
 800794a:	462b      	mov	r3, r5
 800794c:	eb4b 0303 	adc.w	r3, fp, r3
 8007950:	627b      	str	r3, [r7, #36]	; 0x24
 8007952:	f04f 0200 	mov.w	r2, #0
 8007956:	f04f 0300 	mov.w	r3, #0
 800795a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800795e:	4629      	mov	r1, r5
 8007960:	028b      	lsls	r3, r1, #10
 8007962:	4621      	mov	r1, r4
 8007964:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007968:	4621      	mov	r1, r4
 800796a:	028a      	lsls	r2, r1, #10
 800796c:	4610      	mov	r0, r2
 800796e:	4619      	mov	r1, r3
 8007970:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007974:	2200      	movs	r2, #0
 8007976:	673b      	str	r3, [r7, #112]	; 0x70
 8007978:	677a      	str	r2, [r7, #116]	; 0x74
 800797a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800797e:	f7f9 f9a3 	bl	8000cc8 <__aeabi_uldivmod>
 8007982:	4602      	mov	r2, r0
 8007984:	460b      	mov	r3, r1
 8007986:	4613      	mov	r3, r2
 8007988:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800798c:	4b41      	ldr	r3, [pc, #260]	; (8007a94 <HAL_RCC_GetSysClockFreq+0x354>)
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	0c1b      	lsrs	r3, r3, #16
 8007992:	f003 0303 	and.w	r3, r3, #3
 8007996:	3301      	adds	r3, #1
 8007998:	005b      	lsls	r3, r3, #1
 800799a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800799e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80079a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80079a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80079aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80079ae:	e0eb      	b.n	8007b88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079b0:	4b38      	ldr	r3, [pc, #224]	; (8007a94 <HAL_RCC_GetSysClockFreq+0x354>)
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079bc:	4b35      	ldr	r3, [pc, #212]	; (8007a94 <HAL_RCC_GetSysClockFreq+0x354>)
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d06b      	beq.n	8007aa0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079c8:	4b32      	ldr	r3, [pc, #200]	; (8007a94 <HAL_RCC_GetSysClockFreq+0x354>)
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	099b      	lsrs	r3, r3, #6
 80079ce:	2200      	movs	r2, #0
 80079d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80079d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80079d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079da:	663b      	str	r3, [r7, #96]	; 0x60
 80079dc:	2300      	movs	r3, #0
 80079de:	667b      	str	r3, [r7, #100]	; 0x64
 80079e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80079e4:	4622      	mov	r2, r4
 80079e6:	462b      	mov	r3, r5
 80079e8:	f04f 0000 	mov.w	r0, #0
 80079ec:	f04f 0100 	mov.w	r1, #0
 80079f0:	0159      	lsls	r1, r3, #5
 80079f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079f6:	0150      	lsls	r0, r2, #5
 80079f8:	4602      	mov	r2, r0
 80079fa:	460b      	mov	r3, r1
 80079fc:	4621      	mov	r1, r4
 80079fe:	1a51      	subs	r1, r2, r1
 8007a00:	61b9      	str	r1, [r7, #24]
 8007a02:	4629      	mov	r1, r5
 8007a04:	eb63 0301 	sbc.w	r3, r3, r1
 8007a08:	61fb      	str	r3, [r7, #28]
 8007a0a:	f04f 0200 	mov.w	r2, #0
 8007a0e:	f04f 0300 	mov.w	r3, #0
 8007a12:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007a16:	4659      	mov	r1, fp
 8007a18:	018b      	lsls	r3, r1, #6
 8007a1a:	4651      	mov	r1, sl
 8007a1c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a20:	4651      	mov	r1, sl
 8007a22:	018a      	lsls	r2, r1, #6
 8007a24:	4651      	mov	r1, sl
 8007a26:	ebb2 0801 	subs.w	r8, r2, r1
 8007a2a:	4659      	mov	r1, fp
 8007a2c:	eb63 0901 	sbc.w	r9, r3, r1
 8007a30:	f04f 0200 	mov.w	r2, #0
 8007a34:	f04f 0300 	mov.w	r3, #0
 8007a38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a44:	4690      	mov	r8, r2
 8007a46:	4699      	mov	r9, r3
 8007a48:	4623      	mov	r3, r4
 8007a4a:	eb18 0303 	adds.w	r3, r8, r3
 8007a4e:	613b      	str	r3, [r7, #16]
 8007a50:	462b      	mov	r3, r5
 8007a52:	eb49 0303 	adc.w	r3, r9, r3
 8007a56:	617b      	str	r3, [r7, #20]
 8007a58:	f04f 0200 	mov.w	r2, #0
 8007a5c:	f04f 0300 	mov.w	r3, #0
 8007a60:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007a64:	4629      	mov	r1, r5
 8007a66:	024b      	lsls	r3, r1, #9
 8007a68:	4621      	mov	r1, r4
 8007a6a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007a6e:	4621      	mov	r1, r4
 8007a70:	024a      	lsls	r2, r1, #9
 8007a72:	4610      	mov	r0, r2
 8007a74:	4619      	mov	r1, r3
 8007a76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a7e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007a80:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007a84:	f7f9 f920 	bl	8000cc8 <__aeabi_uldivmod>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a92:	e065      	b.n	8007b60 <HAL_RCC_GetSysClockFreq+0x420>
 8007a94:	40023800 	.word	0x40023800
 8007a98:	00f42400 	.word	0x00f42400
 8007a9c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007aa0:	4b3d      	ldr	r3, [pc, #244]	; (8007b98 <HAL_RCC_GetSysClockFreq+0x458>)
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	099b      	lsrs	r3, r3, #6
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	4611      	mov	r1, r2
 8007aac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007ab0:	653b      	str	r3, [r7, #80]	; 0x50
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	657b      	str	r3, [r7, #84]	; 0x54
 8007ab6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8007aba:	4642      	mov	r2, r8
 8007abc:	464b      	mov	r3, r9
 8007abe:	f04f 0000 	mov.w	r0, #0
 8007ac2:	f04f 0100 	mov.w	r1, #0
 8007ac6:	0159      	lsls	r1, r3, #5
 8007ac8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007acc:	0150      	lsls	r0, r2, #5
 8007ace:	4602      	mov	r2, r0
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	4641      	mov	r1, r8
 8007ad4:	1a51      	subs	r1, r2, r1
 8007ad6:	60b9      	str	r1, [r7, #8]
 8007ad8:	4649      	mov	r1, r9
 8007ada:	eb63 0301 	sbc.w	r3, r3, r1
 8007ade:	60fb      	str	r3, [r7, #12]
 8007ae0:	f04f 0200 	mov.w	r2, #0
 8007ae4:	f04f 0300 	mov.w	r3, #0
 8007ae8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007aec:	4659      	mov	r1, fp
 8007aee:	018b      	lsls	r3, r1, #6
 8007af0:	4651      	mov	r1, sl
 8007af2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007af6:	4651      	mov	r1, sl
 8007af8:	018a      	lsls	r2, r1, #6
 8007afa:	4651      	mov	r1, sl
 8007afc:	1a54      	subs	r4, r2, r1
 8007afe:	4659      	mov	r1, fp
 8007b00:	eb63 0501 	sbc.w	r5, r3, r1
 8007b04:	f04f 0200 	mov.w	r2, #0
 8007b08:	f04f 0300 	mov.w	r3, #0
 8007b0c:	00eb      	lsls	r3, r5, #3
 8007b0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b12:	00e2      	lsls	r2, r4, #3
 8007b14:	4614      	mov	r4, r2
 8007b16:	461d      	mov	r5, r3
 8007b18:	4643      	mov	r3, r8
 8007b1a:	18e3      	adds	r3, r4, r3
 8007b1c:	603b      	str	r3, [r7, #0]
 8007b1e:	464b      	mov	r3, r9
 8007b20:	eb45 0303 	adc.w	r3, r5, r3
 8007b24:	607b      	str	r3, [r7, #4]
 8007b26:	f04f 0200 	mov.w	r2, #0
 8007b2a:	f04f 0300 	mov.w	r3, #0
 8007b2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b32:	4629      	mov	r1, r5
 8007b34:	028b      	lsls	r3, r1, #10
 8007b36:	4621      	mov	r1, r4
 8007b38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b3c:	4621      	mov	r1, r4
 8007b3e:	028a      	lsls	r2, r1, #10
 8007b40:	4610      	mov	r0, r2
 8007b42:	4619      	mov	r1, r3
 8007b44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b48:	2200      	movs	r2, #0
 8007b4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b4c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007b4e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007b52:	f7f9 f8b9 	bl	8000cc8 <__aeabi_uldivmod>
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007b60:	4b0d      	ldr	r3, [pc, #52]	; (8007b98 <HAL_RCC_GetSysClockFreq+0x458>)
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	0f1b      	lsrs	r3, r3, #28
 8007b66:	f003 0307 	and.w	r3, r3, #7
 8007b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8007b6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007b7e:	e003      	b.n	8007b88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b80:	4b06      	ldr	r3, [pc, #24]	; (8007b9c <HAL_RCC_GetSysClockFreq+0x45c>)
 8007b82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007b86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	37b8      	adds	r7, #184	; 0xb8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b96:	bf00      	nop
 8007b98:	40023800 	.word	0x40023800
 8007b9c:	00f42400 	.word	0x00f42400

08007ba0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b086      	sub	sp, #24
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e28d      	b.n	80080ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 8083 	beq.w	8007cc6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007bc0:	4b94      	ldr	r3, [pc, #592]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	f003 030c 	and.w	r3, r3, #12
 8007bc8:	2b04      	cmp	r3, #4
 8007bca:	d019      	beq.n	8007c00 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007bcc:	4b91      	ldr	r3, [pc, #580]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007bd4:	2b08      	cmp	r3, #8
 8007bd6:	d106      	bne.n	8007be6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007bd8:	4b8e      	ldr	r3, [pc, #568]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007be0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007be4:	d00c      	beq.n	8007c00 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007be6:	4b8b      	ldr	r3, [pc, #556]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007bee:	2b0c      	cmp	r3, #12
 8007bf0:	d112      	bne.n	8007c18 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bf2:	4b88      	ldr	r3, [pc, #544]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bfe:	d10b      	bne.n	8007c18 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c00:	4b84      	ldr	r3, [pc, #528]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d05b      	beq.n	8007cc4 <HAL_RCC_OscConfig+0x124>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d157      	bne.n	8007cc4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	e25a      	b.n	80080ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c20:	d106      	bne.n	8007c30 <HAL_RCC_OscConfig+0x90>
 8007c22:	4b7c      	ldr	r3, [pc, #496]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a7b      	ldr	r2, [pc, #492]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c2c:	6013      	str	r3, [r2, #0]
 8007c2e:	e01d      	b.n	8007c6c <HAL_RCC_OscConfig+0xcc>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c38:	d10c      	bne.n	8007c54 <HAL_RCC_OscConfig+0xb4>
 8007c3a:	4b76      	ldr	r3, [pc, #472]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a75      	ldr	r2, [pc, #468]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c44:	6013      	str	r3, [r2, #0]
 8007c46:	4b73      	ldr	r3, [pc, #460]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a72      	ldr	r2, [pc, #456]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c50:	6013      	str	r3, [r2, #0]
 8007c52:	e00b      	b.n	8007c6c <HAL_RCC_OscConfig+0xcc>
 8007c54:	4b6f      	ldr	r3, [pc, #444]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a6e      	ldr	r2, [pc, #440]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c5e:	6013      	str	r3, [r2, #0]
 8007c60:	4b6c      	ldr	r3, [pc, #432]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a6b      	ldr	r2, [pc, #428]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d013      	beq.n	8007c9c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c74:	f7fd fea8 	bl	80059c8 <HAL_GetTick>
 8007c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c7a:	e008      	b.n	8007c8e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c7c:	f7fd fea4 	bl	80059c8 <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	2b64      	cmp	r3, #100	; 0x64
 8007c88:	d901      	bls.n	8007c8e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e21f      	b.n	80080ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c8e:	4b61      	ldr	r3, [pc, #388]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d0f0      	beq.n	8007c7c <HAL_RCC_OscConfig+0xdc>
 8007c9a:	e014      	b.n	8007cc6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c9c:	f7fd fe94 	bl	80059c8 <HAL_GetTick>
 8007ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ca2:	e008      	b.n	8007cb6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ca4:	f7fd fe90 	bl	80059c8 <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	2b64      	cmp	r3, #100	; 0x64
 8007cb0:	d901      	bls.n	8007cb6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	e20b      	b.n	80080ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cb6:	4b57      	ldr	r3, [pc, #348]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1f0      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x104>
 8007cc2:	e000      	b.n	8007cc6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0302 	and.w	r3, r3, #2
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d06f      	beq.n	8007db2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007cd2:	4b50      	ldr	r3, [pc, #320]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f003 030c 	and.w	r3, r3, #12
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d017      	beq.n	8007d0e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007cde:	4b4d      	ldr	r3, [pc, #308]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007ce6:	2b08      	cmp	r3, #8
 8007ce8:	d105      	bne.n	8007cf6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007cea:	4b4a      	ldr	r3, [pc, #296]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00b      	beq.n	8007d0e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007cf6:	4b47      	ldr	r3, [pc, #284]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007cfe:	2b0c      	cmp	r3, #12
 8007d00:	d11c      	bne.n	8007d3c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d02:	4b44      	ldr	r3, [pc, #272]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d116      	bne.n	8007d3c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d0e:	4b41      	ldr	r3, [pc, #260]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 0302 	and.w	r3, r3, #2
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d005      	beq.n	8007d26 <HAL_RCC_OscConfig+0x186>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d001      	beq.n	8007d26 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e1d3      	b.n	80080ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d26:	4b3b      	ldr	r3, [pc, #236]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	00db      	lsls	r3, r3, #3
 8007d34:	4937      	ldr	r1, [pc, #220]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d3a:	e03a      	b.n	8007db2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d020      	beq.n	8007d86 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d44:	4b34      	ldr	r3, [pc, #208]	; (8007e18 <HAL_RCC_OscConfig+0x278>)
 8007d46:	2201      	movs	r2, #1
 8007d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d4a:	f7fd fe3d 	bl	80059c8 <HAL_GetTick>
 8007d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d50:	e008      	b.n	8007d64 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d52:	f7fd fe39 	bl	80059c8 <HAL_GetTick>
 8007d56:	4602      	mov	r2, r0
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	d901      	bls.n	8007d64 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007d60:	2303      	movs	r3, #3
 8007d62:	e1b4      	b.n	80080ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d64:	4b2b      	ldr	r3, [pc, #172]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0302 	and.w	r3, r3, #2
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d0f0      	beq.n	8007d52 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d70:	4b28      	ldr	r3, [pc, #160]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	00db      	lsls	r3, r3, #3
 8007d7e:	4925      	ldr	r1, [pc, #148]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007d80:	4313      	orrs	r3, r2
 8007d82:	600b      	str	r3, [r1, #0]
 8007d84:	e015      	b.n	8007db2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d86:	4b24      	ldr	r3, [pc, #144]	; (8007e18 <HAL_RCC_OscConfig+0x278>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d8c:	f7fd fe1c 	bl	80059c8 <HAL_GetTick>
 8007d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d92:	e008      	b.n	8007da6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d94:	f7fd fe18 	bl	80059c8 <HAL_GetTick>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d901      	bls.n	8007da6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e193      	b.n	80080ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007da6:	4b1b      	ldr	r3, [pc, #108]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0302 	and.w	r3, r3, #2
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1f0      	bne.n	8007d94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0308 	and.w	r3, r3, #8
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d036      	beq.n	8007e2c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d016      	beq.n	8007df4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007dc6:	4b15      	ldr	r3, [pc, #84]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007dc8:	2201      	movs	r2, #1
 8007dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dcc:	f7fd fdfc 	bl	80059c8 <HAL_GetTick>
 8007dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007dd2:	e008      	b.n	8007de6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007dd4:	f7fd fdf8 	bl	80059c8 <HAL_GetTick>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d901      	bls.n	8007de6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e173      	b.n	80080ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007de6:	4b0b      	ldr	r3, [pc, #44]	; (8007e14 <HAL_RCC_OscConfig+0x274>)
 8007de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dea:	f003 0302 	and.w	r3, r3, #2
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d0f0      	beq.n	8007dd4 <HAL_RCC_OscConfig+0x234>
 8007df2:	e01b      	b.n	8007e2c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007df4:	4b09      	ldr	r3, [pc, #36]	; (8007e1c <HAL_RCC_OscConfig+0x27c>)
 8007df6:	2200      	movs	r2, #0
 8007df8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dfa:	f7fd fde5 	bl	80059c8 <HAL_GetTick>
 8007dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e00:	e00e      	b.n	8007e20 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e02:	f7fd fde1 	bl	80059c8 <HAL_GetTick>
 8007e06:	4602      	mov	r2, r0
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	1ad3      	subs	r3, r2, r3
 8007e0c:	2b02      	cmp	r3, #2
 8007e0e:	d907      	bls.n	8007e20 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e15c      	b.n	80080ce <HAL_RCC_OscConfig+0x52e>
 8007e14:	40023800 	.word	0x40023800
 8007e18:	42470000 	.word	0x42470000
 8007e1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e20:	4b8a      	ldr	r3, [pc, #552]	; (800804c <HAL_RCC_OscConfig+0x4ac>)
 8007e22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e24:	f003 0302 	and.w	r3, r3, #2
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1ea      	bne.n	8007e02 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0304 	and.w	r3, r3, #4
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f000 8097 	beq.w	8007f68 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e3e:	4b83      	ldr	r3, [pc, #524]	; (800804c <HAL_RCC_OscConfig+0x4ac>)
 8007e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10f      	bne.n	8007e6a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60bb      	str	r3, [r7, #8]
 8007e4e:	4b7f      	ldr	r3, [pc, #508]	; (800804c <HAL_RCC_OscConfig+0x4ac>)
 8007e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e52:	4a7e      	ldr	r2, [pc, #504]	; (800804c <HAL_RCC_OscConfig+0x4ac>)
 8007e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e58:	6413      	str	r3, [r2, #64]	; 0x40
 8007e5a:	4b7c      	ldr	r3, [pc, #496]	; (800804c <HAL_RCC_OscConfig+0x4ac>)
 8007e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e62:	60bb      	str	r3, [r7, #8]
 8007e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e66:	2301      	movs	r3, #1
 8007e68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e6a:	4b79      	ldr	r3, [pc, #484]	; (8008050 <HAL_RCC_OscConfig+0x4b0>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d118      	bne.n	8007ea8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e76:	4b76      	ldr	r3, [pc, #472]	; (8008050 <HAL_RCC_OscConfig+0x4b0>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a75      	ldr	r2, [pc, #468]	; (8008050 <HAL_RCC_OscConfig+0x4b0>)
 8007e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e82:	f7fd fda1 	bl	80059c8 <HAL_GetTick>
 8007e86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e88:	e008      	b.n	8007e9c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e8a:	f7fd fd9d 	bl	80059c8 <HAL_GetTick>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	1ad3      	subs	r3, r2, r3
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d901      	bls.n	8007e9c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e118      	b.n	80080ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e9c:	4b6c      	ldr	r3, [pc, #432]	; (8008050 <HAL_RCC_OscConfig+0x4b0>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d0f0      	beq.n	8007e8a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d106      	bne.n	8007ebe <HAL_RCC_OscConfig+0x31e>
 8007eb0:	4b66      	ldr	r3, [pc, #408]	; (800804c <HAL_RCC_OscConfig+0x4ac>)
 8007eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb4:	4a65      	ldr	r2, [pc, #404]	; (800804c <HAL_RCC_OscConfig+0x4ac>)
 8007eb6:	f043 0301 	orr.w	r3, r3, #1
 8007eba:	6713      	str	r3, [r2, #112]	; 0x70
 8007ebc:	e01c      	b.n	8007ef8 <HAL_RCC_OscConfig+0x358>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	2b05      	cmp	r3, #5
 8007ec4:	d10c      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x340>
 8007ec6:	4b61      	ldr	r3, [pc, #388]	; (800804c <HAL_RCC_OscConfig+0x4ac>)
 8007ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eca:	4a60      	ldr	r2, [pc, #384]	; (800804c <HAL_RCC_OscConfig+0x4ac>)
 8007ecc:	f043 0304 	orr.w	r3, r3, #4
 8007ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8007ed2:	4b5e      	ldr	r3, [pc, #376]	; (800804c <HAL_RCC_OscConfig+0x4ac>)
 8007ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ed6:	4a5d      	ldr	r2, [pc, #372]	; (800804c <HAL_RCC_OscConfig+0x4ac>)
 8007ed8:	f043 0301 	orr.w	r3, r3, #1
 8007edc:	6713      	str	r3, [r2, #112]	; 0x70
 8007ede:	e00b      	b.n	8007ef8 <HAL_RCC_OscConfig+0x358>
 8007ee0:	4b5a      	ldr	r3, [pc, #360]	; (800804c <HAL_RCC_OscConfig+0x4ac>)
 8007ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee4:	4a59      	ldr	r2, [pc, #356]	; (800804c <HAL_RCC_OscConfig+0x4ac>)
 8007ee6:	f023 0301 	bic.w	r3, r3, #1
 8007eea:	6713      	str	r3, [r2, #112]	; 0x70
 8007eec:	4b57      	ldr	r3, [pc, #348]	; (800804c <HAL_RCC_OscConfig+0x4ac>)
 8007eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ef0:	4a56      	ldr	r2, [pc, #344]	; (800804c <HAL_RCC_OscConfig+0x4ac>)
 8007ef2:	f023 0304 	bic.w	r3, r3, #4
 8007ef6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d015      	beq.n	8007f2c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f00:	f7fd fd62 	bl	80059c8 <HAL_GetTick>
 8007f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f06:	e00a      	b.n	8007f1e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f08:	f7fd fd5e 	bl	80059c8 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d901      	bls.n	8007f1e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e0d7      	b.n	80080ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f1e:	4b4b      	ldr	r3, [pc, #300]	; (800804c <HAL_RCC_OscConfig+0x4ac>)
 8007f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f22:	f003 0302 	and.w	r3, r3, #2
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d0ee      	beq.n	8007f08 <HAL_RCC_OscConfig+0x368>
 8007f2a:	e014      	b.n	8007f56 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f2c:	f7fd fd4c 	bl	80059c8 <HAL_GetTick>
 8007f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f32:	e00a      	b.n	8007f4a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f34:	f7fd fd48 	bl	80059c8 <HAL_GetTick>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d901      	bls.n	8007f4a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007f46:	2303      	movs	r3, #3
 8007f48:	e0c1      	b.n	80080ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f4a:	4b40      	ldr	r3, [pc, #256]	; (800804c <HAL_RCC_OscConfig+0x4ac>)
 8007f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f4e:	f003 0302 	and.w	r3, r3, #2
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1ee      	bne.n	8007f34 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f56:	7dfb      	ldrb	r3, [r7, #23]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d105      	bne.n	8007f68 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f5c:	4b3b      	ldr	r3, [pc, #236]	; (800804c <HAL_RCC_OscConfig+0x4ac>)
 8007f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f60:	4a3a      	ldr	r2, [pc, #232]	; (800804c <HAL_RCC_OscConfig+0x4ac>)
 8007f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	699b      	ldr	r3, [r3, #24]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f000 80ad 	beq.w	80080cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007f72:	4b36      	ldr	r3, [pc, #216]	; (800804c <HAL_RCC_OscConfig+0x4ac>)
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f003 030c 	and.w	r3, r3, #12
 8007f7a:	2b08      	cmp	r3, #8
 8007f7c:	d060      	beq.n	8008040 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d145      	bne.n	8008012 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f86:	4b33      	ldr	r3, [pc, #204]	; (8008054 <HAL_RCC_OscConfig+0x4b4>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f8c:	f7fd fd1c 	bl	80059c8 <HAL_GetTick>
 8007f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f92:	e008      	b.n	8007fa6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f94:	f7fd fd18 	bl	80059c8 <HAL_GetTick>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d901      	bls.n	8007fa6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e093      	b.n	80080ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fa6:	4b29      	ldr	r3, [pc, #164]	; (800804c <HAL_RCC_OscConfig+0x4ac>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d1f0      	bne.n	8007f94 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	69da      	ldr	r2, [r3, #28]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	431a      	orrs	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc0:	019b      	lsls	r3, r3, #6
 8007fc2:	431a      	orrs	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc8:	085b      	lsrs	r3, r3, #1
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	041b      	lsls	r3, r3, #16
 8007fce:	431a      	orrs	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd4:	061b      	lsls	r3, r3, #24
 8007fd6:	431a      	orrs	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fdc:	071b      	lsls	r3, r3, #28
 8007fde:	491b      	ldr	r1, [pc, #108]	; (800804c <HAL_RCC_OscConfig+0x4ac>)
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007fe4:	4b1b      	ldr	r3, [pc, #108]	; (8008054 <HAL_RCC_OscConfig+0x4b4>)
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fea:	f7fd fced 	bl	80059c8 <HAL_GetTick>
 8007fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ff0:	e008      	b.n	8008004 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ff2:	f7fd fce9 	bl	80059c8 <HAL_GetTick>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d901      	bls.n	8008004 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008000:	2303      	movs	r3, #3
 8008002:	e064      	b.n	80080ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008004:	4b11      	ldr	r3, [pc, #68]	; (800804c <HAL_RCC_OscConfig+0x4ac>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800800c:	2b00      	cmp	r3, #0
 800800e:	d0f0      	beq.n	8007ff2 <HAL_RCC_OscConfig+0x452>
 8008010:	e05c      	b.n	80080cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008012:	4b10      	ldr	r3, [pc, #64]	; (8008054 <HAL_RCC_OscConfig+0x4b4>)
 8008014:	2200      	movs	r2, #0
 8008016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008018:	f7fd fcd6 	bl	80059c8 <HAL_GetTick>
 800801c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800801e:	e008      	b.n	8008032 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008020:	f7fd fcd2 	bl	80059c8 <HAL_GetTick>
 8008024:	4602      	mov	r2, r0
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	2b02      	cmp	r3, #2
 800802c:	d901      	bls.n	8008032 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800802e:	2303      	movs	r3, #3
 8008030:	e04d      	b.n	80080ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008032:	4b06      	ldr	r3, [pc, #24]	; (800804c <HAL_RCC_OscConfig+0x4ac>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1f0      	bne.n	8008020 <HAL_RCC_OscConfig+0x480>
 800803e:	e045      	b.n	80080cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d107      	bne.n	8008058 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	e040      	b.n	80080ce <HAL_RCC_OscConfig+0x52e>
 800804c:	40023800 	.word	0x40023800
 8008050:	40007000 	.word	0x40007000
 8008054:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008058:	4b1f      	ldr	r3, [pc, #124]	; (80080d8 <HAL_RCC_OscConfig+0x538>)
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d030      	beq.n	80080c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008070:	429a      	cmp	r2, r3
 8008072:	d129      	bne.n	80080c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800807e:	429a      	cmp	r2, r3
 8008080:	d122      	bne.n	80080c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008088:	4013      	ands	r3, r2
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800808e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008090:	4293      	cmp	r3, r2
 8008092:	d119      	bne.n	80080c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809e:	085b      	lsrs	r3, r3, #1
 80080a0:	3b01      	subs	r3, #1
 80080a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d10f      	bne.n	80080c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d107      	bne.n	80080c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d001      	beq.n	80080cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	e000      	b.n	80080ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3718      	adds	r7, #24
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	40023800 	.word	0x40023800

080080dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d101      	bne.n	80080ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e07b      	b.n	80081e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d108      	bne.n	8008108 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080fe:	d009      	beq.n	8008114 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	61da      	str	r2, [r3, #28]
 8008106:	e005      	b.n	8008114 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008120:	b2db      	uxtb	r3, r3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d106      	bne.n	8008134 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7fc fcae 	bl	8004a90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2202      	movs	r2, #2
 8008138:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800814a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800815c:	431a      	orrs	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008166:	431a      	orrs	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	f003 0302 	and.w	r3, r3, #2
 8008170:	431a      	orrs	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	695b      	ldr	r3, [r3, #20]
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	431a      	orrs	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008184:	431a      	orrs	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	69db      	ldr	r3, [r3, #28]
 800818a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800818e:	431a      	orrs	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a1b      	ldr	r3, [r3, #32]
 8008194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008198:	ea42 0103 	orr.w	r1, r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	430a      	orrs	r2, r1
 80081aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	0c1b      	lsrs	r3, r3, #16
 80081b2:	f003 0104 	and.w	r1, r3, #4
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ba:	f003 0210 	and.w	r2, r3, #16
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	69da      	ldr	r2, [r3, #28]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b08c      	sub	sp, #48	; 0x30
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	60f8      	str	r0, [r7, #12]
 80081f6:	60b9      	str	r1, [r7, #8]
 80081f8:	607a      	str	r2, [r7, #4]
 80081fa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80081fc:	2301      	movs	r3, #1
 80081fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800820c:	2b01      	cmp	r3, #1
 800820e:	d101      	bne.n	8008214 <HAL_SPI_TransmitReceive+0x26>
 8008210:	2302      	movs	r3, #2
 8008212:	e18a      	b.n	800852a <HAL_SPI_TransmitReceive+0x33c>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800821c:	f7fd fbd4 	bl	80059c8 <HAL_GetTick>
 8008220:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008228:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008232:	887b      	ldrh	r3, [r7, #2]
 8008234:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008236:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800823a:	2b01      	cmp	r3, #1
 800823c:	d00f      	beq.n	800825e <HAL_SPI_TransmitReceive+0x70>
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008244:	d107      	bne.n	8008256 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d103      	bne.n	8008256 <HAL_SPI_TransmitReceive+0x68>
 800824e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008252:	2b04      	cmp	r3, #4
 8008254:	d003      	beq.n	800825e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008256:	2302      	movs	r3, #2
 8008258:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800825c:	e15b      	b.n	8008516 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d005      	beq.n	8008270 <HAL_SPI_TransmitReceive+0x82>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d002      	beq.n	8008270 <HAL_SPI_TransmitReceive+0x82>
 800826a:	887b      	ldrh	r3, [r7, #2]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d103      	bne.n	8008278 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008276:	e14e      	b.n	8008516 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b04      	cmp	r3, #4
 8008282:	d003      	beq.n	800828c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2205      	movs	r2, #5
 8008288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	887a      	ldrh	r2, [r7, #2]
 800829c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	887a      	ldrh	r2, [r7, #2]
 80082a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	887a      	ldrh	r2, [r7, #2]
 80082ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	887a      	ldrh	r2, [r7, #2]
 80082b4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082cc:	2b40      	cmp	r3, #64	; 0x40
 80082ce:	d007      	beq.n	80082e0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082e8:	d178      	bne.n	80083dc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d002      	beq.n	80082f8 <HAL_SPI_TransmitReceive+0x10a>
 80082f2:	8b7b      	ldrh	r3, [r7, #26]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d166      	bne.n	80083c6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082fc:	881a      	ldrh	r2, [r3, #0]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008308:	1c9a      	adds	r2, r3, #2
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008312:	b29b      	uxth	r3, r3
 8008314:	3b01      	subs	r3, #1
 8008316:	b29a      	uxth	r2, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800831c:	e053      	b.n	80083c6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	f003 0302 	and.w	r3, r3, #2
 8008328:	2b02      	cmp	r3, #2
 800832a:	d11b      	bne.n	8008364 <HAL_SPI_TransmitReceive+0x176>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008330:	b29b      	uxth	r3, r3
 8008332:	2b00      	cmp	r3, #0
 8008334:	d016      	beq.n	8008364 <HAL_SPI_TransmitReceive+0x176>
 8008336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008338:	2b01      	cmp	r3, #1
 800833a:	d113      	bne.n	8008364 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008340:	881a      	ldrh	r2, [r3, #0]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800834c:	1c9a      	adds	r2, r3, #2
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008356:	b29b      	uxth	r3, r3
 8008358:	3b01      	subs	r3, #1
 800835a:	b29a      	uxth	r2, r3
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008360:	2300      	movs	r3, #0
 8008362:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	f003 0301 	and.w	r3, r3, #1
 800836e:	2b01      	cmp	r3, #1
 8008370:	d119      	bne.n	80083a6 <HAL_SPI_TransmitReceive+0x1b8>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008376:	b29b      	uxth	r3, r3
 8008378:	2b00      	cmp	r3, #0
 800837a:	d014      	beq.n	80083a6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68da      	ldr	r2, [r3, #12]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008386:	b292      	uxth	r2, r2
 8008388:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838e:	1c9a      	adds	r2, r3, #2
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008398:	b29b      	uxth	r3, r3
 800839a:	3b01      	subs	r3, #1
 800839c:	b29a      	uxth	r2, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80083a2:	2301      	movs	r3, #1
 80083a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80083a6:	f7fd fb0f 	bl	80059c8 <HAL_GetTick>
 80083aa:	4602      	mov	r2, r0
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d807      	bhi.n	80083c6 <HAL_SPI_TransmitReceive+0x1d8>
 80083b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083bc:	d003      	beq.n	80083c6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80083be:	2303      	movs	r3, #3
 80083c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80083c4:	e0a7      	b.n	8008516 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1a6      	bne.n	800831e <HAL_SPI_TransmitReceive+0x130>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1a1      	bne.n	800831e <HAL_SPI_TransmitReceive+0x130>
 80083da:	e07c      	b.n	80084d6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d002      	beq.n	80083ea <HAL_SPI_TransmitReceive+0x1fc>
 80083e4:	8b7b      	ldrh	r3, [r7, #26]
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d16b      	bne.n	80084c2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	330c      	adds	r3, #12
 80083f4:	7812      	ldrb	r2, [r2, #0]
 80083f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083fc:	1c5a      	adds	r2, r3, #1
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008406:	b29b      	uxth	r3, r3
 8008408:	3b01      	subs	r3, #1
 800840a:	b29a      	uxth	r2, r3
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008410:	e057      	b.n	80084c2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	f003 0302 	and.w	r3, r3, #2
 800841c:	2b02      	cmp	r3, #2
 800841e:	d11c      	bne.n	800845a <HAL_SPI_TransmitReceive+0x26c>
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008424:	b29b      	uxth	r3, r3
 8008426:	2b00      	cmp	r3, #0
 8008428:	d017      	beq.n	800845a <HAL_SPI_TransmitReceive+0x26c>
 800842a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842c:	2b01      	cmp	r3, #1
 800842e:	d114      	bne.n	800845a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	330c      	adds	r3, #12
 800843a:	7812      	ldrb	r2, [r2, #0]
 800843c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008442:	1c5a      	adds	r2, r3, #1
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800844c:	b29b      	uxth	r3, r3
 800844e:	3b01      	subs	r3, #1
 8008450:	b29a      	uxth	r2, r3
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008456:	2300      	movs	r3, #0
 8008458:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f003 0301 	and.w	r3, r3, #1
 8008464:	2b01      	cmp	r3, #1
 8008466:	d119      	bne.n	800849c <HAL_SPI_TransmitReceive+0x2ae>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800846c:	b29b      	uxth	r3, r3
 800846e:	2b00      	cmp	r3, #0
 8008470:	d014      	beq.n	800849c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68da      	ldr	r2, [r3, #12]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847c:	b2d2      	uxtb	r2, r2
 800847e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008484:	1c5a      	adds	r2, r3, #1
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800848e:	b29b      	uxth	r3, r3
 8008490:	3b01      	subs	r3, #1
 8008492:	b29a      	uxth	r2, r3
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008498:	2301      	movs	r3, #1
 800849a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800849c:	f7fd fa94 	bl	80059c8 <HAL_GetTick>
 80084a0:	4602      	mov	r2, r0
 80084a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d803      	bhi.n	80084b4 <HAL_SPI_TransmitReceive+0x2c6>
 80084ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084b2:	d102      	bne.n	80084ba <HAL_SPI_TransmitReceive+0x2cc>
 80084b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d103      	bne.n	80084c2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80084c0:	e029      	b.n	8008516 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1a2      	bne.n	8008412 <HAL_SPI_TransmitReceive+0x224>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d19d      	bne.n	8008412 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80084d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f000 f8b2 	bl	8008644 <SPI_EndRxTxTransaction>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d006      	beq.n	80084f4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2220      	movs	r2, #32
 80084f0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80084f2:	e010      	b.n	8008516 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10b      	bne.n	8008514 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084fc:	2300      	movs	r3, #0
 80084fe:	617b      	str	r3, [r7, #20]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	617b      	str	r3, [r7, #20]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	617b      	str	r3, [r7, #20]
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	e000      	b.n	8008516 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008514:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008526:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800852a:	4618      	mov	r0, r3
 800852c:	3730      	adds	r7, #48	; 0x30
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
	...

08008534 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b088      	sub	sp, #32
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	603b      	str	r3, [r7, #0]
 8008540:	4613      	mov	r3, r2
 8008542:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008544:	f7fd fa40 	bl	80059c8 <HAL_GetTick>
 8008548:	4602      	mov	r2, r0
 800854a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854c:	1a9b      	subs	r3, r3, r2
 800854e:	683a      	ldr	r2, [r7, #0]
 8008550:	4413      	add	r3, r2
 8008552:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008554:	f7fd fa38 	bl	80059c8 <HAL_GetTick>
 8008558:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800855a:	4b39      	ldr	r3, [pc, #228]	; (8008640 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	015b      	lsls	r3, r3, #5
 8008560:	0d1b      	lsrs	r3, r3, #20
 8008562:	69fa      	ldr	r2, [r7, #28]
 8008564:	fb02 f303 	mul.w	r3, r2, r3
 8008568:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800856a:	e054      	b.n	8008616 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008572:	d050      	beq.n	8008616 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008574:	f7fd fa28 	bl	80059c8 <HAL_GetTick>
 8008578:	4602      	mov	r2, r0
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	69fa      	ldr	r2, [r7, #28]
 8008580:	429a      	cmp	r2, r3
 8008582:	d902      	bls.n	800858a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d13d      	bne.n	8008606 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	685a      	ldr	r2, [r3, #4]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008598:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085a2:	d111      	bne.n	80085c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085ac:	d004      	beq.n	80085b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085b6:	d107      	bne.n	80085c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085d0:	d10f      	bne.n	80085f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085e0:	601a      	str	r2, [r3, #0]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	e017      	b.n	8008636 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d101      	bne.n	8008610 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800860c:	2300      	movs	r3, #0
 800860e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	3b01      	subs	r3, #1
 8008614:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	689a      	ldr	r2, [r3, #8]
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	4013      	ands	r3, r2
 8008620:	68ba      	ldr	r2, [r7, #8]
 8008622:	429a      	cmp	r2, r3
 8008624:	bf0c      	ite	eq
 8008626:	2301      	moveq	r3, #1
 8008628:	2300      	movne	r3, #0
 800862a:	b2db      	uxtb	r3, r3
 800862c:	461a      	mov	r2, r3
 800862e:	79fb      	ldrb	r3, [r7, #7]
 8008630:	429a      	cmp	r2, r3
 8008632:	d19b      	bne.n	800856c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3720      	adds	r7, #32
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	20000040 	.word	0x20000040

08008644 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b088      	sub	sp, #32
 8008648:	af02      	add	r7, sp, #8
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008650:	4b1b      	ldr	r3, [pc, #108]	; (80086c0 <SPI_EndRxTxTransaction+0x7c>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a1b      	ldr	r2, [pc, #108]	; (80086c4 <SPI_EndRxTxTransaction+0x80>)
 8008656:	fba2 2303 	umull	r2, r3, r2, r3
 800865a:	0d5b      	lsrs	r3, r3, #21
 800865c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008660:	fb02 f303 	mul.w	r3, r2, r3
 8008664:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800866e:	d112      	bne.n	8008696 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	2200      	movs	r2, #0
 8008678:	2180      	movs	r1, #128	; 0x80
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	f7ff ff5a 	bl	8008534 <SPI_WaitFlagStateUntilTimeout>
 8008680:	4603      	mov	r3, r0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d016      	beq.n	80086b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800868a:	f043 0220 	orr.w	r2, r3, #32
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e00f      	b.n	80086b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d00a      	beq.n	80086b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	3b01      	subs	r3, #1
 80086a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086ac:	2b80      	cmp	r3, #128	; 0x80
 80086ae:	d0f2      	beq.n	8008696 <SPI_EndRxTxTransaction+0x52>
 80086b0:	e000      	b.n	80086b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80086b2:	bf00      	nop
  }

  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3718      	adds	r7, #24
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	20000040 	.word	0x20000040
 80086c4:	165e9f81 	.word	0x165e9f81

080086c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d101      	bne.n	80086da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e041      	b.n	800875e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d106      	bne.n	80086f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f7fc ffda 	bl	80056a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2202      	movs	r2, #2
 80086f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	3304      	adds	r3, #4
 8008704:	4619      	mov	r1, r3
 8008706:	4610      	mov	r0, r2
 8008708:	f000 fc84 	bl	8009014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
	...

08008768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008776:	b2db      	uxtb	r3, r3
 8008778:	2b01      	cmp	r3, #1
 800877a:	d001      	beq.n	8008780 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	e04e      	b.n	800881e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2202      	movs	r2, #2
 8008784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68da      	ldr	r2, [r3, #12]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f042 0201 	orr.w	r2, r2, #1
 8008796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a23      	ldr	r2, [pc, #140]	; (800882c <HAL_TIM_Base_Start_IT+0xc4>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d022      	beq.n	80087e8 <HAL_TIM_Base_Start_IT+0x80>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087aa:	d01d      	beq.n	80087e8 <HAL_TIM_Base_Start_IT+0x80>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a1f      	ldr	r2, [pc, #124]	; (8008830 <HAL_TIM_Base_Start_IT+0xc8>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d018      	beq.n	80087e8 <HAL_TIM_Base_Start_IT+0x80>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a1e      	ldr	r2, [pc, #120]	; (8008834 <HAL_TIM_Base_Start_IT+0xcc>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d013      	beq.n	80087e8 <HAL_TIM_Base_Start_IT+0x80>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a1c      	ldr	r2, [pc, #112]	; (8008838 <HAL_TIM_Base_Start_IT+0xd0>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d00e      	beq.n	80087e8 <HAL_TIM_Base_Start_IT+0x80>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a1b      	ldr	r2, [pc, #108]	; (800883c <HAL_TIM_Base_Start_IT+0xd4>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d009      	beq.n	80087e8 <HAL_TIM_Base_Start_IT+0x80>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a19      	ldr	r2, [pc, #100]	; (8008840 <HAL_TIM_Base_Start_IT+0xd8>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d004      	beq.n	80087e8 <HAL_TIM_Base_Start_IT+0x80>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a18      	ldr	r2, [pc, #96]	; (8008844 <HAL_TIM_Base_Start_IT+0xdc>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d111      	bne.n	800880c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	f003 0307 	and.w	r3, r3, #7
 80087f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2b06      	cmp	r3, #6
 80087f8:	d010      	beq.n	800881c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f042 0201 	orr.w	r2, r2, #1
 8008808:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800880a:	e007      	b.n	800881c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f042 0201 	orr.w	r2, r2, #1
 800881a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3714      	adds	r7, #20
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	40010000 	.word	0x40010000
 8008830:	40000400 	.word	0x40000400
 8008834:	40000800 	.word	0x40000800
 8008838:	40000c00 	.word	0x40000c00
 800883c:	40010400 	.word	0x40010400
 8008840:	40014000 	.word	0x40014000
 8008844:	40001800 	.word	0x40001800

08008848 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d101      	bne.n	800885a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e041      	b.n	80088de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008860:	b2db      	uxtb	r3, r3
 8008862:	2b00      	cmp	r3, #0
 8008864:	d106      	bne.n	8008874 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f839 	bl	80088e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2202      	movs	r2, #2
 8008878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	3304      	adds	r3, #4
 8008884:	4619      	mov	r1, r3
 8008886:	4610      	mov	r0, r2
 8008888:	f000 fbc4 	bl	8009014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3708      	adds	r7, #8
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80088e6:	b480      	push	{r7}
 80088e8:	b083      	sub	sp, #12
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80088ee:	bf00      	nop
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
	...

080088fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d109      	bne.n	8008920 <HAL_TIM_PWM_Start+0x24>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008912:	b2db      	uxtb	r3, r3
 8008914:	2b01      	cmp	r3, #1
 8008916:	bf14      	ite	ne
 8008918:	2301      	movne	r3, #1
 800891a:	2300      	moveq	r3, #0
 800891c:	b2db      	uxtb	r3, r3
 800891e:	e022      	b.n	8008966 <HAL_TIM_PWM_Start+0x6a>
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	2b04      	cmp	r3, #4
 8008924:	d109      	bne.n	800893a <HAL_TIM_PWM_Start+0x3e>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800892c:	b2db      	uxtb	r3, r3
 800892e:	2b01      	cmp	r3, #1
 8008930:	bf14      	ite	ne
 8008932:	2301      	movne	r3, #1
 8008934:	2300      	moveq	r3, #0
 8008936:	b2db      	uxtb	r3, r3
 8008938:	e015      	b.n	8008966 <HAL_TIM_PWM_Start+0x6a>
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	2b08      	cmp	r3, #8
 800893e:	d109      	bne.n	8008954 <HAL_TIM_PWM_Start+0x58>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008946:	b2db      	uxtb	r3, r3
 8008948:	2b01      	cmp	r3, #1
 800894a:	bf14      	ite	ne
 800894c:	2301      	movne	r3, #1
 800894e:	2300      	moveq	r3, #0
 8008950:	b2db      	uxtb	r3, r3
 8008952:	e008      	b.n	8008966 <HAL_TIM_PWM_Start+0x6a>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800895a:	b2db      	uxtb	r3, r3
 800895c:	2b01      	cmp	r3, #1
 800895e:	bf14      	ite	ne
 8008960:	2301      	movne	r3, #1
 8008962:	2300      	moveq	r3, #0
 8008964:	b2db      	uxtb	r3, r3
 8008966:	2b00      	cmp	r3, #0
 8008968:	d001      	beq.n	800896e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e07c      	b.n	8008a68 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d104      	bne.n	800897e <HAL_TIM_PWM_Start+0x82>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2202      	movs	r2, #2
 8008978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800897c:	e013      	b.n	80089a6 <HAL_TIM_PWM_Start+0xaa>
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	2b04      	cmp	r3, #4
 8008982:	d104      	bne.n	800898e <HAL_TIM_PWM_Start+0x92>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2202      	movs	r2, #2
 8008988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800898c:	e00b      	b.n	80089a6 <HAL_TIM_PWM_Start+0xaa>
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	2b08      	cmp	r3, #8
 8008992:	d104      	bne.n	800899e <HAL_TIM_PWM_Start+0xa2>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2202      	movs	r2, #2
 8008998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800899c:	e003      	b.n	80089a6 <HAL_TIM_PWM_Start+0xaa>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2202      	movs	r2, #2
 80089a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2201      	movs	r2, #1
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	4618      	mov	r0, r3
 80089b0:	f000 fe1a 	bl	80095e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a2d      	ldr	r2, [pc, #180]	; (8008a70 <HAL_TIM_PWM_Start+0x174>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d004      	beq.n	80089c8 <HAL_TIM_PWM_Start+0xcc>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a2c      	ldr	r2, [pc, #176]	; (8008a74 <HAL_TIM_PWM_Start+0x178>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d101      	bne.n	80089cc <HAL_TIM_PWM_Start+0xd0>
 80089c8:	2301      	movs	r3, #1
 80089ca:	e000      	b.n	80089ce <HAL_TIM_PWM_Start+0xd2>
 80089cc:	2300      	movs	r3, #0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d007      	beq.n	80089e2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a22      	ldr	r2, [pc, #136]	; (8008a70 <HAL_TIM_PWM_Start+0x174>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d022      	beq.n	8008a32 <HAL_TIM_PWM_Start+0x136>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089f4:	d01d      	beq.n	8008a32 <HAL_TIM_PWM_Start+0x136>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a1f      	ldr	r2, [pc, #124]	; (8008a78 <HAL_TIM_PWM_Start+0x17c>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d018      	beq.n	8008a32 <HAL_TIM_PWM_Start+0x136>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a1d      	ldr	r2, [pc, #116]	; (8008a7c <HAL_TIM_PWM_Start+0x180>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d013      	beq.n	8008a32 <HAL_TIM_PWM_Start+0x136>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a1c      	ldr	r2, [pc, #112]	; (8008a80 <HAL_TIM_PWM_Start+0x184>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d00e      	beq.n	8008a32 <HAL_TIM_PWM_Start+0x136>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a16      	ldr	r2, [pc, #88]	; (8008a74 <HAL_TIM_PWM_Start+0x178>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d009      	beq.n	8008a32 <HAL_TIM_PWM_Start+0x136>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a18      	ldr	r2, [pc, #96]	; (8008a84 <HAL_TIM_PWM_Start+0x188>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d004      	beq.n	8008a32 <HAL_TIM_PWM_Start+0x136>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a16      	ldr	r2, [pc, #88]	; (8008a88 <HAL_TIM_PWM_Start+0x18c>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d111      	bne.n	8008a56 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	f003 0307 	and.w	r3, r3, #7
 8008a3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2b06      	cmp	r3, #6
 8008a42:	d010      	beq.n	8008a66 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f042 0201 	orr.w	r2, r2, #1
 8008a52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a54:	e007      	b.n	8008a66 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f042 0201 	orr.w	r2, r2, #1
 8008a64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3710      	adds	r7, #16
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	40010000 	.word	0x40010000
 8008a74:	40010400 	.word	0x40010400
 8008a78:	40000400 	.word	0x40000400
 8008a7c:	40000800 	.word	0x40000800
 8008a80:	40000c00 	.word	0x40000c00
 8008a84:	40014000 	.word	0x40014000
 8008a88:	40001800 	.word	0x40001800

08008a8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	f003 0302 	and.w	r3, r3, #2
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d122      	bne.n	8008ae8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	f003 0302 	and.w	r3, r3, #2
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d11b      	bne.n	8008ae8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f06f 0202 	mvn.w	r2, #2
 8008ab8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2201      	movs	r2, #1
 8008abe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	699b      	ldr	r3, [r3, #24]
 8008ac6:	f003 0303 	and.w	r3, r3, #3
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d003      	beq.n	8008ad6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 fa81 	bl	8008fd6 <HAL_TIM_IC_CaptureCallback>
 8008ad4:	e005      	b.n	8008ae2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fa73 	bl	8008fc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 fa84 	bl	8008fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	f003 0304 	and.w	r3, r3, #4
 8008af2:	2b04      	cmp	r3, #4
 8008af4:	d122      	bne.n	8008b3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	f003 0304 	and.w	r3, r3, #4
 8008b00:	2b04      	cmp	r3, #4
 8008b02:	d11b      	bne.n	8008b3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f06f 0204 	mvn.w	r2, #4
 8008b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2202      	movs	r2, #2
 8008b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d003      	beq.n	8008b2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 fa57 	bl	8008fd6 <HAL_TIM_IC_CaptureCallback>
 8008b28:	e005      	b.n	8008b36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fa49 	bl	8008fc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fa5a 	bl	8008fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	f003 0308 	and.w	r3, r3, #8
 8008b46:	2b08      	cmp	r3, #8
 8008b48:	d122      	bne.n	8008b90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	f003 0308 	and.w	r3, r3, #8
 8008b54:	2b08      	cmp	r3, #8
 8008b56:	d11b      	bne.n	8008b90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f06f 0208 	mvn.w	r2, #8
 8008b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2204      	movs	r2, #4
 8008b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	f003 0303 	and.w	r3, r3, #3
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fa2d 	bl	8008fd6 <HAL_TIM_IC_CaptureCallback>
 8008b7c:	e005      	b.n	8008b8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fa1f 	bl	8008fc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 fa30 	bl	8008fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	f003 0310 	and.w	r3, r3, #16
 8008b9a:	2b10      	cmp	r3, #16
 8008b9c:	d122      	bne.n	8008be4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	f003 0310 	and.w	r3, r3, #16
 8008ba8:	2b10      	cmp	r3, #16
 8008baa:	d11b      	bne.n	8008be4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f06f 0210 	mvn.w	r2, #16
 8008bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2208      	movs	r2, #8
 8008bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	69db      	ldr	r3, [r3, #28]
 8008bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d003      	beq.n	8008bd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fa03 	bl	8008fd6 <HAL_TIM_IC_CaptureCallback>
 8008bd0:	e005      	b.n	8008bde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f9f5 	bl	8008fc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 fa06 	bl	8008fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	f003 0301 	and.w	r3, r3, #1
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d10e      	bne.n	8008c10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	f003 0301 	and.w	r3, r3, #1
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d107      	bne.n	8008c10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f06f 0201 	mvn.w	r2, #1
 8008c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 f9cf 	bl	8008fae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c1a:	2b80      	cmp	r3, #128	; 0x80
 8008c1c:	d10e      	bne.n	8008c3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c28:	2b80      	cmp	r3, #128	; 0x80
 8008c2a:	d107      	bne.n	8008c3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fdd4 	bl	80097e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c46:	2b40      	cmp	r3, #64	; 0x40
 8008c48:	d10e      	bne.n	8008c68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c54:	2b40      	cmp	r3, #64	; 0x40
 8008c56:	d107      	bne.n	8008c68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f9cb 	bl	8008ffe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	f003 0320 	and.w	r3, r3, #32
 8008c72:	2b20      	cmp	r3, #32
 8008c74:	d10e      	bne.n	8008c94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	f003 0320 	and.w	r3, r3, #32
 8008c80:	2b20      	cmp	r3, #32
 8008c82:	d107      	bne.n	8008c94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f06f 0220 	mvn.w	r2, #32
 8008c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fd9e 	bl	80097d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c94:	bf00      	nop
 8008c96:	3708      	adds	r7, #8
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b086      	sub	sp, #24
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d101      	bne.n	8008cba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008cb6:	2302      	movs	r3, #2
 8008cb8:	e0ae      	b.n	8008e18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2b0c      	cmp	r3, #12
 8008cc6:	f200 809f 	bhi.w	8008e08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008cca:	a201      	add	r2, pc, #4	; (adr r2, 8008cd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd0:	08008d05 	.word	0x08008d05
 8008cd4:	08008e09 	.word	0x08008e09
 8008cd8:	08008e09 	.word	0x08008e09
 8008cdc:	08008e09 	.word	0x08008e09
 8008ce0:	08008d45 	.word	0x08008d45
 8008ce4:	08008e09 	.word	0x08008e09
 8008ce8:	08008e09 	.word	0x08008e09
 8008cec:	08008e09 	.word	0x08008e09
 8008cf0:	08008d87 	.word	0x08008d87
 8008cf4:	08008e09 	.word	0x08008e09
 8008cf8:	08008e09 	.word	0x08008e09
 8008cfc:	08008e09 	.word	0x08008e09
 8008d00:	08008dc7 	.word	0x08008dc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68b9      	ldr	r1, [r7, #8]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f000 fa22 	bl	8009154 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	699a      	ldr	r2, [r3, #24]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f042 0208 	orr.w	r2, r2, #8
 8008d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	699a      	ldr	r2, [r3, #24]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f022 0204 	bic.w	r2, r2, #4
 8008d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	6999      	ldr	r1, [r3, #24]
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	691a      	ldr	r2, [r3, #16]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	430a      	orrs	r2, r1
 8008d40:	619a      	str	r2, [r3, #24]
      break;
 8008d42:	e064      	b.n	8008e0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	68b9      	ldr	r1, [r7, #8]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f000 fa72 	bl	8009234 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	699a      	ldr	r2, [r3, #24]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	699a      	ldr	r2, [r3, #24]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	6999      	ldr	r1, [r3, #24]
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	021a      	lsls	r2, r3, #8
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	430a      	orrs	r2, r1
 8008d82:	619a      	str	r2, [r3, #24]
      break;
 8008d84:	e043      	b.n	8008e0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68b9      	ldr	r1, [r7, #8]
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 fac7 	bl	8009320 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	69da      	ldr	r2, [r3, #28]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f042 0208 	orr.w	r2, r2, #8
 8008da0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	69da      	ldr	r2, [r3, #28]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f022 0204 	bic.w	r2, r2, #4
 8008db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	69d9      	ldr	r1, [r3, #28]
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	691a      	ldr	r2, [r3, #16]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	430a      	orrs	r2, r1
 8008dc2:	61da      	str	r2, [r3, #28]
      break;
 8008dc4:	e023      	b.n	8008e0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	68b9      	ldr	r1, [r7, #8]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f000 fb1b 	bl	8009408 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	69da      	ldr	r2, [r3, #28]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008de0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	69da      	ldr	r2, [r3, #28]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008df0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	69d9      	ldr	r1, [r3, #28]
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	691b      	ldr	r3, [r3, #16]
 8008dfc:	021a      	lsls	r2, r3, #8
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	430a      	orrs	r2, r1
 8008e04:	61da      	str	r2, [r3, #28]
      break;
 8008e06:	e002      	b.n	8008e0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8008e0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3718      	adds	r7, #24
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d101      	bne.n	8008e3c <HAL_TIM_ConfigClockSource+0x1c>
 8008e38:	2302      	movs	r3, #2
 8008e3a:	e0b4      	b.n	8008fa6 <HAL_TIM_ConfigClockSource+0x186>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2202      	movs	r2, #2
 8008e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008e5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e74:	d03e      	beq.n	8008ef4 <HAL_TIM_ConfigClockSource+0xd4>
 8008e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e7a:	f200 8087 	bhi.w	8008f8c <HAL_TIM_ConfigClockSource+0x16c>
 8008e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e82:	f000 8086 	beq.w	8008f92 <HAL_TIM_ConfigClockSource+0x172>
 8008e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e8a:	d87f      	bhi.n	8008f8c <HAL_TIM_ConfigClockSource+0x16c>
 8008e8c:	2b70      	cmp	r3, #112	; 0x70
 8008e8e:	d01a      	beq.n	8008ec6 <HAL_TIM_ConfigClockSource+0xa6>
 8008e90:	2b70      	cmp	r3, #112	; 0x70
 8008e92:	d87b      	bhi.n	8008f8c <HAL_TIM_ConfigClockSource+0x16c>
 8008e94:	2b60      	cmp	r3, #96	; 0x60
 8008e96:	d050      	beq.n	8008f3a <HAL_TIM_ConfigClockSource+0x11a>
 8008e98:	2b60      	cmp	r3, #96	; 0x60
 8008e9a:	d877      	bhi.n	8008f8c <HAL_TIM_ConfigClockSource+0x16c>
 8008e9c:	2b50      	cmp	r3, #80	; 0x50
 8008e9e:	d03c      	beq.n	8008f1a <HAL_TIM_ConfigClockSource+0xfa>
 8008ea0:	2b50      	cmp	r3, #80	; 0x50
 8008ea2:	d873      	bhi.n	8008f8c <HAL_TIM_ConfigClockSource+0x16c>
 8008ea4:	2b40      	cmp	r3, #64	; 0x40
 8008ea6:	d058      	beq.n	8008f5a <HAL_TIM_ConfigClockSource+0x13a>
 8008ea8:	2b40      	cmp	r3, #64	; 0x40
 8008eaa:	d86f      	bhi.n	8008f8c <HAL_TIM_ConfigClockSource+0x16c>
 8008eac:	2b30      	cmp	r3, #48	; 0x30
 8008eae:	d064      	beq.n	8008f7a <HAL_TIM_ConfigClockSource+0x15a>
 8008eb0:	2b30      	cmp	r3, #48	; 0x30
 8008eb2:	d86b      	bhi.n	8008f8c <HAL_TIM_ConfigClockSource+0x16c>
 8008eb4:	2b20      	cmp	r3, #32
 8008eb6:	d060      	beq.n	8008f7a <HAL_TIM_ConfigClockSource+0x15a>
 8008eb8:	2b20      	cmp	r3, #32
 8008eba:	d867      	bhi.n	8008f8c <HAL_TIM_ConfigClockSource+0x16c>
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d05c      	beq.n	8008f7a <HAL_TIM_ConfigClockSource+0x15a>
 8008ec0:	2b10      	cmp	r3, #16
 8008ec2:	d05a      	beq.n	8008f7a <HAL_TIM_ConfigClockSource+0x15a>
 8008ec4:	e062      	b.n	8008f8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6818      	ldr	r0, [r3, #0]
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	6899      	ldr	r1, [r3, #8]
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	685a      	ldr	r2, [r3, #4]
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	f000 fb67 	bl	80095a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008ee8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68ba      	ldr	r2, [r7, #8]
 8008ef0:	609a      	str	r2, [r3, #8]
      break;
 8008ef2:	e04f      	b.n	8008f94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6818      	ldr	r0, [r3, #0]
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	6899      	ldr	r1, [r3, #8]
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	685a      	ldr	r2, [r3, #4]
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	f000 fb50 	bl	80095a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	689a      	ldr	r2, [r3, #8]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f16:	609a      	str	r2, [r3, #8]
      break;
 8008f18:	e03c      	b.n	8008f94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6818      	ldr	r0, [r3, #0]
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	6859      	ldr	r1, [r3, #4]
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	461a      	mov	r2, r3
 8008f28:	f000 fac4 	bl	80094b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2150      	movs	r1, #80	; 0x50
 8008f32:	4618      	mov	r0, r3
 8008f34:	f000 fb1d 	bl	8009572 <TIM_ITRx_SetConfig>
      break;
 8008f38:	e02c      	b.n	8008f94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6818      	ldr	r0, [r3, #0]
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	6859      	ldr	r1, [r3, #4]
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	461a      	mov	r2, r3
 8008f48:	f000 fae3 	bl	8009512 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2160      	movs	r1, #96	; 0x60
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 fb0d 	bl	8009572 <TIM_ITRx_SetConfig>
      break;
 8008f58:	e01c      	b.n	8008f94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6818      	ldr	r0, [r3, #0]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	6859      	ldr	r1, [r3, #4]
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	461a      	mov	r2, r3
 8008f68:	f000 faa4 	bl	80094b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2140      	movs	r1, #64	; 0x40
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 fafd 	bl	8009572 <TIM_ITRx_SetConfig>
      break;
 8008f78:	e00c      	b.n	8008f94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4619      	mov	r1, r3
 8008f84:	4610      	mov	r0, r2
 8008f86:	f000 faf4 	bl	8009572 <TIM_ITRx_SetConfig>
      break;
 8008f8a:	e003      	b.n	8008f94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8008f90:	e000      	b.n	8008f94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008f92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fae:	b480      	push	{r7}
 8008fb0:	b083      	sub	sp, #12
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008fb6:	bf00      	nop
 8008fb8:	370c      	adds	r7, #12
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr

08008fc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fc2:	b480      	push	{r7}
 8008fc4:	b083      	sub	sp, #12
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008fca:	bf00      	nop
 8008fcc:	370c      	adds	r7, #12
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr

08008fd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008fd6:	b480      	push	{r7}
 8008fd8:	b083      	sub	sp, #12
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008fde:	bf00      	nop
 8008fe0:	370c      	adds	r7, #12
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008fea:	b480      	push	{r7}
 8008fec:	b083      	sub	sp, #12
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ff2:	bf00      	nop
 8008ff4:	370c      	adds	r7, #12
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr

08008ffe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ffe:	b480      	push	{r7}
 8009000:	b083      	sub	sp, #12
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009006:	bf00      	nop
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
	...

08009014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a40      	ldr	r2, [pc, #256]	; (8009128 <TIM_Base_SetConfig+0x114>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d013      	beq.n	8009054 <TIM_Base_SetConfig+0x40>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009032:	d00f      	beq.n	8009054 <TIM_Base_SetConfig+0x40>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4a3d      	ldr	r2, [pc, #244]	; (800912c <TIM_Base_SetConfig+0x118>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d00b      	beq.n	8009054 <TIM_Base_SetConfig+0x40>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4a3c      	ldr	r2, [pc, #240]	; (8009130 <TIM_Base_SetConfig+0x11c>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d007      	beq.n	8009054 <TIM_Base_SetConfig+0x40>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a3b      	ldr	r2, [pc, #236]	; (8009134 <TIM_Base_SetConfig+0x120>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d003      	beq.n	8009054 <TIM_Base_SetConfig+0x40>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a3a      	ldr	r2, [pc, #232]	; (8009138 <TIM_Base_SetConfig+0x124>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d108      	bne.n	8009066 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800905a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	68fa      	ldr	r2, [r7, #12]
 8009062:	4313      	orrs	r3, r2
 8009064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4a2f      	ldr	r2, [pc, #188]	; (8009128 <TIM_Base_SetConfig+0x114>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d02b      	beq.n	80090c6 <TIM_Base_SetConfig+0xb2>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009074:	d027      	beq.n	80090c6 <TIM_Base_SetConfig+0xb2>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a2c      	ldr	r2, [pc, #176]	; (800912c <TIM_Base_SetConfig+0x118>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d023      	beq.n	80090c6 <TIM_Base_SetConfig+0xb2>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a2b      	ldr	r2, [pc, #172]	; (8009130 <TIM_Base_SetConfig+0x11c>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d01f      	beq.n	80090c6 <TIM_Base_SetConfig+0xb2>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a2a      	ldr	r2, [pc, #168]	; (8009134 <TIM_Base_SetConfig+0x120>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d01b      	beq.n	80090c6 <TIM_Base_SetConfig+0xb2>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a29      	ldr	r2, [pc, #164]	; (8009138 <TIM_Base_SetConfig+0x124>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d017      	beq.n	80090c6 <TIM_Base_SetConfig+0xb2>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a28      	ldr	r2, [pc, #160]	; (800913c <TIM_Base_SetConfig+0x128>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d013      	beq.n	80090c6 <TIM_Base_SetConfig+0xb2>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a27      	ldr	r2, [pc, #156]	; (8009140 <TIM_Base_SetConfig+0x12c>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d00f      	beq.n	80090c6 <TIM_Base_SetConfig+0xb2>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a26      	ldr	r2, [pc, #152]	; (8009144 <TIM_Base_SetConfig+0x130>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d00b      	beq.n	80090c6 <TIM_Base_SetConfig+0xb2>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a25      	ldr	r2, [pc, #148]	; (8009148 <TIM_Base_SetConfig+0x134>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d007      	beq.n	80090c6 <TIM_Base_SetConfig+0xb2>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a24      	ldr	r2, [pc, #144]	; (800914c <TIM_Base_SetConfig+0x138>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d003      	beq.n	80090c6 <TIM_Base_SetConfig+0xb2>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4a23      	ldr	r2, [pc, #140]	; (8009150 <TIM_Base_SetConfig+0x13c>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d108      	bne.n	80090d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	695b      	ldr	r3, [r3, #20]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	689a      	ldr	r2, [r3, #8]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a0a      	ldr	r2, [pc, #40]	; (8009128 <TIM_Base_SetConfig+0x114>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d003      	beq.n	800910c <TIM_Base_SetConfig+0xf8>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a0c      	ldr	r2, [pc, #48]	; (8009138 <TIM_Base_SetConfig+0x124>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d103      	bne.n	8009114 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	691a      	ldr	r2, [r3, #16]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	615a      	str	r2, [r3, #20]
}
 800911a:	bf00      	nop
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	40010000 	.word	0x40010000
 800912c:	40000400 	.word	0x40000400
 8009130:	40000800 	.word	0x40000800
 8009134:	40000c00 	.word	0x40000c00
 8009138:	40010400 	.word	0x40010400
 800913c:	40014000 	.word	0x40014000
 8009140:	40014400 	.word	0x40014400
 8009144:	40014800 	.word	0x40014800
 8009148:	40001800 	.word	0x40001800
 800914c:	40001c00 	.word	0x40001c00
 8009150:	40002000 	.word	0x40002000

08009154 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009154:	b480      	push	{r7}
 8009156:	b087      	sub	sp, #28
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a1b      	ldr	r3, [r3, #32]
 8009162:	f023 0201 	bic.w	r2, r3, #1
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a1b      	ldr	r3, [r3, #32]
 800916e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	699b      	ldr	r3, [r3, #24]
 800917a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f023 0303 	bic.w	r3, r3, #3
 800918a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	4313      	orrs	r3, r2
 8009194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	f023 0302 	bic.w	r3, r3, #2
 800919c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	697a      	ldr	r2, [r7, #20]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a20      	ldr	r2, [pc, #128]	; (800922c <TIM_OC1_SetConfig+0xd8>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d003      	beq.n	80091b8 <TIM_OC1_SetConfig+0x64>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a1f      	ldr	r2, [pc, #124]	; (8009230 <TIM_OC1_SetConfig+0xdc>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d10c      	bne.n	80091d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	f023 0308 	bic.w	r3, r3, #8
 80091be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	697a      	ldr	r2, [r7, #20]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	f023 0304 	bic.w	r3, r3, #4
 80091d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a15      	ldr	r2, [pc, #84]	; (800922c <TIM_OC1_SetConfig+0xd8>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d003      	beq.n	80091e2 <TIM_OC1_SetConfig+0x8e>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a14      	ldr	r2, [pc, #80]	; (8009230 <TIM_OC1_SetConfig+0xdc>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d111      	bne.n	8009206 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	693a      	ldr	r2, [r7, #16]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	693a      	ldr	r2, [r7, #16]
 8009202:	4313      	orrs	r3, r2
 8009204:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	693a      	ldr	r2, [r7, #16]
 800920a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	68fa      	ldr	r2, [r7, #12]
 8009210:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	685a      	ldr	r2, [r3, #4]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	697a      	ldr	r2, [r7, #20]
 800921e:	621a      	str	r2, [r3, #32]
}
 8009220:	bf00      	nop
 8009222:	371c      	adds	r7, #28
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr
 800922c:	40010000 	.word	0x40010000
 8009230:	40010400 	.word	0x40010400

08009234 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009234:	b480      	push	{r7}
 8009236:	b087      	sub	sp, #28
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a1b      	ldr	r3, [r3, #32]
 8009242:	f023 0210 	bic.w	r2, r3, #16
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a1b      	ldr	r3, [r3, #32]
 800924e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800926a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	021b      	lsls	r3, r3, #8
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	4313      	orrs	r3, r2
 8009276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	f023 0320 	bic.w	r3, r3, #32
 800927e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	011b      	lsls	r3, r3, #4
 8009286:	697a      	ldr	r2, [r7, #20]
 8009288:	4313      	orrs	r3, r2
 800928a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a22      	ldr	r2, [pc, #136]	; (8009318 <TIM_OC2_SetConfig+0xe4>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d003      	beq.n	800929c <TIM_OC2_SetConfig+0x68>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4a21      	ldr	r2, [pc, #132]	; (800931c <TIM_OC2_SetConfig+0xe8>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d10d      	bne.n	80092b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	011b      	lsls	r3, r3, #4
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a17      	ldr	r2, [pc, #92]	; (8009318 <TIM_OC2_SetConfig+0xe4>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d003      	beq.n	80092c8 <TIM_OC2_SetConfig+0x94>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a16      	ldr	r2, [pc, #88]	; (800931c <TIM_OC2_SetConfig+0xe8>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d113      	bne.n	80092f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80092ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80092d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	695b      	ldr	r3, [r3, #20]
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	693a      	ldr	r2, [r7, #16]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	699b      	ldr	r3, [r3, #24]
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	693a      	ldr	r2, [r7, #16]
 80092ec:	4313      	orrs	r3, r2
 80092ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	693a      	ldr	r2, [r7, #16]
 80092f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	685a      	ldr	r2, [r3, #4]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	697a      	ldr	r2, [r7, #20]
 8009308:	621a      	str	r2, [r3, #32]
}
 800930a:	bf00      	nop
 800930c:	371c      	adds	r7, #28
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	40010000 	.word	0x40010000
 800931c:	40010400 	.word	0x40010400

08009320 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009320:	b480      	push	{r7}
 8009322:	b087      	sub	sp, #28
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6a1b      	ldr	r3, [r3, #32]
 800932e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a1b      	ldr	r3, [r3, #32]
 800933a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	69db      	ldr	r3, [r3, #28]
 8009346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800934e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f023 0303 	bic.w	r3, r3, #3
 8009356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	4313      	orrs	r3, r2
 8009360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	021b      	lsls	r3, r3, #8
 8009370:	697a      	ldr	r2, [r7, #20]
 8009372:	4313      	orrs	r3, r2
 8009374:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a21      	ldr	r2, [pc, #132]	; (8009400 <TIM_OC3_SetConfig+0xe0>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d003      	beq.n	8009386 <TIM_OC3_SetConfig+0x66>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a20      	ldr	r2, [pc, #128]	; (8009404 <TIM_OC3_SetConfig+0xe4>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d10d      	bne.n	80093a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800938c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	021b      	lsls	r3, r3, #8
 8009394:	697a      	ldr	r2, [r7, #20]
 8009396:	4313      	orrs	r3, r2
 8009398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a16      	ldr	r2, [pc, #88]	; (8009400 <TIM_OC3_SetConfig+0xe0>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d003      	beq.n	80093b2 <TIM_OC3_SetConfig+0x92>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a15      	ldr	r2, [pc, #84]	; (8009404 <TIM_OC3_SetConfig+0xe4>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d113      	bne.n	80093da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	695b      	ldr	r3, [r3, #20]
 80093c6:	011b      	lsls	r3, r3, #4
 80093c8:	693a      	ldr	r2, [r7, #16]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	699b      	ldr	r3, [r3, #24]
 80093d2:	011b      	lsls	r3, r3, #4
 80093d4:	693a      	ldr	r2, [r7, #16]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	693a      	ldr	r2, [r7, #16]
 80093de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	685a      	ldr	r2, [r3, #4]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	697a      	ldr	r2, [r7, #20]
 80093f2:	621a      	str	r2, [r3, #32]
}
 80093f4:	bf00      	nop
 80093f6:	371c      	adds	r7, #28
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr
 8009400:	40010000 	.word	0x40010000
 8009404:	40010400 	.word	0x40010400

08009408 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009408:	b480      	push	{r7}
 800940a:	b087      	sub	sp, #28
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a1b      	ldr	r3, [r3, #32]
 8009416:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a1b      	ldr	r3, [r3, #32]
 8009422:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800943e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	021b      	lsls	r3, r3, #8
 8009446:	68fa      	ldr	r2, [r7, #12]
 8009448:	4313      	orrs	r3, r2
 800944a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009452:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	031b      	lsls	r3, r3, #12
 800945a:	693a      	ldr	r2, [r7, #16]
 800945c:	4313      	orrs	r3, r2
 800945e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a12      	ldr	r2, [pc, #72]	; (80094ac <TIM_OC4_SetConfig+0xa4>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d003      	beq.n	8009470 <TIM_OC4_SetConfig+0x68>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a11      	ldr	r2, [pc, #68]	; (80094b0 <TIM_OC4_SetConfig+0xa8>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d109      	bne.n	8009484 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009476:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	695b      	ldr	r3, [r3, #20]
 800947c:	019b      	lsls	r3, r3, #6
 800947e:	697a      	ldr	r2, [r7, #20]
 8009480:	4313      	orrs	r3, r2
 8009482:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	697a      	ldr	r2, [r7, #20]
 8009488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	685a      	ldr	r2, [r3, #4]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	693a      	ldr	r2, [r7, #16]
 800949c:	621a      	str	r2, [r3, #32]
}
 800949e:	bf00      	nop
 80094a0:	371c      	adds	r7, #28
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	40010000 	.word	0x40010000
 80094b0:	40010400 	.word	0x40010400

080094b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b087      	sub	sp, #28
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6a1b      	ldr	r3, [r3, #32]
 80094c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6a1b      	ldr	r3, [r3, #32]
 80094ca:	f023 0201 	bic.w	r2, r3, #1
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	699b      	ldr	r3, [r3, #24]
 80094d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80094de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	011b      	lsls	r3, r3, #4
 80094e4:	693a      	ldr	r2, [r7, #16]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	f023 030a 	bic.w	r3, r3, #10
 80094f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80094f2:	697a      	ldr	r2, [r7, #20]
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	4313      	orrs	r3, r2
 80094f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	693a      	ldr	r2, [r7, #16]
 80094fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	697a      	ldr	r2, [r7, #20]
 8009504:	621a      	str	r2, [r3, #32]
}
 8009506:	bf00      	nop
 8009508:	371c      	adds	r7, #28
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr

08009512 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009512:	b480      	push	{r7}
 8009514:	b087      	sub	sp, #28
 8009516:	af00      	add	r7, sp, #0
 8009518:	60f8      	str	r0, [r7, #12]
 800951a:	60b9      	str	r1, [r7, #8]
 800951c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6a1b      	ldr	r3, [r3, #32]
 8009522:	f023 0210 	bic.w	r2, r3, #16
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	699b      	ldr	r3, [r3, #24]
 800952e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6a1b      	ldr	r3, [r3, #32]
 8009534:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800953c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	031b      	lsls	r3, r3, #12
 8009542:	697a      	ldr	r2, [r7, #20]
 8009544:	4313      	orrs	r3, r2
 8009546:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800954e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	011b      	lsls	r3, r3, #4
 8009554:	693a      	ldr	r2, [r7, #16]
 8009556:	4313      	orrs	r3, r2
 8009558:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	697a      	ldr	r2, [r7, #20]
 800955e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	693a      	ldr	r2, [r7, #16]
 8009564:	621a      	str	r2, [r3, #32]
}
 8009566:	bf00      	nop
 8009568:	371c      	adds	r7, #28
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr

08009572 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009572:	b480      	push	{r7}
 8009574:	b085      	sub	sp, #20
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
 800957a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009588:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800958a:	683a      	ldr	r2, [r7, #0]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	4313      	orrs	r3, r2
 8009590:	f043 0307 	orr.w	r3, r3, #7
 8009594:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	609a      	str	r2, [r3, #8]
}
 800959c:	bf00      	nop
 800959e:	3714      	adds	r7, #20
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b087      	sub	sp, #28
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	607a      	str	r2, [r7, #4]
 80095b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	021a      	lsls	r2, r3, #8
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	431a      	orrs	r2, r3
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	697a      	ldr	r2, [r7, #20]
 80095d2:	4313      	orrs	r3, r2
 80095d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	697a      	ldr	r2, [r7, #20]
 80095da:	609a      	str	r2, [r3, #8]
}
 80095dc:	bf00      	nop
 80095de:	371c      	adds	r7, #28
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b087      	sub	sp, #28
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	f003 031f 	and.w	r3, r3, #31
 80095fa:	2201      	movs	r2, #1
 80095fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009600:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6a1a      	ldr	r2, [r3, #32]
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	43db      	mvns	r3, r3
 800960a:	401a      	ands	r2, r3
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6a1a      	ldr	r2, [r3, #32]
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	f003 031f 	and.w	r3, r3, #31
 800961a:	6879      	ldr	r1, [r7, #4]
 800961c:	fa01 f303 	lsl.w	r3, r1, r3
 8009620:	431a      	orrs	r2, r3
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	621a      	str	r2, [r3, #32]
}
 8009626:	bf00      	nop
 8009628:	371c      	adds	r7, #28
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr
	...

08009634 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009634:	b480      	push	{r7}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009644:	2b01      	cmp	r3, #1
 8009646:	d101      	bne.n	800964c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009648:	2302      	movs	r3, #2
 800964a:	e05a      	b.n	8009702 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2202      	movs	r2, #2
 8009658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009672:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68fa      	ldr	r2, [r7, #12]
 800967a:	4313      	orrs	r3, r2
 800967c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a21      	ldr	r2, [pc, #132]	; (8009710 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d022      	beq.n	80096d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009698:	d01d      	beq.n	80096d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a1d      	ldr	r2, [pc, #116]	; (8009714 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d018      	beq.n	80096d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a1b      	ldr	r2, [pc, #108]	; (8009718 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d013      	beq.n	80096d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a1a      	ldr	r2, [pc, #104]	; (800971c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d00e      	beq.n	80096d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a18      	ldr	r2, [pc, #96]	; (8009720 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d009      	beq.n	80096d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a17      	ldr	r2, [pc, #92]	; (8009724 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d004      	beq.n	80096d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a15      	ldr	r2, [pc, #84]	; (8009728 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d10c      	bne.n	80096f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	68ba      	ldr	r2, [r7, #8]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3714      	adds	r7, #20
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	40010000 	.word	0x40010000
 8009714:	40000400 	.word	0x40000400
 8009718:	40000800 	.word	0x40000800
 800971c:	40000c00 	.word	0x40000c00
 8009720:	40010400 	.word	0x40010400
 8009724:	40014000 	.word	0x40014000
 8009728:	40001800 	.word	0x40001800

0800972c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800972c:	b480      	push	{r7}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009736:	2300      	movs	r3, #0
 8009738:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009740:	2b01      	cmp	r3, #1
 8009742:	d101      	bne.n	8009748 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009744:	2302      	movs	r3, #2
 8009746:	e03d      	b.n	80097c4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	4313      	orrs	r3, r2
 800975c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	4313      	orrs	r3, r2
 800976a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	4313      	orrs	r3, r2
 8009778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4313      	orrs	r3, r2
 8009786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	4313      	orrs	r3, r2
 8009794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	695b      	ldr	r3, [r3, #20]
 80097a0:	4313      	orrs	r3, r2
 80097a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	69db      	ldr	r3, [r3, #28]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3714      	adds	r7, #20
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097d8:	bf00      	nop
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097ec:	bf00      	nop
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d101      	bne.n	800980a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	e03f      	b.n	800988a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009810:	b2db      	uxtb	r3, r3
 8009812:	2b00      	cmp	r3, #0
 8009814:	d106      	bne.n	8009824 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f7fb ffce 	bl	80057c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2224      	movs	r2, #36	; 0x24
 8009828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68da      	ldr	r2, [r3, #12]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800983a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 fddf 	bl	800a400 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	691a      	ldr	r2, [r3, #16]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009850:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	695a      	ldr	r2, [r3, #20]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009860:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	68da      	ldr	r2, [r3, #12]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009870:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2220      	movs	r2, #32
 800987c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2220      	movs	r2, #32
 8009884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	3708      	adds	r7, #8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b08a      	sub	sp, #40	; 0x28
 8009896:	af02      	add	r7, sp, #8
 8009898:	60f8      	str	r0, [r7, #12]
 800989a:	60b9      	str	r1, [r7, #8]
 800989c:	603b      	str	r3, [r7, #0]
 800989e:	4613      	mov	r3, r2
 80098a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80098a2:	2300      	movs	r3, #0
 80098a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	2b20      	cmp	r3, #32
 80098b0:	d17c      	bne.n	80099ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d002      	beq.n	80098be <HAL_UART_Transmit+0x2c>
 80098b8:	88fb      	ldrh	r3, [r7, #6]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d101      	bne.n	80098c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	e075      	b.n	80099ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d101      	bne.n	80098d0 <HAL_UART_Transmit+0x3e>
 80098cc:	2302      	movs	r3, #2
 80098ce:	e06e      	b.n	80099ae <HAL_UART_Transmit+0x11c>
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2200      	movs	r2, #0
 80098dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2221      	movs	r2, #33	; 0x21
 80098e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80098e6:	f7fc f86f 	bl	80059c8 <HAL_GetTick>
 80098ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	88fa      	ldrh	r2, [r7, #6]
 80098f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	88fa      	ldrh	r2, [r7, #6]
 80098f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009900:	d108      	bne.n	8009914 <HAL_UART_Transmit+0x82>
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d104      	bne.n	8009914 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800990a:	2300      	movs	r3, #0
 800990c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	61bb      	str	r3, [r7, #24]
 8009912:	e003      	b.n	800991c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009918:	2300      	movs	r3, #0
 800991a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2200      	movs	r2, #0
 8009920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009924:	e02a      	b.n	800997c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	9300      	str	r3, [sp, #0]
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	2200      	movs	r2, #0
 800992e:	2180      	movs	r1, #128	; 0x80
 8009930:	68f8      	ldr	r0, [r7, #12]
 8009932:	f000 fb1f 	bl	8009f74 <UART_WaitOnFlagUntilTimeout>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d001      	beq.n	8009940 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800993c:	2303      	movs	r3, #3
 800993e:	e036      	b.n	80099ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d10b      	bne.n	800995e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	881b      	ldrh	r3, [r3, #0]
 800994a:	461a      	mov	r2, r3
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009954:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	3302      	adds	r3, #2
 800995a:	61bb      	str	r3, [r7, #24]
 800995c:	e007      	b.n	800996e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	781a      	ldrb	r2, [r3, #0]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	3301      	adds	r3, #1
 800996c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009972:	b29b      	uxth	r3, r3
 8009974:	3b01      	subs	r3, #1
 8009976:	b29a      	uxth	r2, r3
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009980:	b29b      	uxth	r3, r3
 8009982:	2b00      	cmp	r3, #0
 8009984:	d1cf      	bne.n	8009926 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	9300      	str	r3, [sp, #0]
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	2200      	movs	r2, #0
 800998e:	2140      	movs	r1, #64	; 0x40
 8009990:	68f8      	ldr	r0, [r7, #12]
 8009992:	f000 faef 	bl	8009f74 <UART_WaitOnFlagUntilTimeout>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d001      	beq.n	80099a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800999c:	2303      	movs	r3, #3
 800999e:	e006      	b.n	80099ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2220      	movs	r2, #32
 80099a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80099a8:	2300      	movs	r3, #0
 80099aa:	e000      	b.n	80099ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80099ac:	2302      	movs	r3, #2
  }
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3720      	adds	r7, #32
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b084      	sub	sp, #16
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	60f8      	str	r0, [r7, #12]
 80099be:	60b9      	str	r1, [r7, #8]
 80099c0:	4613      	mov	r3, r2
 80099c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	2b20      	cmp	r3, #32
 80099ce:	d11d      	bne.n	8009a0c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d002      	beq.n	80099dc <HAL_UART_Receive_IT+0x26>
 80099d6:	88fb      	ldrh	r3, [r7, #6]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d101      	bne.n	80099e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	e016      	b.n	8009a0e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d101      	bne.n	80099ee <HAL_UART_Receive_IT+0x38>
 80099ea:	2302      	movs	r3, #2
 80099ec:	e00f      	b.n	8009a0e <HAL_UART_Receive_IT+0x58>
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2201      	movs	r2, #1
 80099f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80099fc:	88fb      	ldrh	r3, [r7, #6]
 80099fe:	461a      	mov	r2, r3
 8009a00:	68b9      	ldr	r1, [r7, #8]
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	f000 fb24 	bl	800a050 <UART_Start_Receive_IT>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	e000      	b.n	8009a0e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009a0c:	2302      	movs	r3, #2
  }
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
	...

08009a18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b0ba      	sub	sp, #232	; 0xe8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	695b      	ldr	r3, [r3, #20]
 8009a3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009a44:	2300      	movs	r3, #0
 8009a46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a4e:	f003 030f 	and.w	r3, r3, #15
 8009a52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009a56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10f      	bne.n	8009a7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a62:	f003 0320 	and.w	r3, r3, #32
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d009      	beq.n	8009a7e <HAL_UART_IRQHandler+0x66>
 8009a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a6e:	f003 0320 	and.w	r3, r3, #32
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d003      	beq.n	8009a7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 fc07 	bl	800a28a <UART_Receive_IT>
      return;
 8009a7c:	e256      	b.n	8009f2c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009a7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	f000 80de 	beq.w	8009c44 <HAL_UART_IRQHandler+0x22c>
 8009a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a8c:	f003 0301 	and.w	r3, r3, #1
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d106      	bne.n	8009aa2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f000 80d1 	beq.w	8009c44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aa6:	f003 0301 	and.w	r3, r3, #1
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00b      	beq.n	8009ac6 <HAL_UART_IRQHandler+0xae>
 8009aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d005      	beq.n	8009ac6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009abe:	f043 0201 	orr.w	r2, r3, #1
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aca:	f003 0304 	and.w	r3, r3, #4
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00b      	beq.n	8009aea <HAL_UART_IRQHandler+0xd2>
 8009ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ad6:	f003 0301 	and.w	r3, r3, #1
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d005      	beq.n	8009aea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae2:	f043 0202 	orr.w	r2, r3, #2
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aee:	f003 0302 	and.w	r3, r3, #2
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00b      	beq.n	8009b0e <HAL_UART_IRQHandler+0xf6>
 8009af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009afa:	f003 0301 	and.w	r3, r3, #1
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d005      	beq.n	8009b0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b06:	f043 0204 	orr.w	r2, r3, #4
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b12:	f003 0308 	and.w	r3, r3, #8
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d011      	beq.n	8009b3e <HAL_UART_IRQHandler+0x126>
 8009b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b1e:	f003 0320 	and.w	r3, r3, #32
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d105      	bne.n	8009b32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b2a:	f003 0301 	and.w	r3, r3, #1
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d005      	beq.n	8009b3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b36:	f043 0208 	orr.w	r2, r3, #8
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f000 81ed 	beq.w	8009f22 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b4c:	f003 0320 	and.w	r3, r3, #32
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d008      	beq.n	8009b66 <HAL_UART_IRQHandler+0x14e>
 8009b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b58:	f003 0320 	and.w	r3, r3, #32
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d002      	beq.n	8009b66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 fb92 	bl	800a28a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	695b      	ldr	r3, [r3, #20]
 8009b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b70:	2b40      	cmp	r3, #64	; 0x40
 8009b72:	bf0c      	ite	eq
 8009b74:	2301      	moveq	r3, #1
 8009b76:	2300      	movne	r3, #0
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b82:	f003 0308 	and.w	r3, r3, #8
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d103      	bne.n	8009b92 <HAL_UART_IRQHandler+0x17a>
 8009b8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d04f      	beq.n	8009c32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 fa9a 	bl	800a0cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	695b      	ldr	r3, [r3, #20]
 8009b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ba2:	2b40      	cmp	r3, #64	; 0x40
 8009ba4:	d141      	bne.n	8009c2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	3314      	adds	r3, #20
 8009bac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009bb4:	e853 3f00 	ldrex	r3, [r3]
 8009bb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009bbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	3314      	adds	r3, #20
 8009bce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009bd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009bde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009be2:	e841 2300 	strex	r3, r2, [r1]
 8009be6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009bea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d1d9      	bne.n	8009ba6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d013      	beq.n	8009c22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bfe:	4a7d      	ldr	r2, [pc, #500]	; (8009df4 <HAL_UART_IRQHandler+0x3dc>)
 8009c00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7fd fa5f 	bl	80070ca <HAL_DMA_Abort_IT>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d016      	beq.n	8009c40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c20:	e00e      	b.n	8009c40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f990 	bl	8009f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c28:	e00a      	b.n	8009c40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 f98c 	bl	8009f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c30:	e006      	b.n	8009c40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 f988 	bl	8009f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009c3e:	e170      	b.n	8009f22 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c40:	bf00      	nop
    return;
 8009c42:	e16e      	b.n	8009f22 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	f040 814a 	bne.w	8009ee2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c52:	f003 0310 	and.w	r3, r3, #16
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f000 8143 	beq.w	8009ee2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c60:	f003 0310 	and.w	r3, r3, #16
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	f000 813c 	beq.w	8009ee2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	60bb      	str	r3, [r7, #8]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	60bb      	str	r3, [r7, #8]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	60bb      	str	r3, [r7, #8]
 8009c7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	695b      	ldr	r3, [r3, #20]
 8009c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c8a:	2b40      	cmp	r3, #64	; 0x40
 8009c8c:	f040 80b4 	bne.w	8009df8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009c9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f000 8140 	beq.w	8009f26 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009caa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	f080 8139 	bcs.w	8009f26 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009cba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc0:	69db      	ldr	r3, [r3, #28]
 8009cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cc6:	f000 8088 	beq.w	8009dda <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	330c      	adds	r3, #12
 8009cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009cd8:	e853 3f00 	ldrex	r3, [r3]
 8009cdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009ce0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	330c      	adds	r3, #12
 8009cf2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009cf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009cfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009d02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009d06:	e841 2300 	strex	r3, r2, [r1]
 8009d0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009d0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d1d9      	bne.n	8009cca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	3314      	adds	r3, #20
 8009d1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d20:	e853 3f00 	ldrex	r3, [r3]
 8009d24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d28:	f023 0301 	bic.w	r3, r3, #1
 8009d2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	3314      	adds	r3, #20
 8009d36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009d3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009d3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009d42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009d46:	e841 2300 	strex	r3, r2, [r1]
 8009d4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009d4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d1e1      	bne.n	8009d16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	3314      	adds	r3, #20
 8009d58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d5c:	e853 3f00 	ldrex	r3, [r3]
 8009d60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	3314      	adds	r3, #20
 8009d72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009d76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009d78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009d7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009d7e:	e841 2300 	strex	r3, r2, [r1]
 8009d82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d1e3      	bne.n	8009d52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2220      	movs	r2, #32
 8009d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	330c      	adds	r3, #12
 8009d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009da2:	e853 3f00 	ldrex	r3, [r3]
 8009da6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009daa:	f023 0310 	bic.w	r3, r3, #16
 8009dae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	330c      	adds	r3, #12
 8009db8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009dbc:	65ba      	str	r2, [r7, #88]	; 0x58
 8009dbe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009dc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009dc4:	e841 2300 	strex	r3, r2, [r1]
 8009dc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d1e3      	bne.n	8009d98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7fd f908 	bl	8006fea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	1ad3      	subs	r3, r2, r3
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	4619      	mov	r1, r3
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 f8b6 	bl	8009f5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009df0:	e099      	b.n	8009f26 <HAL_UART_IRQHandler+0x50e>
 8009df2:	bf00      	nop
 8009df4:	0800a193 	.word	0x0800a193
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	1ad3      	subs	r3, r2, r3
 8009e04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	f000 808b 	beq.w	8009f2a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009e14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f000 8086 	beq.w	8009f2a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	330c      	adds	r3, #12
 8009e24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e28:	e853 3f00 	ldrex	r3, [r3]
 8009e2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	330c      	adds	r3, #12
 8009e3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009e42:	647a      	str	r2, [r7, #68]	; 0x44
 8009e44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e4a:	e841 2300 	strex	r3, r2, [r1]
 8009e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d1e3      	bne.n	8009e1e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	3314      	adds	r3, #20
 8009e5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e60:	e853 3f00 	ldrex	r3, [r3]
 8009e64:	623b      	str	r3, [r7, #32]
   return(result);
 8009e66:	6a3b      	ldr	r3, [r7, #32]
 8009e68:	f023 0301 	bic.w	r3, r3, #1
 8009e6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	3314      	adds	r3, #20
 8009e76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009e7a:	633a      	str	r2, [r7, #48]	; 0x30
 8009e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e82:	e841 2300 	strex	r3, r2, [r1]
 8009e86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d1e3      	bne.n	8009e56 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2220      	movs	r2, #32
 8009e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	330c      	adds	r3, #12
 8009ea2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	e853 3f00 	ldrex	r3, [r3]
 8009eaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f023 0310 	bic.w	r3, r3, #16
 8009eb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	330c      	adds	r3, #12
 8009ebc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009ec0:	61fa      	str	r2, [r7, #28]
 8009ec2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec4:	69b9      	ldr	r1, [r7, #24]
 8009ec6:	69fa      	ldr	r2, [r7, #28]
 8009ec8:	e841 2300 	strex	r3, r2, [r1]
 8009ecc:	617b      	str	r3, [r7, #20]
   return(result);
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d1e3      	bne.n	8009e9c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ed4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009ed8:	4619      	mov	r1, r3
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f83e 	bl	8009f5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009ee0:	e023      	b.n	8009f2a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d009      	beq.n	8009f02 <HAL_UART_IRQHandler+0x4ea>
 8009eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d003      	beq.n	8009f02 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 f95d 	bl	800a1ba <UART_Transmit_IT>
    return;
 8009f00:	e014      	b.n	8009f2c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00e      	beq.n	8009f2c <HAL_UART_IRQHandler+0x514>
 8009f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d008      	beq.n	8009f2c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 f99d 	bl	800a25a <UART_EndTransmit_IT>
    return;
 8009f20:	e004      	b.n	8009f2c <HAL_UART_IRQHandler+0x514>
    return;
 8009f22:	bf00      	nop
 8009f24:	e002      	b.n	8009f2c <HAL_UART_IRQHandler+0x514>
      return;
 8009f26:	bf00      	nop
 8009f28:	e000      	b.n	8009f2c <HAL_UART_IRQHandler+0x514>
      return;
 8009f2a:	bf00      	nop
  }
}
 8009f2c:	37e8      	adds	r7, #232	; 0xe8
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop

08009f34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009f3c:	bf00      	nop
 8009f3e:	370c      	adds	r7, #12
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009f50:	bf00      	nop
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	460b      	mov	r3, r1
 8009f66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009f68:	bf00      	nop
 8009f6a:	370c      	adds	r7, #12
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b090      	sub	sp, #64	; 0x40
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	603b      	str	r3, [r7, #0]
 8009f80:	4613      	mov	r3, r2
 8009f82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f84:	e050      	b.n	800a028 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f8c:	d04c      	beq.n	800a028 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d007      	beq.n	8009fa4 <UART_WaitOnFlagUntilTimeout+0x30>
 8009f94:	f7fb fd18 	bl	80059c8 <HAL_GetTick>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	1ad3      	subs	r3, r2, r3
 8009f9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d241      	bcs.n	800a028 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	330c      	adds	r3, #12
 8009faa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fae:	e853 3f00 	ldrex	r3, [r3]
 8009fb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	330c      	adds	r3, #12
 8009fc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009fc4:	637a      	str	r2, [r7, #52]	; 0x34
 8009fc6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009fca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fcc:	e841 2300 	strex	r3, r2, [r1]
 8009fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d1e5      	bne.n	8009fa4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	3314      	adds	r3, #20
 8009fde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	e853 3f00 	ldrex	r3, [r3]
 8009fe6:	613b      	str	r3, [r7, #16]
   return(result);
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	f023 0301 	bic.w	r3, r3, #1
 8009fee:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	3314      	adds	r3, #20
 8009ff6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ff8:	623a      	str	r2, [r7, #32]
 8009ffa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffc:	69f9      	ldr	r1, [r7, #28]
 8009ffe:	6a3a      	ldr	r2, [r7, #32]
 800a000:	e841 2300 	strex	r3, r2, [r1]
 800a004:	61bb      	str	r3, [r7, #24]
   return(result);
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d1e5      	bne.n	8009fd8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2220      	movs	r2, #32
 800a010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2220      	movs	r2, #32
 800a018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2200      	movs	r2, #0
 800a020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a024:	2303      	movs	r3, #3
 800a026:	e00f      	b.n	800a048 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	4013      	ands	r3, r2
 800a032:	68ba      	ldr	r2, [r7, #8]
 800a034:	429a      	cmp	r2, r3
 800a036:	bf0c      	ite	eq
 800a038:	2301      	moveq	r3, #1
 800a03a:	2300      	movne	r3, #0
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	461a      	mov	r2, r3
 800a040:	79fb      	ldrb	r3, [r7, #7]
 800a042:	429a      	cmp	r2, r3
 800a044:	d09f      	beq.n	8009f86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a046:	2300      	movs	r3, #0
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3740      	adds	r7, #64	; 0x40
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a050:	b480      	push	{r7}
 800a052:	b085      	sub	sp, #20
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	4613      	mov	r3, r2
 800a05c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	88fa      	ldrh	r2, [r7, #6]
 800a068:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	88fa      	ldrh	r2, [r7, #6]
 800a06e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2200      	movs	r2, #0
 800a074:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2222      	movs	r2, #34	; 0x22
 800a07a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2200      	movs	r2, #0
 800a082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d007      	beq.n	800a09e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68da      	ldr	r2, [r3, #12]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a09c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	695a      	ldr	r2, [r3, #20]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f042 0201 	orr.w	r2, r2, #1
 800a0ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	68da      	ldr	r2, [r3, #12]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f042 0220 	orr.w	r2, r2, #32
 800a0bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a0be:	2300      	movs	r3, #0
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3714      	adds	r7, #20
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr

0800a0cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b095      	sub	sp, #84	; 0x54
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	330c      	adds	r3, #12
 800a0da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0de:	e853 3f00 	ldrex	r3, [r3]
 800a0e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a0ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	330c      	adds	r3, #12
 800a0f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a0f4:	643a      	str	r2, [r7, #64]	; 0x40
 800a0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a0fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a0fc:	e841 2300 	strex	r3, r2, [r1]
 800a100:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a104:	2b00      	cmp	r3, #0
 800a106:	d1e5      	bne.n	800a0d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	3314      	adds	r3, #20
 800a10e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a110:	6a3b      	ldr	r3, [r7, #32]
 800a112:	e853 3f00 	ldrex	r3, [r3]
 800a116:	61fb      	str	r3, [r7, #28]
   return(result);
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	f023 0301 	bic.w	r3, r3, #1
 800a11e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	3314      	adds	r3, #20
 800a126:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a128:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a12a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a12c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a12e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a130:	e841 2300 	strex	r3, r2, [r1]
 800a134:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d1e5      	bne.n	800a108 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a140:	2b01      	cmp	r3, #1
 800a142:	d119      	bne.n	800a178 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	330c      	adds	r3, #12
 800a14a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	e853 3f00 	ldrex	r3, [r3]
 800a152:	60bb      	str	r3, [r7, #8]
   return(result);
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	f023 0310 	bic.w	r3, r3, #16
 800a15a:	647b      	str	r3, [r7, #68]	; 0x44
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	330c      	adds	r3, #12
 800a162:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a164:	61ba      	str	r2, [r7, #24]
 800a166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a168:	6979      	ldr	r1, [r7, #20]
 800a16a:	69ba      	ldr	r2, [r7, #24]
 800a16c:	e841 2300 	strex	r3, r2, [r1]
 800a170:	613b      	str	r3, [r7, #16]
   return(result);
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d1e5      	bne.n	800a144 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2220      	movs	r2, #32
 800a17c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a186:	bf00      	nop
 800a188:	3754      	adds	r7, #84	; 0x54
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr

0800a192 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b084      	sub	sp, #16
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a19e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f7ff fecb 	bl	8009f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1b2:	bf00      	nop
 800a1b4:	3710      	adds	r7, #16
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a1ba:	b480      	push	{r7}
 800a1bc:	b085      	sub	sp, #20
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	2b21      	cmp	r3, #33	; 0x21
 800a1cc:	d13e      	bne.n	800a24c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1d6:	d114      	bne.n	800a202 <UART_Transmit_IT+0x48>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	691b      	ldr	r3, [r3, #16]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d110      	bne.n	800a202 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6a1b      	ldr	r3, [r3, #32]
 800a1e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	881b      	ldrh	r3, [r3, #0]
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a1b      	ldr	r3, [r3, #32]
 800a1fa:	1c9a      	adds	r2, r3, #2
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	621a      	str	r2, [r3, #32]
 800a200:	e008      	b.n	800a214 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a1b      	ldr	r3, [r3, #32]
 800a206:	1c59      	adds	r1, r3, #1
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	6211      	str	r1, [r2, #32]
 800a20c:	781a      	ldrb	r2, [r3, #0]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a218:	b29b      	uxth	r3, r3
 800a21a:	3b01      	subs	r3, #1
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	4619      	mov	r1, r3
 800a222:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a224:	2b00      	cmp	r3, #0
 800a226:	d10f      	bne.n	800a248 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68da      	ldr	r2, [r3, #12]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a236:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	68da      	ldr	r2, [r3, #12]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a246:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a248:	2300      	movs	r3, #0
 800a24a:	e000      	b.n	800a24e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a24c:	2302      	movs	r3, #2
  }
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3714      	adds	r7, #20
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b082      	sub	sp, #8
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	68da      	ldr	r2, [r3, #12]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a270:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2220      	movs	r2, #32
 800a276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f7ff fe5a 	bl	8009f34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3708      	adds	r7, #8
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b08c      	sub	sp, #48	; 0x30
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	2b22      	cmp	r3, #34	; 0x22
 800a29c:	f040 80ab 	bne.w	800a3f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2a8:	d117      	bne.n	800a2da <UART_Receive_IT+0x50>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	691b      	ldr	r3, [r3, #16]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d113      	bne.n	800a2da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2c8:	b29a      	uxth	r2, r3
 800a2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2d2:	1c9a      	adds	r2, r3, #2
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	629a      	str	r2, [r3, #40]	; 0x28
 800a2d8:	e026      	b.n	800a328 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2ec:	d007      	beq.n	800a2fe <UART_Receive_IT+0x74>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10a      	bne.n	800a30c <UART_Receive_IT+0x82>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d106      	bne.n	800a30c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	b2da      	uxtb	r2, r3
 800a306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a308:	701a      	strb	r2, [r3, #0]
 800a30a:	e008      	b.n	800a31e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	b2db      	uxtb	r3, r3
 800a314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a318:	b2da      	uxtb	r2, r3
 800a31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a31c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a322:	1c5a      	adds	r2, r3, #1
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	3b01      	subs	r3, #1
 800a330:	b29b      	uxth	r3, r3
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	4619      	mov	r1, r3
 800a336:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d15a      	bne.n	800a3f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	68da      	ldr	r2, [r3, #12]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f022 0220 	bic.w	r2, r2, #32
 800a34a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68da      	ldr	r2, [r3, #12]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a35a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	695a      	ldr	r2, [r3, #20]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f022 0201 	bic.w	r2, r2, #1
 800a36a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2220      	movs	r2, #32
 800a370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d135      	bne.n	800a3e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	330c      	adds	r3, #12
 800a388:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	e853 3f00 	ldrex	r3, [r3]
 800a390:	613b      	str	r3, [r7, #16]
   return(result);
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	f023 0310 	bic.w	r3, r3, #16
 800a398:	627b      	str	r3, [r7, #36]	; 0x24
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	330c      	adds	r3, #12
 800a3a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3a2:	623a      	str	r2, [r7, #32]
 800a3a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a6:	69f9      	ldr	r1, [r7, #28]
 800a3a8:	6a3a      	ldr	r2, [r7, #32]
 800a3aa:	e841 2300 	strex	r3, r2, [r1]
 800a3ae:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1e5      	bne.n	800a382 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 0310 	and.w	r3, r3, #16
 800a3c0:	2b10      	cmp	r3, #16
 800a3c2:	d10a      	bne.n	800a3da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	60fb      	str	r3, [r7, #12]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	60fb      	str	r3, [r7, #12]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	60fb      	str	r3, [r7, #12]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a3de:	4619      	mov	r1, r3
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f7ff fdbb 	bl	8009f5c <HAL_UARTEx_RxEventCallback>
 800a3e6:	e002      	b.n	800a3ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7fb fa4b 	bl	8005884 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	e002      	b.n	800a3f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	e000      	b.n	800a3f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a3f6:	2302      	movs	r3, #2
  }
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3730      	adds	r7, #48	; 0x30
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a404:	b0c0      	sub	sp, #256	; 0x100
 800a406:	af00      	add	r7, sp, #0
 800a408:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a40c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a41c:	68d9      	ldr	r1, [r3, #12]
 800a41e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a422:	681a      	ldr	r2, [r3, #0]
 800a424:	ea40 0301 	orr.w	r3, r0, r1
 800a428:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a42a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a42e:	689a      	ldr	r2, [r3, #8]
 800a430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a434:	691b      	ldr	r3, [r3, #16]
 800a436:	431a      	orrs	r2, r3
 800a438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a43c:	695b      	ldr	r3, [r3, #20]
 800a43e:	431a      	orrs	r2, r3
 800a440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a444:	69db      	ldr	r3, [r3, #28]
 800a446:	4313      	orrs	r3, r2
 800a448:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a44c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a458:	f021 010c 	bic.w	r1, r1, #12
 800a45c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a466:	430b      	orrs	r3, r1
 800a468:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a46a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	695b      	ldr	r3, [r3, #20]
 800a472:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a47a:	6999      	ldr	r1, [r3, #24]
 800a47c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	ea40 0301 	orr.w	r3, r0, r1
 800a486:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	4b8f      	ldr	r3, [pc, #572]	; (800a6cc <UART_SetConfig+0x2cc>)
 800a490:	429a      	cmp	r2, r3
 800a492:	d005      	beq.n	800a4a0 <UART_SetConfig+0xa0>
 800a494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a498:	681a      	ldr	r2, [r3, #0]
 800a49a:	4b8d      	ldr	r3, [pc, #564]	; (800a6d0 <UART_SetConfig+0x2d0>)
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d104      	bne.n	800a4aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a4a0:	f7fd f93a 	bl	8007718 <HAL_RCC_GetPCLK2Freq>
 800a4a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a4a8:	e003      	b.n	800a4b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a4aa:	f7fd f921 	bl	80076f0 <HAL_RCC_GetPCLK1Freq>
 800a4ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4b6:	69db      	ldr	r3, [r3, #28]
 800a4b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4bc:	f040 810c 	bne.w	800a6d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a4c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a4ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a4ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a4d2:	4622      	mov	r2, r4
 800a4d4:	462b      	mov	r3, r5
 800a4d6:	1891      	adds	r1, r2, r2
 800a4d8:	65b9      	str	r1, [r7, #88]	; 0x58
 800a4da:	415b      	adcs	r3, r3
 800a4dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a4de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a4e2:	4621      	mov	r1, r4
 800a4e4:	eb12 0801 	adds.w	r8, r2, r1
 800a4e8:	4629      	mov	r1, r5
 800a4ea:	eb43 0901 	adc.w	r9, r3, r1
 800a4ee:	f04f 0200 	mov.w	r2, #0
 800a4f2:	f04f 0300 	mov.w	r3, #0
 800a4f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a4fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a4fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a502:	4690      	mov	r8, r2
 800a504:	4699      	mov	r9, r3
 800a506:	4623      	mov	r3, r4
 800a508:	eb18 0303 	adds.w	r3, r8, r3
 800a50c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a510:	462b      	mov	r3, r5
 800a512:	eb49 0303 	adc.w	r3, r9, r3
 800a516:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a51a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a526:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a52a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a52e:	460b      	mov	r3, r1
 800a530:	18db      	adds	r3, r3, r3
 800a532:	653b      	str	r3, [r7, #80]	; 0x50
 800a534:	4613      	mov	r3, r2
 800a536:	eb42 0303 	adc.w	r3, r2, r3
 800a53a:	657b      	str	r3, [r7, #84]	; 0x54
 800a53c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a540:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a544:	f7f6 fbc0 	bl	8000cc8 <__aeabi_uldivmod>
 800a548:	4602      	mov	r2, r0
 800a54a:	460b      	mov	r3, r1
 800a54c:	4b61      	ldr	r3, [pc, #388]	; (800a6d4 <UART_SetConfig+0x2d4>)
 800a54e:	fba3 2302 	umull	r2, r3, r3, r2
 800a552:	095b      	lsrs	r3, r3, #5
 800a554:	011c      	lsls	r4, r3, #4
 800a556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a55a:	2200      	movs	r2, #0
 800a55c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a560:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a564:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a568:	4642      	mov	r2, r8
 800a56a:	464b      	mov	r3, r9
 800a56c:	1891      	adds	r1, r2, r2
 800a56e:	64b9      	str	r1, [r7, #72]	; 0x48
 800a570:	415b      	adcs	r3, r3
 800a572:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a574:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a578:	4641      	mov	r1, r8
 800a57a:	eb12 0a01 	adds.w	sl, r2, r1
 800a57e:	4649      	mov	r1, r9
 800a580:	eb43 0b01 	adc.w	fp, r3, r1
 800a584:	f04f 0200 	mov.w	r2, #0
 800a588:	f04f 0300 	mov.w	r3, #0
 800a58c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a590:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a594:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a598:	4692      	mov	sl, r2
 800a59a:	469b      	mov	fp, r3
 800a59c:	4643      	mov	r3, r8
 800a59e:	eb1a 0303 	adds.w	r3, sl, r3
 800a5a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a5a6:	464b      	mov	r3, r9
 800a5a8:	eb4b 0303 	adc.w	r3, fp, r3
 800a5ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a5b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a5bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a5c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	18db      	adds	r3, r3, r3
 800a5c8:	643b      	str	r3, [r7, #64]	; 0x40
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	eb42 0303 	adc.w	r3, r2, r3
 800a5d0:	647b      	str	r3, [r7, #68]	; 0x44
 800a5d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a5d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a5da:	f7f6 fb75 	bl	8000cc8 <__aeabi_uldivmod>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	4611      	mov	r1, r2
 800a5e4:	4b3b      	ldr	r3, [pc, #236]	; (800a6d4 <UART_SetConfig+0x2d4>)
 800a5e6:	fba3 2301 	umull	r2, r3, r3, r1
 800a5ea:	095b      	lsrs	r3, r3, #5
 800a5ec:	2264      	movs	r2, #100	; 0x64
 800a5ee:	fb02 f303 	mul.w	r3, r2, r3
 800a5f2:	1acb      	subs	r3, r1, r3
 800a5f4:	00db      	lsls	r3, r3, #3
 800a5f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a5fa:	4b36      	ldr	r3, [pc, #216]	; (800a6d4 <UART_SetConfig+0x2d4>)
 800a5fc:	fba3 2302 	umull	r2, r3, r3, r2
 800a600:	095b      	lsrs	r3, r3, #5
 800a602:	005b      	lsls	r3, r3, #1
 800a604:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a608:	441c      	add	r4, r3
 800a60a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a60e:	2200      	movs	r2, #0
 800a610:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a614:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a618:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a61c:	4642      	mov	r2, r8
 800a61e:	464b      	mov	r3, r9
 800a620:	1891      	adds	r1, r2, r2
 800a622:	63b9      	str	r1, [r7, #56]	; 0x38
 800a624:	415b      	adcs	r3, r3
 800a626:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a628:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a62c:	4641      	mov	r1, r8
 800a62e:	1851      	adds	r1, r2, r1
 800a630:	6339      	str	r1, [r7, #48]	; 0x30
 800a632:	4649      	mov	r1, r9
 800a634:	414b      	adcs	r3, r1
 800a636:	637b      	str	r3, [r7, #52]	; 0x34
 800a638:	f04f 0200 	mov.w	r2, #0
 800a63c:	f04f 0300 	mov.w	r3, #0
 800a640:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a644:	4659      	mov	r1, fp
 800a646:	00cb      	lsls	r3, r1, #3
 800a648:	4651      	mov	r1, sl
 800a64a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a64e:	4651      	mov	r1, sl
 800a650:	00ca      	lsls	r2, r1, #3
 800a652:	4610      	mov	r0, r2
 800a654:	4619      	mov	r1, r3
 800a656:	4603      	mov	r3, r0
 800a658:	4642      	mov	r2, r8
 800a65a:	189b      	adds	r3, r3, r2
 800a65c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a660:	464b      	mov	r3, r9
 800a662:	460a      	mov	r2, r1
 800a664:	eb42 0303 	adc.w	r3, r2, r3
 800a668:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a66c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a678:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a67c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a680:	460b      	mov	r3, r1
 800a682:	18db      	adds	r3, r3, r3
 800a684:	62bb      	str	r3, [r7, #40]	; 0x28
 800a686:	4613      	mov	r3, r2
 800a688:	eb42 0303 	adc.w	r3, r2, r3
 800a68c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a68e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a692:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a696:	f7f6 fb17 	bl	8000cc8 <__aeabi_uldivmod>
 800a69a:	4602      	mov	r2, r0
 800a69c:	460b      	mov	r3, r1
 800a69e:	4b0d      	ldr	r3, [pc, #52]	; (800a6d4 <UART_SetConfig+0x2d4>)
 800a6a0:	fba3 1302 	umull	r1, r3, r3, r2
 800a6a4:	095b      	lsrs	r3, r3, #5
 800a6a6:	2164      	movs	r1, #100	; 0x64
 800a6a8:	fb01 f303 	mul.w	r3, r1, r3
 800a6ac:	1ad3      	subs	r3, r2, r3
 800a6ae:	00db      	lsls	r3, r3, #3
 800a6b0:	3332      	adds	r3, #50	; 0x32
 800a6b2:	4a08      	ldr	r2, [pc, #32]	; (800a6d4 <UART_SetConfig+0x2d4>)
 800a6b4:	fba2 2303 	umull	r2, r3, r2, r3
 800a6b8:	095b      	lsrs	r3, r3, #5
 800a6ba:	f003 0207 	and.w	r2, r3, #7
 800a6be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4422      	add	r2, r4
 800a6c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a6c8:	e105      	b.n	800a8d6 <UART_SetConfig+0x4d6>
 800a6ca:	bf00      	nop
 800a6cc:	40011000 	.word	0x40011000
 800a6d0:	40011400 	.word	0x40011400
 800a6d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a6d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6dc:	2200      	movs	r2, #0
 800a6de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a6e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a6e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a6ea:	4642      	mov	r2, r8
 800a6ec:	464b      	mov	r3, r9
 800a6ee:	1891      	adds	r1, r2, r2
 800a6f0:	6239      	str	r1, [r7, #32]
 800a6f2:	415b      	adcs	r3, r3
 800a6f4:	627b      	str	r3, [r7, #36]	; 0x24
 800a6f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a6fa:	4641      	mov	r1, r8
 800a6fc:	1854      	adds	r4, r2, r1
 800a6fe:	4649      	mov	r1, r9
 800a700:	eb43 0501 	adc.w	r5, r3, r1
 800a704:	f04f 0200 	mov.w	r2, #0
 800a708:	f04f 0300 	mov.w	r3, #0
 800a70c:	00eb      	lsls	r3, r5, #3
 800a70e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a712:	00e2      	lsls	r2, r4, #3
 800a714:	4614      	mov	r4, r2
 800a716:	461d      	mov	r5, r3
 800a718:	4643      	mov	r3, r8
 800a71a:	18e3      	adds	r3, r4, r3
 800a71c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a720:	464b      	mov	r3, r9
 800a722:	eb45 0303 	adc.w	r3, r5, r3
 800a726:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a72a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a736:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a73a:	f04f 0200 	mov.w	r2, #0
 800a73e:	f04f 0300 	mov.w	r3, #0
 800a742:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a746:	4629      	mov	r1, r5
 800a748:	008b      	lsls	r3, r1, #2
 800a74a:	4621      	mov	r1, r4
 800a74c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a750:	4621      	mov	r1, r4
 800a752:	008a      	lsls	r2, r1, #2
 800a754:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a758:	f7f6 fab6 	bl	8000cc8 <__aeabi_uldivmod>
 800a75c:	4602      	mov	r2, r0
 800a75e:	460b      	mov	r3, r1
 800a760:	4b60      	ldr	r3, [pc, #384]	; (800a8e4 <UART_SetConfig+0x4e4>)
 800a762:	fba3 2302 	umull	r2, r3, r3, r2
 800a766:	095b      	lsrs	r3, r3, #5
 800a768:	011c      	lsls	r4, r3, #4
 800a76a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a76e:	2200      	movs	r2, #0
 800a770:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a774:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a778:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a77c:	4642      	mov	r2, r8
 800a77e:	464b      	mov	r3, r9
 800a780:	1891      	adds	r1, r2, r2
 800a782:	61b9      	str	r1, [r7, #24]
 800a784:	415b      	adcs	r3, r3
 800a786:	61fb      	str	r3, [r7, #28]
 800a788:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a78c:	4641      	mov	r1, r8
 800a78e:	1851      	adds	r1, r2, r1
 800a790:	6139      	str	r1, [r7, #16]
 800a792:	4649      	mov	r1, r9
 800a794:	414b      	adcs	r3, r1
 800a796:	617b      	str	r3, [r7, #20]
 800a798:	f04f 0200 	mov.w	r2, #0
 800a79c:	f04f 0300 	mov.w	r3, #0
 800a7a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a7a4:	4659      	mov	r1, fp
 800a7a6:	00cb      	lsls	r3, r1, #3
 800a7a8:	4651      	mov	r1, sl
 800a7aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a7ae:	4651      	mov	r1, sl
 800a7b0:	00ca      	lsls	r2, r1, #3
 800a7b2:	4610      	mov	r0, r2
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	4642      	mov	r2, r8
 800a7ba:	189b      	adds	r3, r3, r2
 800a7bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a7c0:	464b      	mov	r3, r9
 800a7c2:	460a      	mov	r2, r1
 800a7c4:	eb42 0303 	adc.w	r3, r2, r3
 800a7c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a7cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	67bb      	str	r3, [r7, #120]	; 0x78
 800a7d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a7d8:	f04f 0200 	mov.w	r2, #0
 800a7dc:	f04f 0300 	mov.w	r3, #0
 800a7e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a7e4:	4649      	mov	r1, r9
 800a7e6:	008b      	lsls	r3, r1, #2
 800a7e8:	4641      	mov	r1, r8
 800a7ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a7ee:	4641      	mov	r1, r8
 800a7f0:	008a      	lsls	r2, r1, #2
 800a7f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a7f6:	f7f6 fa67 	bl	8000cc8 <__aeabi_uldivmod>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	4b39      	ldr	r3, [pc, #228]	; (800a8e4 <UART_SetConfig+0x4e4>)
 800a800:	fba3 1302 	umull	r1, r3, r3, r2
 800a804:	095b      	lsrs	r3, r3, #5
 800a806:	2164      	movs	r1, #100	; 0x64
 800a808:	fb01 f303 	mul.w	r3, r1, r3
 800a80c:	1ad3      	subs	r3, r2, r3
 800a80e:	011b      	lsls	r3, r3, #4
 800a810:	3332      	adds	r3, #50	; 0x32
 800a812:	4a34      	ldr	r2, [pc, #208]	; (800a8e4 <UART_SetConfig+0x4e4>)
 800a814:	fba2 2303 	umull	r2, r3, r2, r3
 800a818:	095b      	lsrs	r3, r3, #5
 800a81a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a81e:	441c      	add	r4, r3
 800a820:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a824:	2200      	movs	r2, #0
 800a826:	673b      	str	r3, [r7, #112]	; 0x70
 800a828:	677a      	str	r2, [r7, #116]	; 0x74
 800a82a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a82e:	4642      	mov	r2, r8
 800a830:	464b      	mov	r3, r9
 800a832:	1891      	adds	r1, r2, r2
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	415b      	adcs	r3, r3
 800a838:	60fb      	str	r3, [r7, #12]
 800a83a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a83e:	4641      	mov	r1, r8
 800a840:	1851      	adds	r1, r2, r1
 800a842:	6039      	str	r1, [r7, #0]
 800a844:	4649      	mov	r1, r9
 800a846:	414b      	adcs	r3, r1
 800a848:	607b      	str	r3, [r7, #4]
 800a84a:	f04f 0200 	mov.w	r2, #0
 800a84e:	f04f 0300 	mov.w	r3, #0
 800a852:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a856:	4659      	mov	r1, fp
 800a858:	00cb      	lsls	r3, r1, #3
 800a85a:	4651      	mov	r1, sl
 800a85c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a860:	4651      	mov	r1, sl
 800a862:	00ca      	lsls	r2, r1, #3
 800a864:	4610      	mov	r0, r2
 800a866:	4619      	mov	r1, r3
 800a868:	4603      	mov	r3, r0
 800a86a:	4642      	mov	r2, r8
 800a86c:	189b      	adds	r3, r3, r2
 800a86e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a870:	464b      	mov	r3, r9
 800a872:	460a      	mov	r2, r1
 800a874:	eb42 0303 	adc.w	r3, r2, r3
 800a878:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a87a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	663b      	str	r3, [r7, #96]	; 0x60
 800a884:	667a      	str	r2, [r7, #100]	; 0x64
 800a886:	f04f 0200 	mov.w	r2, #0
 800a88a:	f04f 0300 	mov.w	r3, #0
 800a88e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a892:	4649      	mov	r1, r9
 800a894:	008b      	lsls	r3, r1, #2
 800a896:	4641      	mov	r1, r8
 800a898:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a89c:	4641      	mov	r1, r8
 800a89e:	008a      	lsls	r2, r1, #2
 800a8a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a8a4:	f7f6 fa10 	bl	8000cc8 <__aeabi_uldivmod>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	4b0d      	ldr	r3, [pc, #52]	; (800a8e4 <UART_SetConfig+0x4e4>)
 800a8ae:	fba3 1302 	umull	r1, r3, r3, r2
 800a8b2:	095b      	lsrs	r3, r3, #5
 800a8b4:	2164      	movs	r1, #100	; 0x64
 800a8b6:	fb01 f303 	mul.w	r3, r1, r3
 800a8ba:	1ad3      	subs	r3, r2, r3
 800a8bc:	011b      	lsls	r3, r3, #4
 800a8be:	3332      	adds	r3, #50	; 0x32
 800a8c0:	4a08      	ldr	r2, [pc, #32]	; (800a8e4 <UART_SetConfig+0x4e4>)
 800a8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8c6:	095b      	lsrs	r3, r3, #5
 800a8c8:	f003 020f 	and.w	r2, r3, #15
 800a8cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4422      	add	r2, r4
 800a8d4:	609a      	str	r2, [r3, #8]
}
 800a8d6:	bf00      	nop
 800a8d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a8e2:	bf00      	nop
 800a8e4:	51eb851f 	.word	0x51eb851f

0800a8e8 <atof>:
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	f001 bb5f 	b.w	800bfac <strtod>

0800a8ee <atoi>:
 800a8ee:	220a      	movs	r2, #10
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	f001 bbe9 	b.w	800c0c8 <strtol>
	...

0800a8f8 <__errno>:
 800a8f8:	4b01      	ldr	r3, [pc, #4]	; (800a900 <__errno+0x8>)
 800a8fa:	6818      	ldr	r0, [r3, #0]
 800a8fc:	4770      	bx	lr
 800a8fe:	bf00      	nop
 800a900:	2000004c 	.word	0x2000004c

0800a904 <__libc_init_array>:
 800a904:	b570      	push	{r4, r5, r6, lr}
 800a906:	4d0d      	ldr	r5, [pc, #52]	; (800a93c <__libc_init_array+0x38>)
 800a908:	4c0d      	ldr	r4, [pc, #52]	; (800a940 <__libc_init_array+0x3c>)
 800a90a:	1b64      	subs	r4, r4, r5
 800a90c:	10a4      	asrs	r4, r4, #2
 800a90e:	2600      	movs	r6, #0
 800a910:	42a6      	cmp	r6, r4
 800a912:	d109      	bne.n	800a928 <__libc_init_array+0x24>
 800a914:	4d0b      	ldr	r5, [pc, #44]	; (800a944 <__libc_init_array+0x40>)
 800a916:	4c0c      	ldr	r4, [pc, #48]	; (800a948 <__libc_init_array+0x44>)
 800a918:	f005 fb50 	bl	800ffbc <_init>
 800a91c:	1b64      	subs	r4, r4, r5
 800a91e:	10a4      	asrs	r4, r4, #2
 800a920:	2600      	movs	r6, #0
 800a922:	42a6      	cmp	r6, r4
 800a924:	d105      	bne.n	800a932 <__libc_init_array+0x2e>
 800a926:	bd70      	pop	{r4, r5, r6, pc}
 800a928:	f855 3b04 	ldr.w	r3, [r5], #4
 800a92c:	4798      	blx	r3
 800a92e:	3601      	adds	r6, #1
 800a930:	e7ee      	b.n	800a910 <__libc_init_array+0xc>
 800a932:	f855 3b04 	ldr.w	r3, [r5], #4
 800a936:	4798      	blx	r3
 800a938:	3601      	adds	r6, #1
 800a93a:	e7f2      	b.n	800a922 <__libc_init_array+0x1e>
 800a93c:	08011688 	.word	0x08011688
 800a940:	08011688 	.word	0x08011688
 800a944:	08011688 	.word	0x08011688
 800a948:	0801168c 	.word	0x0801168c

0800a94c <memcpy>:
 800a94c:	440a      	add	r2, r1
 800a94e:	4291      	cmp	r1, r2
 800a950:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a954:	d100      	bne.n	800a958 <memcpy+0xc>
 800a956:	4770      	bx	lr
 800a958:	b510      	push	{r4, lr}
 800a95a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a95e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a962:	4291      	cmp	r1, r2
 800a964:	d1f9      	bne.n	800a95a <memcpy+0xe>
 800a966:	bd10      	pop	{r4, pc}

0800a968 <memset>:
 800a968:	4402      	add	r2, r0
 800a96a:	4603      	mov	r3, r0
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d100      	bne.n	800a972 <memset+0xa>
 800a970:	4770      	bx	lr
 800a972:	f803 1b01 	strb.w	r1, [r3], #1
 800a976:	e7f9      	b.n	800a96c <memset+0x4>

0800a978 <__cvt>:
 800a978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a97c:	ec55 4b10 	vmov	r4, r5, d0
 800a980:	2d00      	cmp	r5, #0
 800a982:	460e      	mov	r6, r1
 800a984:	4619      	mov	r1, r3
 800a986:	462b      	mov	r3, r5
 800a988:	bfbb      	ittet	lt
 800a98a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a98e:	461d      	movlt	r5, r3
 800a990:	2300      	movge	r3, #0
 800a992:	232d      	movlt	r3, #45	; 0x2d
 800a994:	700b      	strb	r3, [r1, #0]
 800a996:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a998:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a99c:	4691      	mov	r9, r2
 800a99e:	f023 0820 	bic.w	r8, r3, #32
 800a9a2:	bfbc      	itt	lt
 800a9a4:	4622      	movlt	r2, r4
 800a9a6:	4614      	movlt	r4, r2
 800a9a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a9ac:	d005      	beq.n	800a9ba <__cvt+0x42>
 800a9ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a9b2:	d100      	bne.n	800a9b6 <__cvt+0x3e>
 800a9b4:	3601      	adds	r6, #1
 800a9b6:	2102      	movs	r1, #2
 800a9b8:	e000      	b.n	800a9bc <__cvt+0x44>
 800a9ba:	2103      	movs	r1, #3
 800a9bc:	ab03      	add	r3, sp, #12
 800a9be:	9301      	str	r3, [sp, #4]
 800a9c0:	ab02      	add	r3, sp, #8
 800a9c2:	9300      	str	r3, [sp, #0]
 800a9c4:	ec45 4b10 	vmov	d0, r4, r5
 800a9c8:	4653      	mov	r3, sl
 800a9ca:	4632      	mov	r2, r6
 800a9cc:	f001 fcd4 	bl	800c378 <_dtoa_r>
 800a9d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a9d4:	4607      	mov	r7, r0
 800a9d6:	d102      	bne.n	800a9de <__cvt+0x66>
 800a9d8:	f019 0f01 	tst.w	r9, #1
 800a9dc:	d022      	beq.n	800aa24 <__cvt+0xac>
 800a9de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a9e2:	eb07 0906 	add.w	r9, r7, r6
 800a9e6:	d110      	bne.n	800aa0a <__cvt+0x92>
 800a9e8:	783b      	ldrb	r3, [r7, #0]
 800a9ea:	2b30      	cmp	r3, #48	; 0x30
 800a9ec:	d10a      	bne.n	800aa04 <__cvt+0x8c>
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	4629      	mov	r1, r5
 800a9f6:	f7f6 f887 	bl	8000b08 <__aeabi_dcmpeq>
 800a9fa:	b918      	cbnz	r0, 800aa04 <__cvt+0x8c>
 800a9fc:	f1c6 0601 	rsb	r6, r6, #1
 800aa00:	f8ca 6000 	str.w	r6, [sl]
 800aa04:	f8da 3000 	ldr.w	r3, [sl]
 800aa08:	4499      	add	r9, r3
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	4620      	mov	r0, r4
 800aa10:	4629      	mov	r1, r5
 800aa12:	f7f6 f879 	bl	8000b08 <__aeabi_dcmpeq>
 800aa16:	b108      	cbz	r0, 800aa1c <__cvt+0xa4>
 800aa18:	f8cd 900c 	str.w	r9, [sp, #12]
 800aa1c:	2230      	movs	r2, #48	; 0x30
 800aa1e:	9b03      	ldr	r3, [sp, #12]
 800aa20:	454b      	cmp	r3, r9
 800aa22:	d307      	bcc.n	800aa34 <__cvt+0xbc>
 800aa24:	9b03      	ldr	r3, [sp, #12]
 800aa26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa28:	1bdb      	subs	r3, r3, r7
 800aa2a:	4638      	mov	r0, r7
 800aa2c:	6013      	str	r3, [r2, #0]
 800aa2e:	b004      	add	sp, #16
 800aa30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa34:	1c59      	adds	r1, r3, #1
 800aa36:	9103      	str	r1, [sp, #12]
 800aa38:	701a      	strb	r2, [r3, #0]
 800aa3a:	e7f0      	b.n	800aa1e <__cvt+0xa6>

0800aa3c <__exponent>:
 800aa3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2900      	cmp	r1, #0
 800aa42:	bfb8      	it	lt
 800aa44:	4249      	neglt	r1, r1
 800aa46:	f803 2b02 	strb.w	r2, [r3], #2
 800aa4a:	bfb4      	ite	lt
 800aa4c:	222d      	movlt	r2, #45	; 0x2d
 800aa4e:	222b      	movge	r2, #43	; 0x2b
 800aa50:	2909      	cmp	r1, #9
 800aa52:	7042      	strb	r2, [r0, #1]
 800aa54:	dd2a      	ble.n	800aaac <__exponent+0x70>
 800aa56:	f10d 0407 	add.w	r4, sp, #7
 800aa5a:	46a4      	mov	ip, r4
 800aa5c:	270a      	movs	r7, #10
 800aa5e:	46a6      	mov	lr, r4
 800aa60:	460a      	mov	r2, r1
 800aa62:	fb91 f6f7 	sdiv	r6, r1, r7
 800aa66:	fb07 1516 	mls	r5, r7, r6, r1
 800aa6a:	3530      	adds	r5, #48	; 0x30
 800aa6c:	2a63      	cmp	r2, #99	; 0x63
 800aa6e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800aa72:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800aa76:	4631      	mov	r1, r6
 800aa78:	dcf1      	bgt.n	800aa5e <__exponent+0x22>
 800aa7a:	3130      	adds	r1, #48	; 0x30
 800aa7c:	f1ae 0502 	sub.w	r5, lr, #2
 800aa80:	f804 1c01 	strb.w	r1, [r4, #-1]
 800aa84:	1c44      	adds	r4, r0, #1
 800aa86:	4629      	mov	r1, r5
 800aa88:	4561      	cmp	r1, ip
 800aa8a:	d30a      	bcc.n	800aaa2 <__exponent+0x66>
 800aa8c:	f10d 0209 	add.w	r2, sp, #9
 800aa90:	eba2 020e 	sub.w	r2, r2, lr
 800aa94:	4565      	cmp	r5, ip
 800aa96:	bf88      	it	hi
 800aa98:	2200      	movhi	r2, #0
 800aa9a:	4413      	add	r3, r2
 800aa9c:	1a18      	subs	r0, r3, r0
 800aa9e:	b003      	add	sp, #12
 800aaa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aaa6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800aaaa:	e7ed      	b.n	800aa88 <__exponent+0x4c>
 800aaac:	2330      	movs	r3, #48	; 0x30
 800aaae:	3130      	adds	r1, #48	; 0x30
 800aab0:	7083      	strb	r3, [r0, #2]
 800aab2:	70c1      	strb	r1, [r0, #3]
 800aab4:	1d03      	adds	r3, r0, #4
 800aab6:	e7f1      	b.n	800aa9c <__exponent+0x60>

0800aab8 <_printf_float>:
 800aab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aabc:	ed2d 8b02 	vpush	{d8}
 800aac0:	b08d      	sub	sp, #52	; 0x34
 800aac2:	460c      	mov	r4, r1
 800aac4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800aac8:	4616      	mov	r6, r2
 800aaca:	461f      	mov	r7, r3
 800aacc:	4605      	mov	r5, r0
 800aace:	f002 ff67 	bl	800d9a0 <_localeconv_r>
 800aad2:	f8d0 a000 	ldr.w	sl, [r0]
 800aad6:	4650      	mov	r0, sl
 800aad8:	f7f5 fb9a 	bl	8000210 <strlen>
 800aadc:	2300      	movs	r3, #0
 800aade:	930a      	str	r3, [sp, #40]	; 0x28
 800aae0:	6823      	ldr	r3, [r4, #0]
 800aae2:	9305      	str	r3, [sp, #20]
 800aae4:	f8d8 3000 	ldr.w	r3, [r8]
 800aae8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aaec:	3307      	adds	r3, #7
 800aaee:	f023 0307 	bic.w	r3, r3, #7
 800aaf2:	f103 0208 	add.w	r2, r3, #8
 800aaf6:	f8c8 2000 	str.w	r2, [r8]
 800aafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ab02:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ab06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ab0a:	9307      	str	r3, [sp, #28]
 800ab0c:	f8cd 8018 	str.w	r8, [sp, #24]
 800ab10:	ee08 0a10 	vmov	s16, r0
 800ab14:	4b9f      	ldr	r3, [pc, #636]	; (800ad94 <_printf_float+0x2dc>)
 800ab16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab1e:	f7f6 f825 	bl	8000b6c <__aeabi_dcmpun>
 800ab22:	bb88      	cbnz	r0, 800ab88 <_printf_float+0xd0>
 800ab24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab28:	4b9a      	ldr	r3, [pc, #616]	; (800ad94 <_printf_float+0x2dc>)
 800ab2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab2e:	f7f5 ffff 	bl	8000b30 <__aeabi_dcmple>
 800ab32:	bb48      	cbnz	r0, 800ab88 <_printf_float+0xd0>
 800ab34:	2200      	movs	r2, #0
 800ab36:	2300      	movs	r3, #0
 800ab38:	4640      	mov	r0, r8
 800ab3a:	4649      	mov	r1, r9
 800ab3c:	f7f5 ffee 	bl	8000b1c <__aeabi_dcmplt>
 800ab40:	b110      	cbz	r0, 800ab48 <_printf_float+0x90>
 800ab42:	232d      	movs	r3, #45	; 0x2d
 800ab44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab48:	4b93      	ldr	r3, [pc, #588]	; (800ad98 <_printf_float+0x2e0>)
 800ab4a:	4894      	ldr	r0, [pc, #592]	; (800ad9c <_printf_float+0x2e4>)
 800ab4c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ab50:	bf94      	ite	ls
 800ab52:	4698      	movls	r8, r3
 800ab54:	4680      	movhi	r8, r0
 800ab56:	2303      	movs	r3, #3
 800ab58:	6123      	str	r3, [r4, #16]
 800ab5a:	9b05      	ldr	r3, [sp, #20]
 800ab5c:	f023 0204 	bic.w	r2, r3, #4
 800ab60:	6022      	str	r2, [r4, #0]
 800ab62:	f04f 0900 	mov.w	r9, #0
 800ab66:	9700      	str	r7, [sp, #0]
 800ab68:	4633      	mov	r3, r6
 800ab6a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ab6c:	4621      	mov	r1, r4
 800ab6e:	4628      	mov	r0, r5
 800ab70:	f000 f9d8 	bl	800af24 <_printf_common>
 800ab74:	3001      	adds	r0, #1
 800ab76:	f040 8090 	bne.w	800ac9a <_printf_float+0x1e2>
 800ab7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab7e:	b00d      	add	sp, #52	; 0x34
 800ab80:	ecbd 8b02 	vpop	{d8}
 800ab84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab88:	4642      	mov	r2, r8
 800ab8a:	464b      	mov	r3, r9
 800ab8c:	4640      	mov	r0, r8
 800ab8e:	4649      	mov	r1, r9
 800ab90:	f7f5 ffec 	bl	8000b6c <__aeabi_dcmpun>
 800ab94:	b140      	cbz	r0, 800aba8 <_printf_float+0xf0>
 800ab96:	464b      	mov	r3, r9
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	bfbc      	itt	lt
 800ab9c:	232d      	movlt	r3, #45	; 0x2d
 800ab9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aba2:	487f      	ldr	r0, [pc, #508]	; (800ada0 <_printf_float+0x2e8>)
 800aba4:	4b7f      	ldr	r3, [pc, #508]	; (800ada4 <_printf_float+0x2ec>)
 800aba6:	e7d1      	b.n	800ab4c <_printf_float+0x94>
 800aba8:	6863      	ldr	r3, [r4, #4]
 800abaa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800abae:	9206      	str	r2, [sp, #24]
 800abb0:	1c5a      	adds	r2, r3, #1
 800abb2:	d13f      	bne.n	800ac34 <_printf_float+0x17c>
 800abb4:	2306      	movs	r3, #6
 800abb6:	6063      	str	r3, [r4, #4]
 800abb8:	9b05      	ldr	r3, [sp, #20]
 800abba:	6861      	ldr	r1, [r4, #4]
 800abbc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800abc0:	2300      	movs	r3, #0
 800abc2:	9303      	str	r3, [sp, #12]
 800abc4:	ab0a      	add	r3, sp, #40	; 0x28
 800abc6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800abca:	ab09      	add	r3, sp, #36	; 0x24
 800abcc:	ec49 8b10 	vmov	d0, r8, r9
 800abd0:	9300      	str	r3, [sp, #0]
 800abd2:	6022      	str	r2, [r4, #0]
 800abd4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800abd8:	4628      	mov	r0, r5
 800abda:	f7ff fecd 	bl	800a978 <__cvt>
 800abde:	9b06      	ldr	r3, [sp, #24]
 800abe0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800abe2:	2b47      	cmp	r3, #71	; 0x47
 800abe4:	4680      	mov	r8, r0
 800abe6:	d108      	bne.n	800abfa <_printf_float+0x142>
 800abe8:	1cc8      	adds	r0, r1, #3
 800abea:	db02      	blt.n	800abf2 <_printf_float+0x13a>
 800abec:	6863      	ldr	r3, [r4, #4]
 800abee:	4299      	cmp	r1, r3
 800abf0:	dd41      	ble.n	800ac76 <_printf_float+0x1be>
 800abf2:	f1ab 0b02 	sub.w	fp, fp, #2
 800abf6:	fa5f fb8b 	uxtb.w	fp, fp
 800abfa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800abfe:	d820      	bhi.n	800ac42 <_printf_float+0x18a>
 800ac00:	3901      	subs	r1, #1
 800ac02:	465a      	mov	r2, fp
 800ac04:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ac08:	9109      	str	r1, [sp, #36]	; 0x24
 800ac0a:	f7ff ff17 	bl	800aa3c <__exponent>
 800ac0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac10:	1813      	adds	r3, r2, r0
 800ac12:	2a01      	cmp	r2, #1
 800ac14:	4681      	mov	r9, r0
 800ac16:	6123      	str	r3, [r4, #16]
 800ac18:	dc02      	bgt.n	800ac20 <_printf_float+0x168>
 800ac1a:	6822      	ldr	r2, [r4, #0]
 800ac1c:	07d2      	lsls	r2, r2, #31
 800ac1e:	d501      	bpl.n	800ac24 <_printf_float+0x16c>
 800ac20:	3301      	adds	r3, #1
 800ac22:	6123      	str	r3, [r4, #16]
 800ac24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d09c      	beq.n	800ab66 <_printf_float+0xae>
 800ac2c:	232d      	movs	r3, #45	; 0x2d
 800ac2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac32:	e798      	b.n	800ab66 <_printf_float+0xae>
 800ac34:	9a06      	ldr	r2, [sp, #24]
 800ac36:	2a47      	cmp	r2, #71	; 0x47
 800ac38:	d1be      	bne.n	800abb8 <_printf_float+0x100>
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1bc      	bne.n	800abb8 <_printf_float+0x100>
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e7b9      	b.n	800abb6 <_printf_float+0xfe>
 800ac42:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ac46:	d118      	bne.n	800ac7a <_printf_float+0x1c2>
 800ac48:	2900      	cmp	r1, #0
 800ac4a:	6863      	ldr	r3, [r4, #4]
 800ac4c:	dd0b      	ble.n	800ac66 <_printf_float+0x1ae>
 800ac4e:	6121      	str	r1, [r4, #16]
 800ac50:	b913      	cbnz	r3, 800ac58 <_printf_float+0x1a0>
 800ac52:	6822      	ldr	r2, [r4, #0]
 800ac54:	07d0      	lsls	r0, r2, #31
 800ac56:	d502      	bpl.n	800ac5e <_printf_float+0x1a6>
 800ac58:	3301      	adds	r3, #1
 800ac5a:	440b      	add	r3, r1
 800ac5c:	6123      	str	r3, [r4, #16]
 800ac5e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ac60:	f04f 0900 	mov.w	r9, #0
 800ac64:	e7de      	b.n	800ac24 <_printf_float+0x16c>
 800ac66:	b913      	cbnz	r3, 800ac6e <_printf_float+0x1b6>
 800ac68:	6822      	ldr	r2, [r4, #0]
 800ac6a:	07d2      	lsls	r2, r2, #31
 800ac6c:	d501      	bpl.n	800ac72 <_printf_float+0x1ba>
 800ac6e:	3302      	adds	r3, #2
 800ac70:	e7f4      	b.n	800ac5c <_printf_float+0x1a4>
 800ac72:	2301      	movs	r3, #1
 800ac74:	e7f2      	b.n	800ac5c <_printf_float+0x1a4>
 800ac76:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ac7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac7c:	4299      	cmp	r1, r3
 800ac7e:	db05      	blt.n	800ac8c <_printf_float+0x1d4>
 800ac80:	6823      	ldr	r3, [r4, #0]
 800ac82:	6121      	str	r1, [r4, #16]
 800ac84:	07d8      	lsls	r0, r3, #31
 800ac86:	d5ea      	bpl.n	800ac5e <_printf_float+0x1a6>
 800ac88:	1c4b      	adds	r3, r1, #1
 800ac8a:	e7e7      	b.n	800ac5c <_printf_float+0x1a4>
 800ac8c:	2900      	cmp	r1, #0
 800ac8e:	bfd4      	ite	le
 800ac90:	f1c1 0202 	rsble	r2, r1, #2
 800ac94:	2201      	movgt	r2, #1
 800ac96:	4413      	add	r3, r2
 800ac98:	e7e0      	b.n	800ac5c <_printf_float+0x1a4>
 800ac9a:	6823      	ldr	r3, [r4, #0]
 800ac9c:	055a      	lsls	r2, r3, #21
 800ac9e:	d407      	bmi.n	800acb0 <_printf_float+0x1f8>
 800aca0:	6923      	ldr	r3, [r4, #16]
 800aca2:	4642      	mov	r2, r8
 800aca4:	4631      	mov	r1, r6
 800aca6:	4628      	mov	r0, r5
 800aca8:	47b8      	blx	r7
 800acaa:	3001      	adds	r0, #1
 800acac:	d12c      	bne.n	800ad08 <_printf_float+0x250>
 800acae:	e764      	b.n	800ab7a <_printf_float+0xc2>
 800acb0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800acb4:	f240 80e0 	bls.w	800ae78 <_printf_float+0x3c0>
 800acb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800acbc:	2200      	movs	r2, #0
 800acbe:	2300      	movs	r3, #0
 800acc0:	f7f5 ff22 	bl	8000b08 <__aeabi_dcmpeq>
 800acc4:	2800      	cmp	r0, #0
 800acc6:	d034      	beq.n	800ad32 <_printf_float+0x27a>
 800acc8:	4a37      	ldr	r2, [pc, #220]	; (800ada8 <_printf_float+0x2f0>)
 800acca:	2301      	movs	r3, #1
 800accc:	4631      	mov	r1, r6
 800acce:	4628      	mov	r0, r5
 800acd0:	47b8      	blx	r7
 800acd2:	3001      	adds	r0, #1
 800acd4:	f43f af51 	beq.w	800ab7a <_printf_float+0xc2>
 800acd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800acdc:	429a      	cmp	r2, r3
 800acde:	db02      	blt.n	800ace6 <_printf_float+0x22e>
 800ace0:	6823      	ldr	r3, [r4, #0]
 800ace2:	07d8      	lsls	r0, r3, #31
 800ace4:	d510      	bpl.n	800ad08 <_printf_float+0x250>
 800ace6:	ee18 3a10 	vmov	r3, s16
 800acea:	4652      	mov	r2, sl
 800acec:	4631      	mov	r1, r6
 800acee:	4628      	mov	r0, r5
 800acf0:	47b8      	blx	r7
 800acf2:	3001      	adds	r0, #1
 800acf4:	f43f af41 	beq.w	800ab7a <_printf_float+0xc2>
 800acf8:	f04f 0800 	mov.w	r8, #0
 800acfc:	f104 091a 	add.w	r9, r4, #26
 800ad00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad02:	3b01      	subs	r3, #1
 800ad04:	4543      	cmp	r3, r8
 800ad06:	dc09      	bgt.n	800ad1c <_printf_float+0x264>
 800ad08:	6823      	ldr	r3, [r4, #0]
 800ad0a:	079b      	lsls	r3, r3, #30
 800ad0c:	f100 8105 	bmi.w	800af1a <_printf_float+0x462>
 800ad10:	68e0      	ldr	r0, [r4, #12]
 800ad12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad14:	4298      	cmp	r0, r3
 800ad16:	bfb8      	it	lt
 800ad18:	4618      	movlt	r0, r3
 800ad1a:	e730      	b.n	800ab7e <_printf_float+0xc6>
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	464a      	mov	r2, r9
 800ad20:	4631      	mov	r1, r6
 800ad22:	4628      	mov	r0, r5
 800ad24:	47b8      	blx	r7
 800ad26:	3001      	adds	r0, #1
 800ad28:	f43f af27 	beq.w	800ab7a <_printf_float+0xc2>
 800ad2c:	f108 0801 	add.w	r8, r8, #1
 800ad30:	e7e6      	b.n	800ad00 <_printf_float+0x248>
 800ad32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	dc39      	bgt.n	800adac <_printf_float+0x2f4>
 800ad38:	4a1b      	ldr	r2, [pc, #108]	; (800ada8 <_printf_float+0x2f0>)
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	4631      	mov	r1, r6
 800ad3e:	4628      	mov	r0, r5
 800ad40:	47b8      	blx	r7
 800ad42:	3001      	adds	r0, #1
 800ad44:	f43f af19 	beq.w	800ab7a <_printf_float+0xc2>
 800ad48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	d102      	bne.n	800ad56 <_printf_float+0x29e>
 800ad50:	6823      	ldr	r3, [r4, #0]
 800ad52:	07d9      	lsls	r1, r3, #31
 800ad54:	d5d8      	bpl.n	800ad08 <_printf_float+0x250>
 800ad56:	ee18 3a10 	vmov	r3, s16
 800ad5a:	4652      	mov	r2, sl
 800ad5c:	4631      	mov	r1, r6
 800ad5e:	4628      	mov	r0, r5
 800ad60:	47b8      	blx	r7
 800ad62:	3001      	adds	r0, #1
 800ad64:	f43f af09 	beq.w	800ab7a <_printf_float+0xc2>
 800ad68:	f04f 0900 	mov.w	r9, #0
 800ad6c:	f104 0a1a 	add.w	sl, r4, #26
 800ad70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad72:	425b      	negs	r3, r3
 800ad74:	454b      	cmp	r3, r9
 800ad76:	dc01      	bgt.n	800ad7c <_printf_float+0x2c4>
 800ad78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad7a:	e792      	b.n	800aca2 <_printf_float+0x1ea>
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	4652      	mov	r2, sl
 800ad80:	4631      	mov	r1, r6
 800ad82:	4628      	mov	r0, r5
 800ad84:	47b8      	blx	r7
 800ad86:	3001      	adds	r0, #1
 800ad88:	f43f aef7 	beq.w	800ab7a <_printf_float+0xc2>
 800ad8c:	f109 0901 	add.w	r9, r9, #1
 800ad90:	e7ee      	b.n	800ad70 <_printf_float+0x2b8>
 800ad92:	bf00      	nop
 800ad94:	7fefffff 	.word	0x7fefffff
 800ad98:	08011170 	.word	0x08011170
 800ad9c:	08011174 	.word	0x08011174
 800ada0:	0801117c 	.word	0x0801117c
 800ada4:	08011178 	.word	0x08011178
 800ada8:	08011180 	.word	0x08011180
 800adac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800adb0:	429a      	cmp	r2, r3
 800adb2:	bfa8      	it	ge
 800adb4:	461a      	movge	r2, r3
 800adb6:	2a00      	cmp	r2, #0
 800adb8:	4691      	mov	r9, r2
 800adba:	dc37      	bgt.n	800ae2c <_printf_float+0x374>
 800adbc:	f04f 0b00 	mov.w	fp, #0
 800adc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800adc4:	f104 021a 	add.w	r2, r4, #26
 800adc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800adca:	9305      	str	r3, [sp, #20]
 800adcc:	eba3 0309 	sub.w	r3, r3, r9
 800add0:	455b      	cmp	r3, fp
 800add2:	dc33      	bgt.n	800ae3c <_printf_float+0x384>
 800add4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800add8:	429a      	cmp	r2, r3
 800adda:	db3b      	blt.n	800ae54 <_printf_float+0x39c>
 800addc:	6823      	ldr	r3, [r4, #0]
 800adde:	07da      	lsls	r2, r3, #31
 800ade0:	d438      	bmi.n	800ae54 <_printf_float+0x39c>
 800ade2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ade4:	9a05      	ldr	r2, [sp, #20]
 800ade6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ade8:	1a9a      	subs	r2, r3, r2
 800adea:	eba3 0901 	sub.w	r9, r3, r1
 800adee:	4591      	cmp	r9, r2
 800adf0:	bfa8      	it	ge
 800adf2:	4691      	movge	r9, r2
 800adf4:	f1b9 0f00 	cmp.w	r9, #0
 800adf8:	dc35      	bgt.n	800ae66 <_printf_float+0x3ae>
 800adfa:	f04f 0800 	mov.w	r8, #0
 800adfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae02:	f104 0a1a 	add.w	sl, r4, #26
 800ae06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae0a:	1a9b      	subs	r3, r3, r2
 800ae0c:	eba3 0309 	sub.w	r3, r3, r9
 800ae10:	4543      	cmp	r3, r8
 800ae12:	f77f af79 	ble.w	800ad08 <_printf_float+0x250>
 800ae16:	2301      	movs	r3, #1
 800ae18:	4652      	mov	r2, sl
 800ae1a:	4631      	mov	r1, r6
 800ae1c:	4628      	mov	r0, r5
 800ae1e:	47b8      	blx	r7
 800ae20:	3001      	adds	r0, #1
 800ae22:	f43f aeaa 	beq.w	800ab7a <_printf_float+0xc2>
 800ae26:	f108 0801 	add.w	r8, r8, #1
 800ae2a:	e7ec      	b.n	800ae06 <_printf_float+0x34e>
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	4631      	mov	r1, r6
 800ae30:	4642      	mov	r2, r8
 800ae32:	4628      	mov	r0, r5
 800ae34:	47b8      	blx	r7
 800ae36:	3001      	adds	r0, #1
 800ae38:	d1c0      	bne.n	800adbc <_printf_float+0x304>
 800ae3a:	e69e      	b.n	800ab7a <_printf_float+0xc2>
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	4631      	mov	r1, r6
 800ae40:	4628      	mov	r0, r5
 800ae42:	9205      	str	r2, [sp, #20]
 800ae44:	47b8      	blx	r7
 800ae46:	3001      	adds	r0, #1
 800ae48:	f43f ae97 	beq.w	800ab7a <_printf_float+0xc2>
 800ae4c:	9a05      	ldr	r2, [sp, #20]
 800ae4e:	f10b 0b01 	add.w	fp, fp, #1
 800ae52:	e7b9      	b.n	800adc8 <_printf_float+0x310>
 800ae54:	ee18 3a10 	vmov	r3, s16
 800ae58:	4652      	mov	r2, sl
 800ae5a:	4631      	mov	r1, r6
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	47b8      	blx	r7
 800ae60:	3001      	adds	r0, #1
 800ae62:	d1be      	bne.n	800ade2 <_printf_float+0x32a>
 800ae64:	e689      	b.n	800ab7a <_printf_float+0xc2>
 800ae66:	9a05      	ldr	r2, [sp, #20]
 800ae68:	464b      	mov	r3, r9
 800ae6a:	4442      	add	r2, r8
 800ae6c:	4631      	mov	r1, r6
 800ae6e:	4628      	mov	r0, r5
 800ae70:	47b8      	blx	r7
 800ae72:	3001      	adds	r0, #1
 800ae74:	d1c1      	bne.n	800adfa <_printf_float+0x342>
 800ae76:	e680      	b.n	800ab7a <_printf_float+0xc2>
 800ae78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae7a:	2a01      	cmp	r2, #1
 800ae7c:	dc01      	bgt.n	800ae82 <_printf_float+0x3ca>
 800ae7e:	07db      	lsls	r3, r3, #31
 800ae80:	d538      	bpl.n	800aef4 <_printf_float+0x43c>
 800ae82:	2301      	movs	r3, #1
 800ae84:	4642      	mov	r2, r8
 800ae86:	4631      	mov	r1, r6
 800ae88:	4628      	mov	r0, r5
 800ae8a:	47b8      	blx	r7
 800ae8c:	3001      	adds	r0, #1
 800ae8e:	f43f ae74 	beq.w	800ab7a <_printf_float+0xc2>
 800ae92:	ee18 3a10 	vmov	r3, s16
 800ae96:	4652      	mov	r2, sl
 800ae98:	4631      	mov	r1, r6
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	47b8      	blx	r7
 800ae9e:	3001      	adds	r0, #1
 800aea0:	f43f ae6b 	beq.w	800ab7a <_printf_float+0xc2>
 800aea4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aea8:	2200      	movs	r2, #0
 800aeaa:	2300      	movs	r3, #0
 800aeac:	f7f5 fe2c 	bl	8000b08 <__aeabi_dcmpeq>
 800aeb0:	b9d8      	cbnz	r0, 800aeea <_printf_float+0x432>
 800aeb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeb4:	f108 0201 	add.w	r2, r8, #1
 800aeb8:	3b01      	subs	r3, #1
 800aeba:	4631      	mov	r1, r6
 800aebc:	4628      	mov	r0, r5
 800aebe:	47b8      	blx	r7
 800aec0:	3001      	adds	r0, #1
 800aec2:	d10e      	bne.n	800aee2 <_printf_float+0x42a>
 800aec4:	e659      	b.n	800ab7a <_printf_float+0xc2>
 800aec6:	2301      	movs	r3, #1
 800aec8:	4652      	mov	r2, sl
 800aeca:	4631      	mov	r1, r6
 800aecc:	4628      	mov	r0, r5
 800aece:	47b8      	blx	r7
 800aed0:	3001      	adds	r0, #1
 800aed2:	f43f ae52 	beq.w	800ab7a <_printf_float+0xc2>
 800aed6:	f108 0801 	add.w	r8, r8, #1
 800aeda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aedc:	3b01      	subs	r3, #1
 800aede:	4543      	cmp	r3, r8
 800aee0:	dcf1      	bgt.n	800aec6 <_printf_float+0x40e>
 800aee2:	464b      	mov	r3, r9
 800aee4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aee8:	e6dc      	b.n	800aca4 <_printf_float+0x1ec>
 800aeea:	f04f 0800 	mov.w	r8, #0
 800aeee:	f104 0a1a 	add.w	sl, r4, #26
 800aef2:	e7f2      	b.n	800aeda <_printf_float+0x422>
 800aef4:	2301      	movs	r3, #1
 800aef6:	4642      	mov	r2, r8
 800aef8:	e7df      	b.n	800aeba <_printf_float+0x402>
 800aefa:	2301      	movs	r3, #1
 800aefc:	464a      	mov	r2, r9
 800aefe:	4631      	mov	r1, r6
 800af00:	4628      	mov	r0, r5
 800af02:	47b8      	blx	r7
 800af04:	3001      	adds	r0, #1
 800af06:	f43f ae38 	beq.w	800ab7a <_printf_float+0xc2>
 800af0a:	f108 0801 	add.w	r8, r8, #1
 800af0e:	68e3      	ldr	r3, [r4, #12]
 800af10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af12:	1a5b      	subs	r3, r3, r1
 800af14:	4543      	cmp	r3, r8
 800af16:	dcf0      	bgt.n	800aefa <_printf_float+0x442>
 800af18:	e6fa      	b.n	800ad10 <_printf_float+0x258>
 800af1a:	f04f 0800 	mov.w	r8, #0
 800af1e:	f104 0919 	add.w	r9, r4, #25
 800af22:	e7f4      	b.n	800af0e <_printf_float+0x456>

0800af24 <_printf_common>:
 800af24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af28:	4616      	mov	r6, r2
 800af2a:	4699      	mov	r9, r3
 800af2c:	688a      	ldr	r2, [r1, #8]
 800af2e:	690b      	ldr	r3, [r1, #16]
 800af30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af34:	4293      	cmp	r3, r2
 800af36:	bfb8      	it	lt
 800af38:	4613      	movlt	r3, r2
 800af3a:	6033      	str	r3, [r6, #0]
 800af3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af40:	4607      	mov	r7, r0
 800af42:	460c      	mov	r4, r1
 800af44:	b10a      	cbz	r2, 800af4a <_printf_common+0x26>
 800af46:	3301      	adds	r3, #1
 800af48:	6033      	str	r3, [r6, #0]
 800af4a:	6823      	ldr	r3, [r4, #0]
 800af4c:	0699      	lsls	r1, r3, #26
 800af4e:	bf42      	ittt	mi
 800af50:	6833      	ldrmi	r3, [r6, #0]
 800af52:	3302      	addmi	r3, #2
 800af54:	6033      	strmi	r3, [r6, #0]
 800af56:	6825      	ldr	r5, [r4, #0]
 800af58:	f015 0506 	ands.w	r5, r5, #6
 800af5c:	d106      	bne.n	800af6c <_printf_common+0x48>
 800af5e:	f104 0a19 	add.w	sl, r4, #25
 800af62:	68e3      	ldr	r3, [r4, #12]
 800af64:	6832      	ldr	r2, [r6, #0]
 800af66:	1a9b      	subs	r3, r3, r2
 800af68:	42ab      	cmp	r3, r5
 800af6a:	dc26      	bgt.n	800afba <_printf_common+0x96>
 800af6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af70:	1e13      	subs	r3, r2, #0
 800af72:	6822      	ldr	r2, [r4, #0]
 800af74:	bf18      	it	ne
 800af76:	2301      	movne	r3, #1
 800af78:	0692      	lsls	r2, r2, #26
 800af7a:	d42b      	bmi.n	800afd4 <_printf_common+0xb0>
 800af7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af80:	4649      	mov	r1, r9
 800af82:	4638      	mov	r0, r7
 800af84:	47c0      	blx	r8
 800af86:	3001      	adds	r0, #1
 800af88:	d01e      	beq.n	800afc8 <_printf_common+0xa4>
 800af8a:	6823      	ldr	r3, [r4, #0]
 800af8c:	68e5      	ldr	r5, [r4, #12]
 800af8e:	6832      	ldr	r2, [r6, #0]
 800af90:	f003 0306 	and.w	r3, r3, #6
 800af94:	2b04      	cmp	r3, #4
 800af96:	bf08      	it	eq
 800af98:	1aad      	subeq	r5, r5, r2
 800af9a:	68a3      	ldr	r3, [r4, #8]
 800af9c:	6922      	ldr	r2, [r4, #16]
 800af9e:	bf0c      	ite	eq
 800afa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afa4:	2500      	movne	r5, #0
 800afa6:	4293      	cmp	r3, r2
 800afa8:	bfc4      	itt	gt
 800afaa:	1a9b      	subgt	r3, r3, r2
 800afac:	18ed      	addgt	r5, r5, r3
 800afae:	2600      	movs	r6, #0
 800afb0:	341a      	adds	r4, #26
 800afb2:	42b5      	cmp	r5, r6
 800afb4:	d11a      	bne.n	800afec <_printf_common+0xc8>
 800afb6:	2000      	movs	r0, #0
 800afb8:	e008      	b.n	800afcc <_printf_common+0xa8>
 800afba:	2301      	movs	r3, #1
 800afbc:	4652      	mov	r2, sl
 800afbe:	4649      	mov	r1, r9
 800afc0:	4638      	mov	r0, r7
 800afc2:	47c0      	blx	r8
 800afc4:	3001      	adds	r0, #1
 800afc6:	d103      	bne.n	800afd0 <_printf_common+0xac>
 800afc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afd0:	3501      	adds	r5, #1
 800afd2:	e7c6      	b.n	800af62 <_printf_common+0x3e>
 800afd4:	18e1      	adds	r1, r4, r3
 800afd6:	1c5a      	adds	r2, r3, #1
 800afd8:	2030      	movs	r0, #48	; 0x30
 800afda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800afde:	4422      	add	r2, r4
 800afe0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800afe4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800afe8:	3302      	adds	r3, #2
 800afea:	e7c7      	b.n	800af7c <_printf_common+0x58>
 800afec:	2301      	movs	r3, #1
 800afee:	4622      	mov	r2, r4
 800aff0:	4649      	mov	r1, r9
 800aff2:	4638      	mov	r0, r7
 800aff4:	47c0      	blx	r8
 800aff6:	3001      	adds	r0, #1
 800aff8:	d0e6      	beq.n	800afc8 <_printf_common+0xa4>
 800affa:	3601      	adds	r6, #1
 800affc:	e7d9      	b.n	800afb2 <_printf_common+0x8e>
	...

0800b000 <_printf_i>:
 800b000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b004:	7e0f      	ldrb	r7, [r1, #24]
 800b006:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b008:	2f78      	cmp	r7, #120	; 0x78
 800b00a:	4691      	mov	r9, r2
 800b00c:	4680      	mov	r8, r0
 800b00e:	460c      	mov	r4, r1
 800b010:	469a      	mov	sl, r3
 800b012:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b016:	d807      	bhi.n	800b028 <_printf_i+0x28>
 800b018:	2f62      	cmp	r7, #98	; 0x62
 800b01a:	d80a      	bhi.n	800b032 <_printf_i+0x32>
 800b01c:	2f00      	cmp	r7, #0
 800b01e:	f000 80d8 	beq.w	800b1d2 <_printf_i+0x1d2>
 800b022:	2f58      	cmp	r7, #88	; 0x58
 800b024:	f000 80a3 	beq.w	800b16e <_printf_i+0x16e>
 800b028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b02c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b030:	e03a      	b.n	800b0a8 <_printf_i+0xa8>
 800b032:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b036:	2b15      	cmp	r3, #21
 800b038:	d8f6      	bhi.n	800b028 <_printf_i+0x28>
 800b03a:	a101      	add	r1, pc, #4	; (adr r1, 800b040 <_printf_i+0x40>)
 800b03c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b040:	0800b099 	.word	0x0800b099
 800b044:	0800b0ad 	.word	0x0800b0ad
 800b048:	0800b029 	.word	0x0800b029
 800b04c:	0800b029 	.word	0x0800b029
 800b050:	0800b029 	.word	0x0800b029
 800b054:	0800b029 	.word	0x0800b029
 800b058:	0800b0ad 	.word	0x0800b0ad
 800b05c:	0800b029 	.word	0x0800b029
 800b060:	0800b029 	.word	0x0800b029
 800b064:	0800b029 	.word	0x0800b029
 800b068:	0800b029 	.word	0x0800b029
 800b06c:	0800b1b9 	.word	0x0800b1b9
 800b070:	0800b0dd 	.word	0x0800b0dd
 800b074:	0800b19b 	.word	0x0800b19b
 800b078:	0800b029 	.word	0x0800b029
 800b07c:	0800b029 	.word	0x0800b029
 800b080:	0800b1db 	.word	0x0800b1db
 800b084:	0800b029 	.word	0x0800b029
 800b088:	0800b0dd 	.word	0x0800b0dd
 800b08c:	0800b029 	.word	0x0800b029
 800b090:	0800b029 	.word	0x0800b029
 800b094:	0800b1a3 	.word	0x0800b1a3
 800b098:	682b      	ldr	r3, [r5, #0]
 800b09a:	1d1a      	adds	r2, r3, #4
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	602a      	str	r2, [r5, #0]
 800b0a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	e0a3      	b.n	800b1f4 <_printf_i+0x1f4>
 800b0ac:	6820      	ldr	r0, [r4, #0]
 800b0ae:	6829      	ldr	r1, [r5, #0]
 800b0b0:	0606      	lsls	r6, r0, #24
 800b0b2:	f101 0304 	add.w	r3, r1, #4
 800b0b6:	d50a      	bpl.n	800b0ce <_printf_i+0xce>
 800b0b8:	680e      	ldr	r6, [r1, #0]
 800b0ba:	602b      	str	r3, [r5, #0]
 800b0bc:	2e00      	cmp	r6, #0
 800b0be:	da03      	bge.n	800b0c8 <_printf_i+0xc8>
 800b0c0:	232d      	movs	r3, #45	; 0x2d
 800b0c2:	4276      	negs	r6, r6
 800b0c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0c8:	485e      	ldr	r0, [pc, #376]	; (800b244 <_printf_i+0x244>)
 800b0ca:	230a      	movs	r3, #10
 800b0cc:	e019      	b.n	800b102 <_printf_i+0x102>
 800b0ce:	680e      	ldr	r6, [r1, #0]
 800b0d0:	602b      	str	r3, [r5, #0]
 800b0d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b0d6:	bf18      	it	ne
 800b0d8:	b236      	sxthne	r6, r6
 800b0da:	e7ef      	b.n	800b0bc <_printf_i+0xbc>
 800b0dc:	682b      	ldr	r3, [r5, #0]
 800b0de:	6820      	ldr	r0, [r4, #0]
 800b0e0:	1d19      	adds	r1, r3, #4
 800b0e2:	6029      	str	r1, [r5, #0]
 800b0e4:	0601      	lsls	r1, r0, #24
 800b0e6:	d501      	bpl.n	800b0ec <_printf_i+0xec>
 800b0e8:	681e      	ldr	r6, [r3, #0]
 800b0ea:	e002      	b.n	800b0f2 <_printf_i+0xf2>
 800b0ec:	0646      	lsls	r6, r0, #25
 800b0ee:	d5fb      	bpl.n	800b0e8 <_printf_i+0xe8>
 800b0f0:	881e      	ldrh	r6, [r3, #0]
 800b0f2:	4854      	ldr	r0, [pc, #336]	; (800b244 <_printf_i+0x244>)
 800b0f4:	2f6f      	cmp	r7, #111	; 0x6f
 800b0f6:	bf0c      	ite	eq
 800b0f8:	2308      	moveq	r3, #8
 800b0fa:	230a      	movne	r3, #10
 800b0fc:	2100      	movs	r1, #0
 800b0fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b102:	6865      	ldr	r5, [r4, #4]
 800b104:	60a5      	str	r5, [r4, #8]
 800b106:	2d00      	cmp	r5, #0
 800b108:	bfa2      	ittt	ge
 800b10a:	6821      	ldrge	r1, [r4, #0]
 800b10c:	f021 0104 	bicge.w	r1, r1, #4
 800b110:	6021      	strge	r1, [r4, #0]
 800b112:	b90e      	cbnz	r6, 800b118 <_printf_i+0x118>
 800b114:	2d00      	cmp	r5, #0
 800b116:	d04d      	beq.n	800b1b4 <_printf_i+0x1b4>
 800b118:	4615      	mov	r5, r2
 800b11a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b11e:	fb03 6711 	mls	r7, r3, r1, r6
 800b122:	5dc7      	ldrb	r7, [r0, r7]
 800b124:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b128:	4637      	mov	r7, r6
 800b12a:	42bb      	cmp	r3, r7
 800b12c:	460e      	mov	r6, r1
 800b12e:	d9f4      	bls.n	800b11a <_printf_i+0x11a>
 800b130:	2b08      	cmp	r3, #8
 800b132:	d10b      	bne.n	800b14c <_printf_i+0x14c>
 800b134:	6823      	ldr	r3, [r4, #0]
 800b136:	07de      	lsls	r6, r3, #31
 800b138:	d508      	bpl.n	800b14c <_printf_i+0x14c>
 800b13a:	6923      	ldr	r3, [r4, #16]
 800b13c:	6861      	ldr	r1, [r4, #4]
 800b13e:	4299      	cmp	r1, r3
 800b140:	bfde      	ittt	le
 800b142:	2330      	movle	r3, #48	; 0x30
 800b144:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b148:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b14c:	1b52      	subs	r2, r2, r5
 800b14e:	6122      	str	r2, [r4, #16]
 800b150:	f8cd a000 	str.w	sl, [sp]
 800b154:	464b      	mov	r3, r9
 800b156:	aa03      	add	r2, sp, #12
 800b158:	4621      	mov	r1, r4
 800b15a:	4640      	mov	r0, r8
 800b15c:	f7ff fee2 	bl	800af24 <_printf_common>
 800b160:	3001      	adds	r0, #1
 800b162:	d14c      	bne.n	800b1fe <_printf_i+0x1fe>
 800b164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b168:	b004      	add	sp, #16
 800b16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b16e:	4835      	ldr	r0, [pc, #212]	; (800b244 <_printf_i+0x244>)
 800b170:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b174:	6829      	ldr	r1, [r5, #0]
 800b176:	6823      	ldr	r3, [r4, #0]
 800b178:	f851 6b04 	ldr.w	r6, [r1], #4
 800b17c:	6029      	str	r1, [r5, #0]
 800b17e:	061d      	lsls	r5, r3, #24
 800b180:	d514      	bpl.n	800b1ac <_printf_i+0x1ac>
 800b182:	07df      	lsls	r7, r3, #31
 800b184:	bf44      	itt	mi
 800b186:	f043 0320 	orrmi.w	r3, r3, #32
 800b18a:	6023      	strmi	r3, [r4, #0]
 800b18c:	b91e      	cbnz	r6, 800b196 <_printf_i+0x196>
 800b18e:	6823      	ldr	r3, [r4, #0]
 800b190:	f023 0320 	bic.w	r3, r3, #32
 800b194:	6023      	str	r3, [r4, #0]
 800b196:	2310      	movs	r3, #16
 800b198:	e7b0      	b.n	800b0fc <_printf_i+0xfc>
 800b19a:	6823      	ldr	r3, [r4, #0]
 800b19c:	f043 0320 	orr.w	r3, r3, #32
 800b1a0:	6023      	str	r3, [r4, #0]
 800b1a2:	2378      	movs	r3, #120	; 0x78
 800b1a4:	4828      	ldr	r0, [pc, #160]	; (800b248 <_printf_i+0x248>)
 800b1a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b1aa:	e7e3      	b.n	800b174 <_printf_i+0x174>
 800b1ac:	0659      	lsls	r1, r3, #25
 800b1ae:	bf48      	it	mi
 800b1b0:	b2b6      	uxthmi	r6, r6
 800b1b2:	e7e6      	b.n	800b182 <_printf_i+0x182>
 800b1b4:	4615      	mov	r5, r2
 800b1b6:	e7bb      	b.n	800b130 <_printf_i+0x130>
 800b1b8:	682b      	ldr	r3, [r5, #0]
 800b1ba:	6826      	ldr	r6, [r4, #0]
 800b1bc:	6961      	ldr	r1, [r4, #20]
 800b1be:	1d18      	adds	r0, r3, #4
 800b1c0:	6028      	str	r0, [r5, #0]
 800b1c2:	0635      	lsls	r5, r6, #24
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	d501      	bpl.n	800b1cc <_printf_i+0x1cc>
 800b1c8:	6019      	str	r1, [r3, #0]
 800b1ca:	e002      	b.n	800b1d2 <_printf_i+0x1d2>
 800b1cc:	0670      	lsls	r0, r6, #25
 800b1ce:	d5fb      	bpl.n	800b1c8 <_printf_i+0x1c8>
 800b1d0:	8019      	strh	r1, [r3, #0]
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	6123      	str	r3, [r4, #16]
 800b1d6:	4615      	mov	r5, r2
 800b1d8:	e7ba      	b.n	800b150 <_printf_i+0x150>
 800b1da:	682b      	ldr	r3, [r5, #0]
 800b1dc:	1d1a      	adds	r2, r3, #4
 800b1de:	602a      	str	r2, [r5, #0]
 800b1e0:	681d      	ldr	r5, [r3, #0]
 800b1e2:	6862      	ldr	r2, [r4, #4]
 800b1e4:	2100      	movs	r1, #0
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	f7f5 f81a 	bl	8000220 <memchr>
 800b1ec:	b108      	cbz	r0, 800b1f2 <_printf_i+0x1f2>
 800b1ee:	1b40      	subs	r0, r0, r5
 800b1f0:	6060      	str	r0, [r4, #4]
 800b1f2:	6863      	ldr	r3, [r4, #4]
 800b1f4:	6123      	str	r3, [r4, #16]
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1fc:	e7a8      	b.n	800b150 <_printf_i+0x150>
 800b1fe:	6923      	ldr	r3, [r4, #16]
 800b200:	462a      	mov	r2, r5
 800b202:	4649      	mov	r1, r9
 800b204:	4640      	mov	r0, r8
 800b206:	47d0      	blx	sl
 800b208:	3001      	adds	r0, #1
 800b20a:	d0ab      	beq.n	800b164 <_printf_i+0x164>
 800b20c:	6823      	ldr	r3, [r4, #0]
 800b20e:	079b      	lsls	r3, r3, #30
 800b210:	d413      	bmi.n	800b23a <_printf_i+0x23a>
 800b212:	68e0      	ldr	r0, [r4, #12]
 800b214:	9b03      	ldr	r3, [sp, #12]
 800b216:	4298      	cmp	r0, r3
 800b218:	bfb8      	it	lt
 800b21a:	4618      	movlt	r0, r3
 800b21c:	e7a4      	b.n	800b168 <_printf_i+0x168>
 800b21e:	2301      	movs	r3, #1
 800b220:	4632      	mov	r2, r6
 800b222:	4649      	mov	r1, r9
 800b224:	4640      	mov	r0, r8
 800b226:	47d0      	blx	sl
 800b228:	3001      	adds	r0, #1
 800b22a:	d09b      	beq.n	800b164 <_printf_i+0x164>
 800b22c:	3501      	adds	r5, #1
 800b22e:	68e3      	ldr	r3, [r4, #12]
 800b230:	9903      	ldr	r1, [sp, #12]
 800b232:	1a5b      	subs	r3, r3, r1
 800b234:	42ab      	cmp	r3, r5
 800b236:	dcf2      	bgt.n	800b21e <_printf_i+0x21e>
 800b238:	e7eb      	b.n	800b212 <_printf_i+0x212>
 800b23a:	2500      	movs	r5, #0
 800b23c:	f104 0619 	add.w	r6, r4, #25
 800b240:	e7f5      	b.n	800b22e <_printf_i+0x22e>
 800b242:	bf00      	nop
 800b244:	08011182 	.word	0x08011182
 800b248:	08011193 	.word	0x08011193

0800b24c <iprintf>:
 800b24c:	b40f      	push	{r0, r1, r2, r3}
 800b24e:	4b0a      	ldr	r3, [pc, #40]	; (800b278 <iprintf+0x2c>)
 800b250:	b513      	push	{r0, r1, r4, lr}
 800b252:	681c      	ldr	r4, [r3, #0]
 800b254:	b124      	cbz	r4, 800b260 <iprintf+0x14>
 800b256:	69a3      	ldr	r3, [r4, #24]
 800b258:	b913      	cbnz	r3, 800b260 <iprintf+0x14>
 800b25a:	4620      	mov	r0, r4
 800b25c:	f001 ff94 	bl	800d188 <__sinit>
 800b260:	ab05      	add	r3, sp, #20
 800b262:	9a04      	ldr	r2, [sp, #16]
 800b264:	68a1      	ldr	r1, [r4, #8]
 800b266:	9301      	str	r3, [sp, #4]
 800b268:	4620      	mov	r0, r4
 800b26a:	f003 fa01 	bl	800e670 <_vfiprintf_r>
 800b26e:	b002      	add	sp, #8
 800b270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b274:	b004      	add	sp, #16
 800b276:	4770      	bx	lr
 800b278:	2000004c 	.word	0x2000004c

0800b27c <_puts_r>:
 800b27c:	b570      	push	{r4, r5, r6, lr}
 800b27e:	460e      	mov	r6, r1
 800b280:	4605      	mov	r5, r0
 800b282:	b118      	cbz	r0, 800b28c <_puts_r+0x10>
 800b284:	6983      	ldr	r3, [r0, #24]
 800b286:	b90b      	cbnz	r3, 800b28c <_puts_r+0x10>
 800b288:	f001 ff7e 	bl	800d188 <__sinit>
 800b28c:	69ab      	ldr	r3, [r5, #24]
 800b28e:	68ac      	ldr	r4, [r5, #8]
 800b290:	b913      	cbnz	r3, 800b298 <_puts_r+0x1c>
 800b292:	4628      	mov	r0, r5
 800b294:	f001 ff78 	bl	800d188 <__sinit>
 800b298:	4b2c      	ldr	r3, [pc, #176]	; (800b34c <_puts_r+0xd0>)
 800b29a:	429c      	cmp	r4, r3
 800b29c:	d120      	bne.n	800b2e0 <_puts_r+0x64>
 800b29e:	686c      	ldr	r4, [r5, #4]
 800b2a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2a2:	07db      	lsls	r3, r3, #31
 800b2a4:	d405      	bmi.n	800b2b2 <_puts_r+0x36>
 800b2a6:	89a3      	ldrh	r3, [r4, #12]
 800b2a8:	0598      	lsls	r0, r3, #22
 800b2aa:	d402      	bmi.n	800b2b2 <_puts_r+0x36>
 800b2ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2ae:	f002 fb7c 	bl	800d9aa <__retarget_lock_acquire_recursive>
 800b2b2:	89a3      	ldrh	r3, [r4, #12]
 800b2b4:	0719      	lsls	r1, r3, #28
 800b2b6:	d51d      	bpl.n	800b2f4 <_puts_r+0x78>
 800b2b8:	6923      	ldr	r3, [r4, #16]
 800b2ba:	b1db      	cbz	r3, 800b2f4 <_puts_r+0x78>
 800b2bc:	3e01      	subs	r6, #1
 800b2be:	68a3      	ldr	r3, [r4, #8]
 800b2c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	60a3      	str	r3, [r4, #8]
 800b2c8:	bb39      	cbnz	r1, 800b31a <_puts_r+0x9e>
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	da38      	bge.n	800b340 <_puts_r+0xc4>
 800b2ce:	4622      	mov	r2, r4
 800b2d0:	210a      	movs	r1, #10
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	f000 ff02 	bl	800c0dc <__swbuf_r>
 800b2d8:	3001      	adds	r0, #1
 800b2da:	d011      	beq.n	800b300 <_puts_r+0x84>
 800b2dc:	250a      	movs	r5, #10
 800b2de:	e011      	b.n	800b304 <_puts_r+0x88>
 800b2e0:	4b1b      	ldr	r3, [pc, #108]	; (800b350 <_puts_r+0xd4>)
 800b2e2:	429c      	cmp	r4, r3
 800b2e4:	d101      	bne.n	800b2ea <_puts_r+0x6e>
 800b2e6:	68ac      	ldr	r4, [r5, #8]
 800b2e8:	e7da      	b.n	800b2a0 <_puts_r+0x24>
 800b2ea:	4b1a      	ldr	r3, [pc, #104]	; (800b354 <_puts_r+0xd8>)
 800b2ec:	429c      	cmp	r4, r3
 800b2ee:	bf08      	it	eq
 800b2f0:	68ec      	ldreq	r4, [r5, #12]
 800b2f2:	e7d5      	b.n	800b2a0 <_puts_r+0x24>
 800b2f4:	4621      	mov	r1, r4
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	f000 ff42 	bl	800c180 <__swsetup_r>
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	d0dd      	beq.n	800b2bc <_puts_r+0x40>
 800b300:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b304:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b306:	07da      	lsls	r2, r3, #31
 800b308:	d405      	bmi.n	800b316 <_puts_r+0x9a>
 800b30a:	89a3      	ldrh	r3, [r4, #12]
 800b30c:	059b      	lsls	r3, r3, #22
 800b30e:	d402      	bmi.n	800b316 <_puts_r+0x9a>
 800b310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b312:	f002 fb4b 	bl	800d9ac <__retarget_lock_release_recursive>
 800b316:	4628      	mov	r0, r5
 800b318:	bd70      	pop	{r4, r5, r6, pc}
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	da04      	bge.n	800b328 <_puts_r+0xac>
 800b31e:	69a2      	ldr	r2, [r4, #24]
 800b320:	429a      	cmp	r2, r3
 800b322:	dc06      	bgt.n	800b332 <_puts_r+0xb6>
 800b324:	290a      	cmp	r1, #10
 800b326:	d004      	beq.n	800b332 <_puts_r+0xb6>
 800b328:	6823      	ldr	r3, [r4, #0]
 800b32a:	1c5a      	adds	r2, r3, #1
 800b32c:	6022      	str	r2, [r4, #0]
 800b32e:	7019      	strb	r1, [r3, #0]
 800b330:	e7c5      	b.n	800b2be <_puts_r+0x42>
 800b332:	4622      	mov	r2, r4
 800b334:	4628      	mov	r0, r5
 800b336:	f000 fed1 	bl	800c0dc <__swbuf_r>
 800b33a:	3001      	adds	r0, #1
 800b33c:	d1bf      	bne.n	800b2be <_puts_r+0x42>
 800b33e:	e7df      	b.n	800b300 <_puts_r+0x84>
 800b340:	6823      	ldr	r3, [r4, #0]
 800b342:	250a      	movs	r5, #10
 800b344:	1c5a      	adds	r2, r3, #1
 800b346:	6022      	str	r2, [r4, #0]
 800b348:	701d      	strb	r5, [r3, #0]
 800b34a:	e7db      	b.n	800b304 <_puts_r+0x88>
 800b34c:	080113ac 	.word	0x080113ac
 800b350:	080113cc 	.word	0x080113cc
 800b354:	0801138c 	.word	0x0801138c

0800b358 <puts>:
 800b358:	4b02      	ldr	r3, [pc, #8]	; (800b364 <puts+0xc>)
 800b35a:	4601      	mov	r1, r0
 800b35c:	6818      	ldr	r0, [r3, #0]
 800b35e:	f7ff bf8d 	b.w	800b27c <_puts_r>
 800b362:	bf00      	nop
 800b364:	2000004c 	.word	0x2000004c

0800b368 <sulp>:
 800b368:	b570      	push	{r4, r5, r6, lr}
 800b36a:	4604      	mov	r4, r0
 800b36c:	460d      	mov	r5, r1
 800b36e:	ec45 4b10 	vmov	d0, r4, r5
 800b372:	4616      	mov	r6, r2
 800b374:	f002 ff0c 	bl	800e190 <__ulp>
 800b378:	ec51 0b10 	vmov	r0, r1, d0
 800b37c:	b17e      	cbz	r6, 800b39e <sulp+0x36>
 800b37e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b382:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b386:	2b00      	cmp	r3, #0
 800b388:	dd09      	ble.n	800b39e <sulp+0x36>
 800b38a:	051b      	lsls	r3, r3, #20
 800b38c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b390:	2400      	movs	r4, #0
 800b392:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b396:	4622      	mov	r2, r4
 800b398:	462b      	mov	r3, r5
 800b39a:	f7f5 f94d 	bl	8000638 <__aeabi_dmul>
 800b39e:	bd70      	pop	{r4, r5, r6, pc}

0800b3a0 <_strtod_l>:
 800b3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a4:	ed2d 8b02 	vpush	{d8}
 800b3a8:	b09d      	sub	sp, #116	; 0x74
 800b3aa:	461f      	mov	r7, r3
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	9318      	str	r3, [sp, #96]	; 0x60
 800b3b0:	4ba2      	ldr	r3, [pc, #648]	; (800b63c <_strtod_l+0x29c>)
 800b3b2:	9213      	str	r2, [sp, #76]	; 0x4c
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	9305      	str	r3, [sp, #20]
 800b3b8:	4604      	mov	r4, r0
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	4688      	mov	r8, r1
 800b3be:	f7f4 ff27 	bl	8000210 <strlen>
 800b3c2:	f04f 0a00 	mov.w	sl, #0
 800b3c6:	4605      	mov	r5, r0
 800b3c8:	f04f 0b00 	mov.w	fp, #0
 800b3cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b3d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b3d2:	781a      	ldrb	r2, [r3, #0]
 800b3d4:	2a2b      	cmp	r2, #43	; 0x2b
 800b3d6:	d04e      	beq.n	800b476 <_strtod_l+0xd6>
 800b3d8:	d83b      	bhi.n	800b452 <_strtod_l+0xb2>
 800b3da:	2a0d      	cmp	r2, #13
 800b3dc:	d834      	bhi.n	800b448 <_strtod_l+0xa8>
 800b3de:	2a08      	cmp	r2, #8
 800b3e0:	d834      	bhi.n	800b44c <_strtod_l+0xac>
 800b3e2:	2a00      	cmp	r2, #0
 800b3e4:	d03e      	beq.n	800b464 <_strtod_l+0xc4>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	930a      	str	r3, [sp, #40]	; 0x28
 800b3ea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b3ec:	7833      	ldrb	r3, [r6, #0]
 800b3ee:	2b30      	cmp	r3, #48	; 0x30
 800b3f0:	f040 80b0 	bne.w	800b554 <_strtod_l+0x1b4>
 800b3f4:	7873      	ldrb	r3, [r6, #1]
 800b3f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b3fa:	2b58      	cmp	r3, #88	; 0x58
 800b3fc:	d168      	bne.n	800b4d0 <_strtod_l+0x130>
 800b3fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b400:	9301      	str	r3, [sp, #4]
 800b402:	ab18      	add	r3, sp, #96	; 0x60
 800b404:	9702      	str	r7, [sp, #8]
 800b406:	9300      	str	r3, [sp, #0]
 800b408:	4a8d      	ldr	r2, [pc, #564]	; (800b640 <_strtod_l+0x2a0>)
 800b40a:	ab19      	add	r3, sp, #100	; 0x64
 800b40c:	a917      	add	r1, sp, #92	; 0x5c
 800b40e:	4620      	mov	r0, r4
 800b410:	f001 ffbe 	bl	800d390 <__gethex>
 800b414:	f010 0707 	ands.w	r7, r0, #7
 800b418:	4605      	mov	r5, r0
 800b41a:	d005      	beq.n	800b428 <_strtod_l+0x88>
 800b41c:	2f06      	cmp	r7, #6
 800b41e:	d12c      	bne.n	800b47a <_strtod_l+0xda>
 800b420:	3601      	adds	r6, #1
 800b422:	2300      	movs	r3, #0
 800b424:	9617      	str	r6, [sp, #92]	; 0x5c
 800b426:	930a      	str	r3, [sp, #40]	; 0x28
 800b428:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	f040 8590 	bne.w	800bf50 <_strtod_l+0xbb0>
 800b430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b432:	b1eb      	cbz	r3, 800b470 <_strtod_l+0xd0>
 800b434:	4652      	mov	r2, sl
 800b436:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b43a:	ec43 2b10 	vmov	d0, r2, r3
 800b43e:	b01d      	add	sp, #116	; 0x74
 800b440:	ecbd 8b02 	vpop	{d8}
 800b444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b448:	2a20      	cmp	r2, #32
 800b44a:	d1cc      	bne.n	800b3e6 <_strtod_l+0x46>
 800b44c:	3301      	adds	r3, #1
 800b44e:	9317      	str	r3, [sp, #92]	; 0x5c
 800b450:	e7be      	b.n	800b3d0 <_strtod_l+0x30>
 800b452:	2a2d      	cmp	r2, #45	; 0x2d
 800b454:	d1c7      	bne.n	800b3e6 <_strtod_l+0x46>
 800b456:	2201      	movs	r2, #1
 800b458:	920a      	str	r2, [sp, #40]	; 0x28
 800b45a:	1c5a      	adds	r2, r3, #1
 800b45c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b45e:	785b      	ldrb	r3, [r3, #1]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1c2      	bne.n	800b3ea <_strtod_l+0x4a>
 800b464:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b466:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	f040 856e 	bne.w	800bf4c <_strtod_l+0xbac>
 800b470:	4652      	mov	r2, sl
 800b472:	465b      	mov	r3, fp
 800b474:	e7e1      	b.n	800b43a <_strtod_l+0x9a>
 800b476:	2200      	movs	r2, #0
 800b478:	e7ee      	b.n	800b458 <_strtod_l+0xb8>
 800b47a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b47c:	b13a      	cbz	r2, 800b48e <_strtod_l+0xee>
 800b47e:	2135      	movs	r1, #53	; 0x35
 800b480:	a81a      	add	r0, sp, #104	; 0x68
 800b482:	f002 ff90 	bl	800e3a6 <__copybits>
 800b486:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b488:	4620      	mov	r0, r4
 800b48a:	f002 fb4f 	bl	800db2c <_Bfree>
 800b48e:	3f01      	subs	r7, #1
 800b490:	2f04      	cmp	r7, #4
 800b492:	d806      	bhi.n	800b4a2 <_strtod_l+0x102>
 800b494:	e8df f007 	tbb	[pc, r7]
 800b498:	1714030a 	.word	0x1714030a
 800b49c:	0a          	.byte	0x0a
 800b49d:	00          	.byte	0x00
 800b49e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b4a2:	0728      	lsls	r0, r5, #28
 800b4a4:	d5c0      	bpl.n	800b428 <_strtod_l+0x88>
 800b4a6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b4aa:	e7bd      	b.n	800b428 <_strtod_l+0x88>
 800b4ac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b4b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b4b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b4b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b4ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b4be:	e7f0      	b.n	800b4a2 <_strtod_l+0x102>
 800b4c0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b644 <_strtod_l+0x2a4>
 800b4c4:	e7ed      	b.n	800b4a2 <_strtod_l+0x102>
 800b4c6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b4ca:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b4ce:	e7e8      	b.n	800b4a2 <_strtod_l+0x102>
 800b4d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b4d2:	1c5a      	adds	r2, r3, #1
 800b4d4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b4d6:	785b      	ldrb	r3, [r3, #1]
 800b4d8:	2b30      	cmp	r3, #48	; 0x30
 800b4da:	d0f9      	beq.n	800b4d0 <_strtod_l+0x130>
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d0a3      	beq.n	800b428 <_strtod_l+0x88>
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	f04f 0900 	mov.w	r9, #0
 800b4e6:	9304      	str	r3, [sp, #16]
 800b4e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b4ea:	9308      	str	r3, [sp, #32]
 800b4ec:	f8cd 901c 	str.w	r9, [sp, #28]
 800b4f0:	464f      	mov	r7, r9
 800b4f2:	220a      	movs	r2, #10
 800b4f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b4f6:	7806      	ldrb	r6, [r0, #0]
 800b4f8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b4fc:	b2d9      	uxtb	r1, r3
 800b4fe:	2909      	cmp	r1, #9
 800b500:	d92a      	bls.n	800b558 <_strtod_l+0x1b8>
 800b502:	9905      	ldr	r1, [sp, #20]
 800b504:	462a      	mov	r2, r5
 800b506:	f003 fa3e 	bl	800e986 <strncmp>
 800b50a:	b398      	cbz	r0, 800b574 <_strtod_l+0x1d4>
 800b50c:	2000      	movs	r0, #0
 800b50e:	4632      	mov	r2, r6
 800b510:	463d      	mov	r5, r7
 800b512:	9005      	str	r0, [sp, #20]
 800b514:	4603      	mov	r3, r0
 800b516:	2a65      	cmp	r2, #101	; 0x65
 800b518:	d001      	beq.n	800b51e <_strtod_l+0x17e>
 800b51a:	2a45      	cmp	r2, #69	; 0x45
 800b51c:	d118      	bne.n	800b550 <_strtod_l+0x1b0>
 800b51e:	b91d      	cbnz	r5, 800b528 <_strtod_l+0x188>
 800b520:	9a04      	ldr	r2, [sp, #16]
 800b522:	4302      	orrs	r2, r0
 800b524:	d09e      	beq.n	800b464 <_strtod_l+0xc4>
 800b526:	2500      	movs	r5, #0
 800b528:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b52c:	f108 0201 	add.w	r2, r8, #1
 800b530:	9217      	str	r2, [sp, #92]	; 0x5c
 800b532:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b536:	2a2b      	cmp	r2, #43	; 0x2b
 800b538:	d075      	beq.n	800b626 <_strtod_l+0x286>
 800b53a:	2a2d      	cmp	r2, #45	; 0x2d
 800b53c:	d07b      	beq.n	800b636 <_strtod_l+0x296>
 800b53e:	f04f 0c00 	mov.w	ip, #0
 800b542:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b546:	2909      	cmp	r1, #9
 800b548:	f240 8082 	bls.w	800b650 <_strtod_l+0x2b0>
 800b54c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b550:	2600      	movs	r6, #0
 800b552:	e09d      	b.n	800b690 <_strtod_l+0x2f0>
 800b554:	2300      	movs	r3, #0
 800b556:	e7c4      	b.n	800b4e2 <_strtod_l+0x142>
 800b558:	2f08      	cmp	r7, #8
 800b55a:	bfd8      	it	le
 800b55c:	9907      	ldrle	r1, [sp, #28]
 800b55e:	f100 0001 	add.w	r0, r0, #1
 800b562:	bfda      	itte	le
 800b564:	fb02 3301 	mlale	r3, r2, r1, r3
 800b568:	9307      	strle	r3, [sp, #28]
 800b56a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b56e:	3701      	adds	r7, #1
 800b570:	9017      	str	r0, [sp, #92]	; 0x5c
 800b572:	e7bf      	b.n	800b4f4 <_strtod_l+0x154>
 800b574:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b576:	195a      	adds	r2, r3, r5
 800b578:	9217      	str	r2, [sp, #92]	; 0x5c
 800b57a:	5d5a      	ldrb	r2, [r3, r5]
 800b57c:	2f00      	cmp	r7, #0
 800b57e:	d037      	beq.n	800b5f0 <_strtod_l+0x250>
 800b580:	9005      	str	r0, [sp, #20]
 800b582:	463d      	mov	r5, r7
 800b584:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b588:	2b09      	cmp	r3, #9
 800b58a:	d912      	bls.n	800b5b2 <_strtod_l+0x212>
 800b58c:	2301      	movs	r3, #1
 800b58e:	e7c2      	b.n	800b516 <_strtod_l+0x176>
 800b590:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b592:	1c5a      	adds	r2, r3, #1
 800b594:	9217      	str	r2, [sp, #92]	; 0x5c
 800b596:	785a      	ldrb	r2, [r3, #1]
 800b598:	3001      	adds	r0, #1
 800b59a:	2a30      	cmp	r2, #48	; 0x30
 800b59c:	d0f8      	beq.n	800b590 <_strtod_l+0x1f0>
 800b59e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b5a2:	2b08      	cmp	r3, #8
 800b5a4:	f200 84d9 	bhi.w	800bf5a <_strtod_l+0xbba>
 800b5a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b5aa:	9005      	str	r0, [sp, #20]
 800b5ac:	2000      	movs	r0, #0
 800b5ae:	9308      	str	r3, [sp, #32]
 800b5b0:	4605      	mov	r5, r0
 800b5b2:	3a30      	subs	r2, #48	; 0x30
 800b5b4:	f100 0301 	add.w	r3, r0, #1
 800b5b8:	d014      	beq.n	800b5e4 <_strtod_l+0x244>
 800b5ba:	9905      	ldr	r1, [sp, #20]
 800b5bc:	4419      	add	r1, r3
 800b5be:	9105      	str	r1, [sp, #20]
 800b5c0:	462b      	mov	r3, r5
 800b5c2:	eb00 0e05 	add.w	lr, r0, r5
 800b5c6:	210a      	movs	r1, #10
 800b5c8:	4573      	cmp	r3, lr
 800b5ca:	d113      	bne.n	800b5f4 <_strtod_l+0x254>
 800b5cc:	182b      	adds	r3, r5, r0
 800b5ce:	2b08      	cmp	r3, #8
 800b5d0:	f105 0501 	add.w	r5, r5, #1
 800b5d4:	4405      	add	r5, r0
 800b5d6:	dc1c      	bgt.n	800b612 <_strtod_l+0x272>
 800b5d8:	9907      	ldr	r1, [sp, #28]
 800b5da:	230a      	movs	r3, #10
 800b5dc:	fb03 2301 	mla	r3, r3, r1, r2
 800b5e0:	9307      	str	r3, [sp, #28]
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b5e6:	1c51      	adds	r1, r2, #1
 800b5e8:	9117      	str	r1, [sp, #92]	; 0x5c
 800b5ea:	7852      	ldrb	r2, [r2, #1]
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	e7c9      	b.n	800b584 <_strtod_l+0x1e4>
 800b5f0:	4638      	mov	r0, r7
 800b5f2:	e7d2      	b.n	800b59a <_strtod_l+0x1fa>
 800b5f4:	2b08      	cmp	r3, #8
 800b5f6:	dc04      	bgt.n	800b602 <_strtod_l+0x262>
 800b5f8:	9e07      	ldr	r6, [sp, #28]
 800b5fa:	434e      	muls	r6, r1
 800b5fc:	9607      	str	r6, [sp, #28]
 800b5fe:	3301      	adds	r3, #1
 800b600:	e7e2      	b.n	800b5c8 <_strtod_l+0x228>
 800b602:	f103 0c01 	add.w	ip, r3, #1
 800b606:	f1bc 0f10 	cmp.w	ip, #16
 800b60a:	bfd8      	it	le
 800b60c:	fb01 f909 	mulle.w	r9, r1, r9
 800b610:	e7f5      	b.n	800b5fe <_strtod_l+0x25e>
 800b612:	2d10      	cmp	r5, #16
 800b614:	bfdc      	itt	le
 800b616:	230a      	movle	r3, #10
 800b618:	fb03 2909 	mlale	r9, r3, r9, r2
 800b61c:	e7e1      	b.n	800b5e2 <_strtod_l+0x242>
 800b61e:	2300      	movs	r3, #0
 800b620:	9305      	str	r3, [sp, #20]
 800b622:	2301      	movs	r3, #1
 800b624:	e77c      	b.n	800b520 <_strtod_l+0x180>
 800b626:	f04f 0c00 	mov.w	ip, #0
 800b62a:	f108 0202 	add.w	r2, r8, #2
 800b62e:	9217      	str	r2, [sp, #92]	; 0x5c
 800b630:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b634:	e785      	b.n	800b542 <_strtod_l+0x1a2>
 800b636:	f04f 0c01 	mov.w	ip, #1
 800b63a:	e7f6      	b.n	800b62a <_strtod_l+0x28a>
 800b63c:	08011454 	.word	0x08011454
 800b640:	080111a4 	.word	0x080111a4
 800b644:	7ff00000 	.word	0x7ff00000
 800b648:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b64a:	1c51      	adds	r1, r2, #1
 800b64c:	9117      	str	r1, [sp, #92]	; 0x5c
 800b64e:	7852      	ldrb	r2, [r2, #1]
 800b650:	2a30      	cmp	r2, #48	; 0x30
 800b652:	d0f9      	beq.n	800b648 <_strtod_l+0x2a8>
 800b654:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b658:	2908      	cmp	r1, #8
 800b65a:	f63f af79 	bhi.w	800b550 <_strtod_l+0x1b0>
 800b65e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b662:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b664:	9206      	str	r2, [sp, #24]
 800b666:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b668:	1c51      	adds	r1, r2, #1
 800b66a:	9117      	str	r1, [sp, #92]	; 0x5c
 800b66c:	7852      	ldrb	r2, [r2, #1]
 800b66e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b672:	2e09      	cmp	r6, #9
 800b674:	d937      	bls.n	800b6e6 <_strtod_l+0x346>
 800b676:	9e06      	ldr	r6, [sp, #24]
 800b678:	1b89      	subs	r1, r1, r6
 800b67a:	2908      	cmp	r1, #8
 800b67c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b680:	dc02      	bgt.n	800b688 <_strtod_l+0x2e8>
 800b682:	4576      	cmp	r6, lr
 800b684:	bfa8      	it	ge
 800b686:	4676      	movge	r6, lr
 800b688:	f1bc 0f00 	cmp.w	ip, #0
 800b68c:	d000      	beq.n	800b690 <_strtod_l+0x2f0>
 800b68e:	4276      	negs	r6, r6
 800b690:	2d00      	cmp	r5, #0
 800b692:	d14d      	bne.n	800b730 <_strtod_l+0x390>
 800b694:	9904      	ldr	r1, [sp, #16]
 800b696:	4301      	orrs	r1, r0
 800b698:	f47f aec6 	bne.w	800b428 <_strtod_l+0x88>
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f47f aee1 	bne.w	800b464 <_strtod_l+0xc4>
 800b6a2:	2a69      	cmp	r2, #105	; 0x69
 800b6a4:	d027      	beq.n	800b6f6 <_strtod_l+0x356>
 800b6a6:	dc24      	bgt.n	800b6f2 <_strtod_l+0x352>
 800b6a8:	2a49      	cmp	r2, #73	; 0x49
 800b6aa:	d024      	beq.n	800b6f6 <_strtod_l+0x356>
 800b6ac:	2a4e      	cmp	r2, #78	; 0x4e
 800b6ae:	f47f aed9 	bne.w	800b464 <_strtod_l+0xc4>
 800b6b2:	499f      	ldr	r1, [pc, #636]	; (800b930 <_strtod_l+0x590>)
 800b6b4:	a817      	add	r0, sp, #92	; 0x5c
 800b6b6:	f002 f8c3 	bl	800d840 <__match>
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	f43f aed2 	beq.w	800b464 <_strtod_l+0xc4>
 800b6c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	2b28      	cmp	r3, #40	; 0x28
 800b6c6:	d12d      	bne.n	800b724 <_strtod_l+0x384>
 800b6c8:	499a      	ldr	r1, [pc, #616]	; (800b934 <_strtod_l+0x594>)
 800b6ca:	aa1a      	add	r2, sp, #104	; 0x68
 800b6cc:	a817      	add	r0, sp, #92	; 0x5c
 800b6ce:	f002 f8cb 	bl	800d868 <__hexnan>
 800b6d2:	2805      	cmp	r0, #5
 800b6d4:	d126      	bne.n	800b724 <_strtod_l+0x384>
 800b6d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b6d8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b6dc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b6e0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b6e4:	e6a0      	b.n	800b428 <_strtod_l+0x88>
 800b6e6:	210a      	movs	r1, #10
 800b6e8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b6ec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b6f0:	e7b9      	b.n	800b666 <_strtod_l+0x2c6>
 800b6f2:	2a6e      	cmp	r2, #110	; 0x6e
 800b6f4:	e7db      	b.n	800b6ae <_strtod_l+0x30e>
 800b6f6:	4990      	ldr	r1, [pc, #576]	; (800b938 <_strtod_l+0x598>)
 800b6f8:	a817      	add	r0, sp, #92	; 0x5c
 800b6fa:	f002 f8a1 	bl	800d840 <__match>
 800b6fe:	2800      	cmp	r0, #0
 800b700:	f43f aeb0 	beq.w	800b464 <_strtod_l+0xc4>
 800b704:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b706:	498d      	ldr	r1, [pc, #564]	; (800b93c <_strtod_l+0x59c>)
 800b708:	3b01      	subs	r3, #1
 800b70a:	a817      	add	r0, sp, #92	; 0x5c
 800b70c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b70e:	f002 f897 	bl	800d840 <__match>
 800b712:	b910      	cbnz	r0, 800b71a <_strtod_l+0x37a>
 800b714:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b716:	3301      	adds	r3, #1
 800b718:	9317      	str	r3, [sp, #92]	; 0x5c
 800b71a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b94c <_strtod_l+0x5ac>
 800b71e:	f04f 0a00 	mov.w	sl, #0
 800b722:	e681      	b.n	800b428 <_strtod_l+0x88>
 800b724:	4886      	ldr	r0, [pc, #536]	; (800b940 <_strtod_l+0x5a0>)
 800b726:	f003 f8d3 	bl	800e8d0 <nan>
 800b72a:	ec5b ab10 	vmov	sl, fp, d0
 800b72e:	e67b      	b.n	800b428 <_strtod_l+0x88>
 800b730:	9b05      	ldr	r3, [sp, #20]
 800b732:	9807      	ldr	r0, [sp, #28]
 800b734:	1af3      	subs	r3, r6, r3
 800b736:	2f00      	cmp	r7, #0
 800b738:	bf08      	it	eq
 800b73a:	462f      	moveq	r7, r5
 800b73c:	2d10      	cmp	r5, #16
 800b73e:	9306      	str	r3, [sp, #24]
 800b740:	46a8      	mov	r8, r5
 800b742:	bfa8      	it	ge
 800b744:	f04f 0810 	movge.w	r8, #16
 800b748:	f7f4 fefc 	bl	8000544 <__aeabi_ui2d>
 800b74c:	2d09      	cmp	r5, #9
 800b74e:	4682      	mov	sl, r0
 800b750:	468b      	mov	fp, r1
 800b752:	dd13      	ble.n	800b77c <_strtod_l+0x3dc>
 800b754:	4b7b      	ldr	r3, [pc, #492]	; (800b944 <_strtod_l+0x5a4>)
 800b756:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b75a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b75e:	f7f4 ff6b 	bl	8000638 <__aeabi_dmul>
 800b762:	4682      	mov	sl, r0
 800b764:	4648      	mov	r0, r9
 800b766:	468b      	mov	fp, r1
 800b768:	f7f4 feec 	bl	8000544 <__aeabi_ui2d>
 800b76c:	4602      	mov	r2, r0
 800b76e:	460b      	mov	r3, r1
 800b770:	4650      	mov	r0, sl
 800b772:	4659      	mov	r1, fp
 800b774:	f7f4 fdaa 	bl	80002cc <__adddf3>
 800b778:	4682      	mov	sl, r0
 800b77a:	468b      	mov	fp, r1
 800b77c:	2d0f      	cmp	r5, #15
 800b77e:	dc38      	bgt.n	800b7f2 <_strtod_l+0x452>
 800b780:	9b06      	ldr	r3, [sp, #24]
 800b782:	2b00      	cmp	r3, #0
 800b784:	f43f ae50 	beq.w	800b428 <_strtod_l+0x88>
 800b788:	dd24      	ble.n	800b7d4 <_strtod_l+0x434>
 800b78a:	2b16      	cmp	r3, #22
 800b78c:	dc0b      	bgt.n	800b7a6 <_strtod_l+0x406>
 800b78e:	496d      	ldr	r1, [pc, #436]	; (800b944 <_strtod_l+0x5a4>)
 800b790:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b794:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b798:	4652      	mov	r2, sl
 800b79a:	465b      	mov	r3, fp
 800b79c:	f7f4 ff4c 	bl	8000638 <__aeabi_dmul>
 800b7a0:	4682      	mov	sl, r0
 800b7a2:	468b      	mov	fp, r1
 800b7a4:	e640      	b.n	800b428 <_strtod_l+0x88>
 800b7a6:	9a06      	ldr	r2, [sp, #24]
 800b7a8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	db20      	blt.n	800b7f2 <_strtod_l+0x452>
 800b7b0:	4c64      	ldr	r4, [pc, #400]	; (800b944 <_strtod_l+0x5a4>)
 800b7b2:	f1c5 050f 	rsb	r5, r5, #15
 800b7b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b7ba:	4652      	mov	r2, sl
 800b7bc:	465b      	mov	r3, fp
 800b7be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7c2:	f7f4 ff39 	bl	8000638 <__aeabi_dmul>
 800b7c6:	9b06      	ldr	r3, [sp, #24]
 800b7c8:	1b5d      	subs	r5, r3, r5
 800b7ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b7ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b7d2:	e7e3      	b.n	800b79c <_strtod_l+0x3fc>
 800b7d4:	9b06      	ldr	r3, [sp, #24]
 800b7d6:	3316      	adds	r3, #22
 800b7d8:	db0b      	blt.n	800b7f2 <_strtod_l+0x452>
 800b7da:	9b05      	ldr	r3, [sp, #20]
 800b7dc:	1b9e      	subs	r6, r3, r6
 800b7de:	4b59      	ldr	r3, [pc, #356]	; (800b944 <_strtod_l+0x5a4>)
 800b7e0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b7e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b7e8:	4650      	mov	r0, sl
 800b7ea:	4659      	mov	r1, fp
 800b7ec:	f7f5 f84e 	bl	800088c <__aeabi_ddiv>
 800b7f0:	e7d6      	b.n	800b7a0 <_strtod_l+0x400>
 800b7f2:	9b06      	ldr	r3, [sp, #24]
 800b7f4:	eba5 0808 	sub.w	r8, r5, r8
 800b7f8:	4498      	add	r8, r3
 800b7fa:	f1b8 0f00 	cmp.w	r8, #0
 800b7fe:	dd74      	ble.n	800b8ea <_strtod_l+0x54a>
 800b800:	f018 030f 	ands.w	r3, r8, #15
 800b804:	d00a      	beq.n	800b81c <_strtod_l+0x47c>
 800b806:	494f      	ldr	r1, [pc, #316]	; (800b944 <_strtod_l+0x5a4>)
 800b808:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b80c:	4652      	mov	r2, sl
 800b80e:	465b      	mov	r3, fp
 800b810:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b814:	f7f4 ff10 	bl	8000638 <__aeabi_dmul>
 800b818:	4682      	mov	sl, r0
 800b81a:	468b      	mov	fp, r1
 800b81c:	f038 080f 	bics.w	r8, r8, #15
 800b820:	d04f      	beq.n	800b8c2 <_strtod_l+0x522>
 800b822:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b826:	dd22      	ble.n	800b86e <_strtod_l+0x4ce>
 800b828:	2500      	movs	r5, #0
 800b82a:	462e      	mov	r6, r5
 800b82c:	9507      	str	r5, [sp, #28]
 800b82e:	9505      	str	r5, [sp, #20]
 800b830:	2322      	movs	r3, #34	; 0x22
 800b832:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b94c <_strtod_l+0x5ac>
 800b836:	6023      	str	r3, [r4, #0]
 800b838:	f04f 0a00 	mov.w	sl, #0
 800b83c:	9b07      	ldr	r3, [sp, #28]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	f43f adf2 	beq.w	800b428 <_strtod_l+0x88>
 800b844:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b846:	4620      	mov	r0, r4
 800b848:	f002 f970 	bl	800db2c <_Bfree>
 800b84c:	9905      	ldr	r1, [sp, #20]
 800b84e:	4620      	mov	r0, r4
 800b850:	f002 f96c 	bl	800db2c <_Bfree>
 800b854:	4631      	mov	r1, r6
 800b856:	4620      	mov	r0, r4
 800b858:	f002 f968 	bl	800db2c <_Bfree>
 800b85c:	9907      	ldr	r1, [sp, #28]
 800b85e:	4620      	mov	r0, r4
 800b860:	f002 f964 	bl	800db2c <_Bfree>
 800b864:	4629      	mov	r1, r5
 800b866:	4620      	mov	r0, r4
 800b868:	f002 f960 	bl	800db2c <_Bfree>
 800b86c:	e5dc      	b.n	800b428 <_strtod_l+0x88>
 800b86e:	4b36      	ldr	r3, [pc, #216]	; (800b948 <_strtod_l+0x5a8>)
 800b870:	9304      	str	r3, [sp, #16]
 800b872:	2300      	movs	r3, #0
 800b874:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b878:	4650      	mov	r0, sl
 800b87a:	4659      	mov	r1, fp
 800b87c:	4699      	mov	r9, r3
 800b87e:	f1b8 0f01 	cmp.w	r8, #1
 800b882:	dc21      	bgt.n	800b8c8 <_strtod_l+0x528>
 800b884:	b10b      	cbz	r3, 800b88a <_strtod_l+0x4ea>
 800b886:	4682      	mov	sl, r0
 800b888:	468b      	mov	fp, r1
 800b88a:	4b2f      	ldr	r3, [pc, #188]	; (800b948 <_strtod_l+0x5a8>)
 800b88c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b890:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b894:	4652      	mov	r2, sl
 800b896:	465b      	mov	r3, fp
 800b898:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b89c:	f7f4 fecc 	bl	8000638 <__aeabi_dmul>
 800b8a0:	4b2a      	ldr	r3, [pc, #168]	; (800b94c <_strtod_l+0x5ac>)
 800b8a2:	460a      	mov	r2, r1
 800b8a4:	400b      	ands	r3, r1
 800b8a6:	492a      	ldr	r1, [pc, #168]	; (800b950 <_strtod_l+0x5b0>)
 800b8a8:	428b      	cmp	r3, r1
 800b8aa:	4682      	mov	sl, r0
 800b8ac:	d8bc      	bhi.n	800b828 <_strtod_l+0x488>
 800b8ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b8b2:	428b      	cmp	r3, r1
 800b8b4:	bf86      	itte	hi
 800b8b6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b954 <_strtod_l+0x5b4>
 800b8ba:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800b8be:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	9304      	str	r3, [sp, #16]
 800b8c6:	e084      	b.n	800b9d2 <_strtod_l+0x632>
 800b8c8:	f018 0f01 	tst.w	r8, #1
 800b8cc:	d005      	beq.n	800b8da <_strtod_l+0x53a>
 800b8ce:	9b04      	ldr	r3, [sp, #16]
 800b8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d4:	f7f4 feb0 	bl	8000638 <__aeabi_dmul>
 800b8d8:	2301      	movs	r3, #1
 800b8da:	9a04      	ldr	r2, [sp, #16]
 800b8dc:	3208      	adds	r2, #8
 800b8de:	f109 0901 	add.w	r9, r9, #1
 800b8e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b8e6:	9204      	str	r2, [sp, #16]
 800b8e8:	e7c9      	b.n	800b87e <_strtod_l+0x4de>
 800b8ea:	d0ea      	beq.n	800b8c2 <_strtod_l+0x522>
 800b8ec:	f1c8 0800 	rsb	r8, r8, #0
 800b8f0:	f018 020f 	ands.w	r2, r8, #15
 800b8f4:	d00a      	beq.n	800b90c <_strtod_l+0x56c>
 800b8f6:	4b13      	ldr	r3, [pc, #76]	; (800b944 <_strtod_l+0x5a4>)
 800b8f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8fc:	4650      	mov	r0, sl
 800b8fe:	4659      	mov	r1, fp
 800b900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b904:	f7f4 ffc2 	bl	800088c <__aeabi_ddiv>
 800b908:	4682      	mov	sl, r0
 800b90a:	468b      	mov	fp, r1
 800b90c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b910:	d0d7      	beq.n	800b8c2 <_strtod_l+0x522>
 800b912:	f1b8 0f1f 	cmp.w	r8, #31
 800b916:	dd1f      	ble.n	800b958 <_strtod_l+0x5b8>
 800b918:	2500      	movs	r5, #0
 800b91a:	462e      	mov	r6, r5
 800b91c:	9507      	str	r5, [sp, #28]
 800b91e:	9505      	str	r5, [sp, #20]
 800b920:	2322      	movs	r3, #34	; 0x22
 800b922:	f04f 0a00 	mov.w	sl, #0
 800b926:	f04f 0b00 	mov.w	fp, #0
 800b92a:	6023      	str	r3, [r4, #0]
 800b92c:	e786      	b.n	800b83c <_strtod_l+0x49c>
 800b92e:	bf00      	nop
 800b930:	0801117d 	.word	0x0801117d
 800b934:	080111b8 	.word	0x080111b8
 800b938:	08011175 	.word	0x08011175
 800b93c:	080112fc 	.word	0x080112fc
 800b940:	08011610 	.word	0x08011610
 800b944:	080114f0 	.word	0x080114f0
 800b948:	080114c8 	.word	0x080114c8
 800b94c:	7ff00000 	.word	0x7ff00000
 800b950:	7ca00000 	.word	0x7ca00000
 800b954:	7fefffff 	.word	0x7fefffff
 800b958:	f018 0310 	ands.w	r3, r8, #16
 800b95c:	bf18      	it	ne
 800b95e:	236a      	movne	r3, #106	; 0x6a
 800b960:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800bd10 <_strtod_l+0x970>
 800b964:	9304      	str	r3, [sp, #16]
 800b966:	4650      	mov	r0, sl
 800b968:	4659      	mov	r1, fp
 800b96a:	2300      	movs	r3, #0
 800b96c:	f018 0f01 	tst.w	r8, #1
 800b970:	d004      	beq.n	800b97c <_strtod_l+0x5dc>
 800b972:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b976:	f7f4 fe5f 	bl	8000638 <__aeabi_dmul>
 800b97a:	2301      	movs	r3, #1
 800b97c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b980:	f109 0908 	add.w	r9, r9, #8
 800b984:	d1f2      	bne.n	800b96c <_strtod_l+0x5cc>
 800b986:	b10b      	cbz	r3, 800b98c <_strtod_l+0x5ec>
 800b988:	4682      	mov	sl, r0
 800b98a:	468b      	mov	fp, r1
 800b98c:	9b04      	ldr	r3, [sp, #16]
 800b98e:	b1c3      	cbz	r3, 800b9c2 <_strtod_l+0x622>
 800b990:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b994:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b998:	2b00      	cmp	r3, #0
 800b99a:	4659      	mov	r1, fp
 800b99c:	dd11      	ble.n	800b9c2 <_strtod_l+0x622>
 800b99e:	2b1f      	cmp	r3, #31
 800b9a0:	f340 8124 	ble.w	800bbec <_strtod_l+0x84c>
 800b9a4:	2b34      	cmp	r3, #52	; 0x34
 800b9a6:	bfde      	ittt	le
 800b9a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b9ac:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800b9b0:	fa03 f202 	lslle.w	r2, r3, r2
 800b9b4:	f04f 0a00 	mov.w	sl, #0
 800b9b8:	bfcc      	ite	gt
 800b9ba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b9be:	ea02 0b01 	andle.w	fp, r2, r1
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	4650      	mov	r0, sl
 800b9c8:	4659      	mov	r1, fp
 800b9ca:	f7f5 f89d 	bl	8000b08 <__aeabi_dcmpeq>
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	d1a2      	bne.n	800b918 <_strtod_l+0x578>
 800b9d2:	9b07      	ldr	r3, [sp, #28]
 800b9d4:	9300      	str	r3, [sp, #0]
 800b9d6:	9908      	ldr	r1, [sp, #32]
 800b9d8:	462b      	mov	r3, r5
 800b9da:	463a      	mov	r2, r7
 800b9dc:	4620      	mov	r0, r4
 800b9de:	f002 f90d 	bl	800dbfc <__s2b>
 800b9e2:	9007      	str	r0, [sp, #28]
 800b9e4:	2800      	cmp	r0, #0
 800b9e6:	f43f af1f 	beq.w	800b828 <_strtod_l+0x488>
 800b9ea:	9b05      	ldr	r3, [sp, #20]
 800b9ec:	1b9e      	subs	r6, r3, r6
 800b9ee:	9b06      	ldr	r3, [sp, #24]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	bfb4      	ite	lt
 800b9f4:	4633      	movlt	r3, r6
 800b9f6:	2300      	movge	r3, #0
 800b9f8:	930c      	str	r3, [sp, #48]	; 0x30
 800b9fa:	9b06      	ldr	r3, [sp, #24]
 800b9fc:	2500      	movs	r5, #0
 800b9fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ba02:	9312      	str	r3, [sp, #72]	; 0x48
 800ba04:	462e      	mov	r6, r5
 800ba06:	9b07      	ldr	r3, [sp, #28]
 800ba08:	4620      	mov	r0, r4
 800ba0a:	6859      	ldr	r1, [r3, #4]
 800ba0c:	f002 f84e 	bl	800daac <_Balloc>
 800ba10:	9005      	str	r0, [sp, #20]
 800ba12:	2800      	cmp	r0, #0
 800ba14:	f43f af0c 	beq.w	800b830 <_strtod_l+0x490>
 800ba18:	9b07      	ldr	r3, [sp, #28]
 800ba1a:	691a      	ldr	r2, [r3, #16]
 800ba1c:	3202      	adds	r2, #2
 800ba1e:	f103 010c 	add.w	r1, r3, #12
 800ba22:	0092      	lsls	r2, r2, #2
 800ba24:	300c      	adds	r0, #12
 800ba26:	f7fe ff91 	bl	800a94c <memcpy>
 800ba2a:	ec4b ab10 	vmov	d0, sl, fp
 800ba2e:	aa1a      	add	r2, sp, #104	; 0x68
 800ba30:	a919      	add	r1, sp, #100	; 0x64
 800ba32:	4620      	mov	r0, r4
 800ba34:	f002 fc28 	bl	800e288 <__d2b>
 800ba38:	ec4b ab18 	vmov	d8, sl, fp
 800ba3c:	9018      	str	r0, [sp, #96]	; 0x60
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	f43f aef6 	beq.w	800b830 <_strtod_l+0x490>
 800ba44:	2101      	movs	r1, #1
 800ba46:	4620      	mov	r0, r4
 800ba48:	f002 f972 	bl	800dd30 <__i2b>
 800ba4c:	4606      	mov	r6, r0
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	f43f aeee 	beq.w	800b830 <_strtod_l+0x490>
 800ba54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ba56:	9904      	ldr	r1, [sp, #16]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	bfab      	itete	ge
 800ba5c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ba5e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ba60:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ba62:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ba66:	bfac      	ite	ge
 800ba68:	eb03 0902 	addge.w	r9, r3, r2
 800ba6c:	1ad7      	sublt	r7, r2, r3
 800ba6e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ba70:	eba3 0801 	sub.w	r8, r3, r1
 800ba74:	4490      	add	r8, r2
 800ba76:	4ba1      	ldr	r3, [pc, #644]	; (800bcfc <_strtod_l+0x95c>)
 800ba78:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ba7c:	4598      	cmp	r8, r3
 800ba7e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ba82:	f280 80c7 	bge.w	800bc14 <_strtod_l+0x874>
 800ba86:	eba3 0308 	sub.w	r3, r3, r8
 800ba8a:	2b1f      	cmp	r3, #31
 800ba8c:	eba2 0203 	sub.w	r2, r2, r3
 800ba90:	f04f 0101 	mov.w	r1, #1
 800ba94:	f300 80b1 	bgt.w	800bbfa <_strtod_l+0x85a>
 800ba98:	fa01 f303 	lsl.w	r3, r1, r3
 800ba9c:	930d      	str	r3, [sp, #52]	; 0x34
 800ba9e:	2300      	movs	r3, #0
 800baa0:	9308      	str	r3, [sp, #32]
 800baa2:	eb09 0802 	add.w	r8, r9, r2
 800baa6:	9b04      	ldr	r3, [sp, #16]
 800baa8:	45c1      	cmp	r9, r8
 800baaa:	4417      	add	r7, r2
 800baac:	441f      	add	r7, r3
 800baae:	464b      	mov	r3, r9
 800bab0:	bfa8      	it	ge
 800bab2:	4643      	movge	r3, r8
 800bab4:	42bb      	cmp	r3, r7
 800bab6:	bfa8      	it	ge
 800bab8:	463b      	movge	r3, r7
 800baba:	2b00      	cmp	r3, #0
 800babc:	bfc2      	ittt	gt
 800babe:	eba8 0803 	subgt.w	r8, r8, r3
 800bac2:	1aff      	subgt	r7, r7, r3
 800bac4:	eba9 0903 	subgt.w	r9, r9, r3
 800bac8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800baca:	2b00      	cmp	r3, #0
 800bacc:	dd17      	ble.n	800bafe <_strtod_l+0x75e>
 800bace:	4631      	mov	r1, r6
 800bad0:	461a      	mov	r2, r3
 800bad2:	4620      	mov	r0, r4
 800bad4:	f002 f9ec 	bl	800deb0 <__pow5mult>
 800bad8:	4606      	mov	r6, r0
 800bada:	2800      	cmp	r0, #0
 800badc:	f43f aea8 	beq.w	800b830 <_strtod_l+0x490>
 800bae0:	4601      	mov	r1, r0
 800bae2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bae4:	4620      	mov	r0, r4
 800bae6:	f002 f939 	bl	800dd5c <__multiply>
 800baea:	900b      	str	r0, [sp, #44]	; 0x2c
 800baec:	2800      	cmp	r0, #0
 800baee:	f43f ae9f 	beq.w	800b830 <_strtod_l+0x490>
 800baf2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800baf4:	4620      	mov	r0, r4
 800baf6:	f002 f819 	bl	800db2c <_Bfree>
 800bafa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bafc:	9318      	str	r3, [sp, #96]	; 0x60
 800bafe:	f1b8 0f00 	cmp.w	r8, #0
 800bb02:	f300 808c 	bgt.w	800bc1e <_strtod_l+0x87e>
 800bb06:	9b06      	ldr	r3, [sp, #24]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	dd08      	ble.n	800bb1e <_strtod_l+0x77e>
 800bb0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bb0e:	9905      	ldr	r1, [sp, #20]
 800bb10:	4620      	mov	r0, r4
 800bb12:	f002 f9cd 	bl	800deb0 <__pow5mult>
 800bb16:	9005      	str	r0, [sp, #20]
 800bb18:	2800      	cmp	r0, #0
 800bb1a:	f43f ae89 	beq.w	800b830 <_strtod_l+0x490>
 800bb1e:	2f00      	cmp	r7, #0
 800bb20:	dd08      	ble.n	800bb34 <_strtod_l+0x794>
 800bb22:	9905      	ldr	r1, [sp, #20]
 800bb24:	463a      	mov	r2, r7
 800bb26:	4620      	mov	r0, r4
 800bb28:	f002 fa1c 	bl	800df64 <__lshift>
 800bb2c:	9005      	str	r0, [sp, #20]
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	f43f ae7e 	beq.w	800b830 <_strtod_l+0x490>
 800bb34:	f1b9 0f00 	cmp.w	r9, #0
 800bb38:	dd08      	ble.n	800bb4c <_strtod_l+0x7ac>
 800bb3a:	4631      	mov	r1, r6
 800bb3c:	464a      	mov	r2, r9
 800bb3e:	4620      	mov	r0, r4
 800bb40:	f002 fa10 	bl	800df64 <__lshift>
 800bb44:	4606      	mov	r6, r0
 800bb46:	2800      	cmp	r0, #0
 800bb48:	f43f ae72 	beq.w	800b830 <_strtod_l+0x490>
 800bb4c:	9a05      	ldr	r2, [sp, #20]
 800bb4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bb50:	4620      	mov	r0, r4
 800bb52:	f002 fa93 	bl	800e07c <__mdiff>
 800bb56:	4605      	mov	r5, r0
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	f43f ae69 	beq.w	800b830 <_strtod_l+0x490>
 800bb5e:	68c3      	ldr	r3, [r0, #12]
 800bb60:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb62:	2300      	movs	r3, #0
 800bb64:	60c3      	str	r3, [r0, #12]
 800bb66:	4631      	mov	r1, r6
 800bb68:	f002 fa6c 	bl	800e044 <__mcmp>
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	da60      	bge.n	800bc32 <_strtod_l+0x892>
 800bb70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb72:	ea53 030a 	orrs.w	r3, r3, sl
 800bb76:	f040 8082 	bne.w	800bc7e <_strtod_l+0x8de>
 800bb7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d17d      	bne.n	800bc7e <_strtod_l+0x8de>
 800bb82:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bb86:	0d1b      	lsrs	r3, r3, #20
 800bb88:	051b      	lsls	r3, r3, #20
 800bb8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bb8e:	d976      	bls.n	800bc7e <_strtod_l+0x8de>
 800bb90:	696b      	ldr	r3, [r5, #20]
 800bb92:	b913      	cbnz	r3, 800bb9a <_strtod_l+0x7fa>
 800bb94:	692b      	ldr	r3, [r5, #16]
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	dd71      	ble.n	800bc7e <_strtod_l+0x8de>
 800bb9a:	4629      	mov	r1, r5
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	4620      	mov	r0, r4
 800bba0:	f002 f9e0 	bl	800df64 <__lshift>
 800bba4:	4631      	mov	r1, r6
 800bba6:	4605      	mov	r5, r0
 800bba8:	f002 fa4c 	bl	800e044 <__mcmp>
 800bbac:	2800      	cmp	r0, #0
 800bbae:	dd66      	ble.n	800bc7e <_strtod_l+0x8de>
 800bbb0:	9904      	ldr	r1, [sp, #16]
 800bbb2:	4a53      	ldr	r2, [pc, #332]	; (800bd00 <_strtod_l+0x960>)
 800bbb4:	465b      	mov	r3, fp
 800bbb6:	2900      	cmp	r1, #0
 800bbb8:	f000 8081 	beq.w	800bcbe <_strtod_l+0x91e>
 800bbbc:	ea02 010b 	and.w	r1, r2, fp
 800bbc0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bbc4:	dc7b      	bgt.n	800bcbe <_strtod_l+0x91e>
 800bbc6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bbca:	f77f aea9 	ble.w	800b920 <_strtod_l+0x580>
 800bbce:	4b4d      	ldr	r3, [pc, #308]	; (800bd04 <_strtod_l+0x964>)
 800bbd0:	4650      	mov	r0, sl
 800bbd2:	4659      	mov	r1, fp
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	f7f4 fd2f 	bl	8000638 <__aeabi_dmul>
 800bbda:	460b      	mov	r3, r1
 800bbdc:	4303      	orrs	r3, r0
 800bbde:	bf08      	it	eq
 800bbe0:	2322      	moveq	r3, #34	; 0x22
 800bbe2:	4682      	mov	sl, r0
 800bbe4:	468b      	mov	fp, r1
 800bbe6:	bf08      	it	eq
 800bbe8:	6023      	streq	r3, [r4, #0]
 800bbea:	e62b      	b.n	800b844 <_strtod_l+0x4a4>
 800bbec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbf0:	fa02 f303 	lsl.w	r3, r2, r3
 800bbf4:	ea03 0a0a 	and.w	sl, r3, sl
 800bbf8:	e6e3      	b.n	800b9c2 <_strtod_l+0x622>
 800bbfa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800bbfe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800bc02:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800bc06:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800bc0a:	fa01 f308 	lsl.w	r3, r1, r8
 800bc0e:	9308      	str	r3, [sp, #32]
 800bc10:	910d      	str	r1, [sp, #52]	; 0x34
 800bc12:	e746      	b.n	800baa2 <_strtod_l+0x702>
 800bc14:	2300      	movs	r3, #0
 800bc16:	9308      	str	r3, [sp, #32]
 800bc18:	2301      	movs	r3, #1
 800bc1a:	930d      	str	r3, [sp, #52]	; 0x34
 800bc1c:	e741      	b.n	800baa2 <_strtod_l+0x702>
 800bc1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bc20:	4642      	mov	r2, r8
 800bc22:	4620      	mov	r0, r4
 800bc24:	f002 f99e 	bl	800df64 <__lshift>
 800bc28:	9018      	str	r0, [sp, #96]	; 0x60
 800bc2a:	2800      	cmp	r0, #0
 800bc2c:	f47f af6b 	bne.w	800bb06 <_strtod_l+0x766>
 800bc30:	e5fe      	b.n	800b830 <_strtod_l+0x490>
 800bc32:	465f      	mov	r7, fp
 800bc34:	d16e      	bne.n	800bd14 <_strtod_l+0x974>
 800bc36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bc38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc3c:	b342      	cbz	r2, 800bc90 <_strtod_l+0x8f0>
 800bc3e:	4a32      	ldr	r2, [pc, #200]	; (800bd08 <_strtod_l+0x968>)
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d128      	bne.n	800bc96 <_strtod_l+0x8f6>
 800bc44:	9b04      	ldr	r3, [sp, #16]
 800bc46:	4651      	mov	r1, sl
 800bc48:	b1eb      	cbz	r3, 800bc86 <_strtod_l+0x8e6>
 800bc4a:	4b2d      	ldr	r3, [pc, #180]	; (800bd00 <_strtod_l+0x960>)
 800bc4c:	403b      	ands	r3, r7
 800bc4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bc52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc56:	d819      	bhi.n	800bc8c <_strtod_l+0x8ec>
 800bc58:	0d1b      	lsrs	r3, r3, #20
 800bc5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bc5e:	fa02 f303 	lsl.w	r3, r2, r3
 800bc62:	4299      	cmp	r1, r3
 800bc64:	d117      	bne.n	800bc96 <_strtod_l+0x8f6>
 800bc66:	4b29      	ldr	r3, [pc, #164]	; (800bd0c <_strtod_l+0x96c>)
 800bc68:	429f      	cmp	r7, r3
 800bc6a:	d102      	bne.n	800bc72 <_strtod_l+0x8d2>
 800bc6c:	3101      	adds	r1, #1
 800bc6e:	f43f addf 	beq.w	800b830 <_strtod_l+0x490>
 800bc72:	4b23      	ldr	r3, [pc, #140]	; (800bd00 <_strtod_l+0x960>)
 800bc74:	403b      	ands	r3, r7
 800bc76:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800bc7a:	f04f 0a00 	mov.w	sl, #0
 800bc7e:	9b04      	ldr	r3, [sp, #16]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d1a4      	bne.n	800bbce <_strtod_l+0x82e>
 800bc84:	e5de      	b.n	800b844 <_strtod_l+0x4a4>
 800bc86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc8a:	e7ea      	b.n	800bc62 <_strtod_l+0x8c2>
 800bc8c:	4613      	mov	r3, r2
 800bc8e:	e7e8      	b.n	800bc62 <_strtod_l+0x8c2>
 800bc90:	ea53 030a 	orrs.w	r3, r3, sl
 800bc94:	d08c      	beq.n	800bbb0 <_strtod_l+0x810>
 800bc96:	9b08      	ldr	r3, [sp, #32]
 800bc98:	b1db      	cbz	r3, 800bcd2 <_strtod_l+0x932>
 800bc9a:	423b      	tst	r3, r7
 800bc9c:	d0ef      	beq.n	800bc7e <_strtod_l+0x8de>
 800bc9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bca0:	9a04      	ldr	r2, [sp, #16]
 800bca2:	4650      	mov	r0, sl
 800bca4:	4659      	mov	r1, fp
 800bca6:	b1c3      	cbz	r3, 800bcda <_strtod_l+0x93a>
 800bca8:	f7ff fb5e 	bl	800b368 <sulp>
 800bcac:	4602      	mov	r2, r0
 800bcae:	460b      	mov	r3, r1
 800bcb0:	ec51 0b18 	vmov	r0, r1, d8
 800bcb4:	f7f4 fb0a 	bl	80002cc <__adddf3>
 800bcb8:	4682      	mov	sl, r0
 800bcba:	468b      	mov	fp, r1
 800bcbc:	e7df      	b.n	800bc7e <_strtod_l+0x8de>
 800bcbe:	4013      	ands	r3, r2
 800bcc0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bcc4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bcc8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bccc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800bcd0:	e7d5      	b.n	800bc7e <_strtod_l+0x8de>
 800bcd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcd4:	ea13 0f0a 	tst.w	r3, sl
 800bcd8:	e7e0      	b.n	800bc9c <_strtod_l+0x8fc>
 800bcda:	f7ff fb45 	bl	800b368 <sulp>
 800bcde:	4602      	mov	r2, r0
 800bce0:	460b      	mov	r3, r1
 800bce2:	ec51 0b18 	vmov	r0, r1, d8
 800bce6:	f7f4 faef 	bl	80002c8 <__aeabi_dsub>
 800bcea:	2200      	movs	r2, #0
 800bcec:	2300      	movs	r3, #0
 800bcee:	4682      	mov	sl, r0
 800bcf0:	468b      	mov	fp, r1
 800bcf2:	f7f4 ff09 	bl	8000b08 <__aeabi_dcmpeq>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	d0c1      	beq.n	800bc7e <_strtod_l+0x8de>
 800bcfa:	e611      	b.n	800b920 <_strtod_l+0x580>
 800bcfc:	fffffc02 	.word	0xfffffc02
 800bd00:	7ff00000 	.word	0x7ff00000
 800bd04:	39500000 	.word	0x39500000
 800bd08:	000fffff 	.word	0x000fffff
 800bd0c:	7fefffff 	.word	0x7fefffff
 800bd10:	080111d0 	.word	0x080111d0
 800bd14:	4631      	mov	r1, r6
 800bd16:	4628      	mov	r0, r5
 800bd18:	f002 fb12 	bl	800e340 <__ratio>
 800bd1c:	ec59 8b10 	vmov	r8, r9, d0
 800bd20:	ee10 0a10 	vmov	r0, s0
 800bd24:	2200      	movs	r2, #0
 800bd26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bd2a:	4649      	mov	r1, r9
 800bd2c:	f7f4 ff00 	bl	8000b30 <__aeabi_dcmple>
 800bd30:	2800      	cmp	r0, #0
 800bd32:	d07a      	beq.n	800be2a <_strtod_l+0xa8a>
 800bd34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d04a      	beq.n	800bdd0 <_strtod_l+0xa30>
 800bd3a:	4b95      	ldr	r3, [pc, #596]	; (800bf90 <_strtod_l+0xbf0>)
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bd42:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800bf90 <_strtod_l+0xbf0>
 800bd46:	f04f 0800 	mov.w	r8, #0
 800bd4a:	4b92      	ldr	r3, [pc, #584]	; (800bf94 <_strtod_l+0xbf4>)
 800bd4c:	403b      	ands	r3, r7
 800bd4e:	930d      	str	r3, [sp, #52]	; 0x34
 800bd50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd52:	4b91      	ldr	r3, [pc, #580]	; (800bf98 <_strtod_l+0xbf8>)
 800bd54:	429a      	cmp	r2, r3
 800bd56:	f040 80b0 	bne.w	800beba <_strtod_l+0xb1a>
 800bd5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bd5e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800bd62:	ec4b ab10 	vmov	d0, sl, fp
 800bd66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bd6a:	f002 fa11 	bl	800e190 <__ulp>
 800bd6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bd72:	ec53 2b10 	vmov	r2, r3, d0
 800bd76:	f7f4 fc5f 	bl	8000638 <__aeabi_dmul>
 800bd7a:	4652      	mov	r2, sl
 800bd7c:	465b      	mov	r3, fp
 800bd7e:	f7f4 faa5 	bl	80002cc <__adddf3>
 800bd82:	460b      	mov	r3, r1
 800bd84:	4983      	ldr	r1, [pc, #524]	; (800bf94 <_strtod_l+0xbf4>)
 800bd86:	4a85      	ldr	r2, [pc, #532]	; (800bf9c <_strtod_l+0xbfc>)
 800bd88:	4019      	ands	r1, r3
 800bd8a:	4291      	cmp	r1, r2
 800bd8c:	4682      	mov	sl, r0
 800bd8e:	d960      	bls.n	800be52 <_strtod_l+0xab2>
 800bd90:	ee18 3a90 	vmov	r3, s17
 800bd94:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d104      	bne.n	800bda6 <_strtod_l+0xa06>
 800bd9c:	ee18 3a10 	vmov	r3, s16
 800bda0:	3301      	adds	r3, #1
 800bda2:	f43f ad45 	beq.w	800b830 <_strtod_l+0x490>
 800bda6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800bfa8 <_strtod_l+0xc08>
 800bdaa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800bdae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bdb0:	4620      	mov	r0, r4
 800bdb2:	f001 febb 	bl	800db2c <_Bfree>
 800bdb6:	9905      	ldr	r1, [sp, #20]
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f001 feb7 	bl	800db2c <_Bfree>
 800bdbe:	4631      	mov	r1, r6
 800bdc0:	4620      	mov	r0, r4
 800bdc2:	f001 feb3 	bl	800db2c <_Bfree>
 800bdc6:	4629      	mov	r1, r5
 800bdc8:	4620      	mov	r0, r4
 800bdca:	f001 feaf 	bl	800db2c <_Bfree>
 800bdce:	e61a      	b.n	800ba06 <_strtod_l+0x666>
 800bdd0:	f1ba 0f00 	cmp.w	sl, #0
 800bdd4:	d11b      	bne.n	800be0e <_strtod_l+0xa6e>
 800bdd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdda:	b9f3      	cbnz	r3, 800be1a <_strtod_l+0xa7a>
 800bddc:	4b6c      	ldr	r3, [pc, #432]	; (800bf90 <_strtod_l+0xbf0>)
 800bdde:	2200      	movs	r2, #0
 800bde0:	4640      	mov	r0, r8
 800bde2:	4649      	mov	r1, r9
 800bde4:	f7f4 fe9a 	bl	8000b1c <__aeabi_dcmplt>
 800bde8:	b9d0      	cbnz	r0, 800be20 <_strtod_l+0xa80>
 800bdea:	4640      	mov	r0, r8
 800bdec:	4649      	mov	r1, r9
 800bdee:	4b6c      	ldr	r3, [pc, #432]	; (800bfa0 <_strtod_l+0xc00>)
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f7f4 fc21 	bl	8000638 <__aeabi_dmul>
 800bdf6:	4680      	mov	r8, r0
 800bdf8:	4689      	mov	r9, r1
 800bdfa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bdfe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800be02:	9315      	str	r3, [sp, #84]	; 0x54
 800be04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800be08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800be0c:	e79d      	b.n	800bd4a <_strtod_l+0x9aa>
 800be0e:	f1ba 0f01 	cmp.w	sl, #1
 800be12:	d102      	bne.n	800be1a <_strtod_l+0xa7a>
 800be14:	2f00      	cmp	r7, #0
 800be16:	f43f ad83 	beq.w	800b920 <_strtod_l+0x580>
 800be1a:	4b62      	ldr	r3, [pc, #392]	; (800bfa4 <_strtod_l+0xc04>)
 800be1c:	2200      	movs	r2, #0
 800be1e:	e78e      	b.n	800bd3e <_strtod_l+0x99e>
 800be20:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800bfa0 <_strtod_l+0xc00>
 800be24:	f04f 0800 	mov.w	r8, #0
 800be28:	e7e7      	b.n	800bdfa <_strtod_l+0xa5a>
 800be2a:	4b5d      	ldr	r3, [pc, #372]	; (800bfa0 <_strtod_l+0xc00>)
 800be2c:	4640      	mov	r0, r8
 800be2e:	4649      	mov	r1, r9
 800be30:	2200      	movs	r2, #0
 800be32:	f7f4 fc01 	bl	8000638 <__aeabi_dmul>
 800be36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be38:	4680      	mov	r8, r0
 800be3a:	4689      	mov	r9, r1
 800be3c:	b933      	cbnz	r3, 800be4c <_strtod_l+0xaac>
 800be3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be42:	900e      	str	r0, [sp, #56]	; 0x38
 800be44:	930f      	str	r3, [sp, #60]	; 0x3c
 800be46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800be4a:	e7dd      	b.n	800be08 <_strtod_l+0xa68>
 800be4c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800be50:	e7f9      	b.n	800be46 <_strtod_l+0xaa6>
 800be52:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800be56:	9b04      	ldr	r3, [sp, #16]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d1a8      	bne.n	800bdae <_strtod_l+0xa0e>
 800be5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800be60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800be62:	0d1b      	lsrs	r3, r3, #20
 800be64:	051b      	lsls	r3, r3, #20
 800be66:	429a      	cmp	r2, r3
 800be68:	d1a1      	bne.n	800bdae <_strtod_l+0xa0e>
 800be6a:	4640      	mov	r0, r8
 800be6c:	4649      	mov	r1, r9
 800be6e:	f7f4 ff43 	bl	8000cf8 <__aeabi_d2lz>
 800be72:	f7f4 fbb3 	bl	80005dc <__aeabi_l2d>
 800be76:	4602      	mov	r2, r0
 800be78:	460b      	mov	r3, r1
 800be7a:	4640      	mov	r0, r8
 800be7c:	4649      	mov	r1, r9
 800be7e:	f7f4 fa23 	bl	80002c8 <__aeabi_dsub>
 800be82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be88:	ea43 030a 	orr.w	r3, r3, sl
 800be8c:	4313      	orrs	r3, r2
 800be8e:	4680      	mov	r8, r0
 800be90:	4689      	mov	r9, r1
 800be92:	d055      	beq.n	800bf40 <_strtod_l+0xba0>
 800be94:	a336      	add	r3, pc, #216	; (adr r3, 800bf70 <_strtod_l+0xbd0>)
 800be96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9a:	f7f4 fe3f 	bl	8000b1c <__aeabi_dcmplt>
 800be9e:	2800      	cmp	r0, #0
 800bea0:	f47f acd0 	bne.w	800b844 <_strtod_l+0x4a4>
 800bea4:	a334      	add	r3, pc, #208	; (adr r3, 800bf78 <_strtod_l+0xbd8>)
 800bea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beaa:	4640      	mov	r0, r8
 800beac:	4649      	mov	r1, r9
 800beae:	f7f4 fe53 	bl	8000b58 <__aeabi_dcmpgt>
 800beb2:	2800      	cmp	r0, #0
 800beb4:	f43f af7b 	beq.w	800bdae <_strtod_l+0xa0e>
 800beb8:	e4c4      	b.n	800b844 <_strtod_l+0x4a4>
 800beba:	9b04      	ldr	r3, [sp, #16]
 800bebc:	b333      	cbz	r3, 800bf0c <_strtod_l+0xb6c>
 800bebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bec0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bec4:	d822      	bhi.n	800bf0c <_strtod_l+0xb6c>
 800bec6:	a32e      	add	r3, pc, #184	; (adr r3, 800bf80 <_strtod_l+0xbe0>)
 800bec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800becc:	4640      	mov	r0, r8
 800bece:	4649      	mov	r1, r9
 800bed0:	f7f4 fe2e 	bl	8000b30 <__aeabi_dcmple>
 800bed4:	b1a0      	cbz	r0, 800bf00 <_strtod_l+0xb60>
 800bed6:	4649      	mov	r1, r9
 800bed8:	4640      	mov	r0, r8
 800beda:	f7f4 fe85 	bl	8000be8 <__aeabi_d2uiz>
 800bede:	2801      	cmp	r0, #1
 800bee0:	bf38      	it	cc
 800bee2:	2001      	movcc	r0, #1
 800bee4:	f7f4 fb2e 	bl	8000544 <__aeabi_ui2d>
 800bee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800beea:	4680      	mov	r8, r0
 800beec:	4689      	mov	r9, r1
 800beee:	bb23      	cbnz	r3, 800bf3a <_strtod_l+0xb9a>
 800bef0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bef4:	9010      	str	r0, [sp, #64]	; 0x40
 800bef6:	9311      	str	r3, [sp, #68]	; 0x44
 800bef8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800befc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bf00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf04:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bf08:	1a9b      	subs	r3, r3, r2
 800bf0a:	9309      	str	r3, [sp, #36]	; 0x24
 800bf0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bf10:	eeb0 0a48 	vmov.f32	s0, s16
 800bf14:	eef0 0a68 	vmov.f32	s1, s17
 800bf18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bf1c:	f002 f938 	bl	800e190 <__ulp>
 800bf20:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bf24:	ec53 2b10 	vmov	r2, r3, d0
 800bf28:	f7f4 fb86 	bl	8000638 <__aeabi_dmul>
 800bf2c:	ec53 2b18 	vmov	r2, r3, d8
 800bf30:	f7f4 f9cc 	bl	80002cc <__adddf3>
 800bf34:	4682      	mov	sl, r0
 800bf36:	468b      	mov	fp, r1
 800bf38:	e78d      	b.n	800be56 <_strtod_l+0xab6>
 800bf3a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800bf3e:	e7db      	b.n	800bef8 <_strtod_l+0xb58>
 800bf40:	a311      	add	r3, pc, #68	; (adr r3, 800bf88 <_strtod_l+0xbe8>)
 800bf42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf46:	f7f4 fde9 	bl	8000b1c <__aeabi_dcmplt>
 800bf4a:	e7b2      	b.n	800beb2 <_strtod_l+0xb12>
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	930a      	str	r3, [sp, #40]	; 0x28
 800bf50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bf52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf54:	6013      	str	r3, [r2, #0]
 800bf56:	f7ff ba6b 	b.w	800b430 <_strtod_l+0x90>
 800bf5a:	2a65      	cmp	r2, #101	; 0x65
 800bf5c:	f43f ab5f 	beq.w	800b61e <_strtod_l+0x27e>
 800bf60:	2a45      	cmp	r2, #69	; 0x45
 800bf62:	f43f ab5c 	beq.w	800b61e <_strtod_l+0x27e>
 800bf66:	2301      	movs	r3, #1
 800bf68:	f7ff bb94 	b.w	800b694 <_strtod_l+0x2f4>
 800bf6c:	f3af 8000 	nop.w
 800bf70:	94a03595 	.word	0x94a03595
 800bf74:	3fdfffff 	.word	0x3fdfffff
 800bf78:	35afe535 	.word	0x35afe535
 800bf7c:	3fe00000 	.word	0x3fe00000
 800bf80:	ffc00000 	.word	0xffc00000
 800bf84:	41dfffff 	.word	0x41dfffff
 800bf88:	94a03595 	.word	0x94a03595
 800bf8c:	3fcfffff 	.word	0x3fcfffff
 800bf90:	3ff00000 	.word	0x3ff00000
 800bf94:	7ff00000 	.word	0x7ff00000
 800bf98:	7fe00000 	.word	0x7fe00000
 800bf9c:	7c9fffff 	.word	0x7c9fffff
 800bfa0:	3fe00000 	.word	0x3fe00000
 800bfa4:	bff00000 	.word	0xbff00000
 800bfa8:	7fefffff 	.word	0x7fefffff

0800bfac <strtod>:
 800bfac:	460a      	mov	r2, r1
 800bfae:	4601      	mov	r1, r0
 800bfb0:	4802      	ldr	r0, [pc, #8]	; (800bfbc <strtod+0x10>)
 800bfb2:	4b03      	ldr	r3, [pc, #12]	; (800bfc0 <strtod+0x14>)
 800bfb4:	6800      	ldr	r0, [r0, #0]
 800bfb6:	f7ff b9f3 	b.w	800b3a0 <_strtod_l>
 800bfba:	bf00      	nop
 800bfbc:	2000004c 	.word	0x2000004c
 800bfc0:	200000b4 	.word	0x200000b4

0800bfc4 <_strtol_l.constprop.0>:
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfca:	d001      	beq.n	800bfd0 <_strtol_l.constprop.0+0xc>
 800bfcc:	2b24      	cmp	r3, #36	; 0x24
 800bfce:	d906      	bls.n	800bfde <_strtol_l.constprop.0+0x1a>
 800bfd0:	f7fe fc92 	bl	800a8f8 <__errno>
 800bfd4:	2316      	movs	r3, #22
 800bfd6:	6003      	str	r3, [r0, #0]
 800bfd8:	2000      	movs	r0, #0
 800bfda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfde:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c0c4 <_strtol_l.constprop.0+0x100>
 800bfe2:	460d      	mov	r5, r1
 800bfe4:	462e      	mov	r6, r5
 800bfe6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bfea:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bfee:	f017 0708 	ands.w	r7, r7, #8
 800bff2:	d1f7      	bne.n	800bfe4 <_strtol_l.constprop.0+0x20>
 800bff4:	2c2d      	cmp	r4, #45	; 0x2d
 800bff6:	d132      	bne.n	800c05e <_strtol_l.constprop.0+0x9a>
 800bff8:	782c      	ldrb	r4, [r5, #0]
 800bffa:	2701      	movs	r7, #1
 800bffc:	1cb5      	adds	r5, r6, #2
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d05b      	beq.n	800c0ba <_strtol_l.constprop.0+0xf6>
 800c002:	2b10      	cmp	r3, #16
 800c004:	d109      	bne.n	800c01a <_strtol_l.constprop.0+0x56>
 800c006:	2c30      	cmp	r4, #48	; 0x30
 800c008:	d107      	bne.n	800c01a <_strtol_l.constprop.0+0x56>
 800c00a:	782c      	ldrb	r4, [r5, #0]
 800c00c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c010:	2c58      	cmp	r4, #88	; 0x58
 800c012:	d14d      	bne.n	800c0b0 <_strtol_l.constprop.0+0xec>
 800c014:	786c      	ldrb	r4, [r5, #1]
 800c016:	2310      	movs	r3, #16
 800c018:	3502      	adds	r5, #2
 800c01a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c01e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c022:	f04f 0c00 	mov.w	ip, #0
 800c026:	fbb8 f9f3 	udiv	r9, r8, r3
 800c02a:	4666      	mov	r6, ip
 800c02c:	fb03 8a19 	mls	sl, r3, r9, r8
 800c030:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c034:	f1be 0f09 	cmp.w	lr, #9
 800c038:	d816      	bhi.n	800c068 <_strtol_l.constprop.0+0xa4>
 800c03a:	4674      	mov	r4, lr
 800c03c:	42a3      	cmp	r3, r4
 800c03e:	dd24      	ble.n	800c08a <_strtol_l.constprop.0+0xc6>
 800c040:	f1bc 0f00 	cmp.w	ip, #0
 800c044:	db1e      	blt.n	800c084 <_strtol_l.constprop.0+0xc0>
 800c046:	45b1      	cmp	r9, r6
 800c048:	d31c      	bcc.n	800c084 <_strtol_l.constprop.0+0xc0>
 800c04a:	d101      	bne.n	800c050 <_strtol_l.constprop.0+0x8c>
 800c04c:	45a2      	cmp	sl, r4
 800c04e:	db19      	blt.n	800c084 <_strtol_l.constprop.0+0xc0>
 800c050:	fb06 4603 	mla	r6, r6, r3, r4
 800c054:	f04f 0c01 	mov.w	ip, #1
 800c058:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c05c:	e7e8      	b.n	800c030 <_strtol_l.constprop.0+0x6c>
 800c05e:	2c2b      	cmp	r4, #43	; 0x2b
 800c060:	bf04      	itt	eq
 800c062:	782c      	ldrbeq	r4, [r5, #0]
 800c064:	1cb5      	addeq	r5, r6, #2
 800c066:	e7ca      	b.n	800bffe <_strtol_l.constprop.0+0x3a>
 800c068:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c06c:	f1be 0f19 	cmp.w	lr, #25
 800c070:	d801      	bhi.n	800c076 <_strtol_l.constprop.0+0xb2>
 800c072:	3c37      	subs	r4, #55	; 0x37
 800c074:	e7e2      	b.n	800c03c <_strtol_l.constprop.0+0x78>
 800c076:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c07a:	f1be 0f19 	cmp.w	lr, #25
 800c07e:	d804      	bhi.n	800c08a <_strtol_l.constprop.0+0xc6>
 800c080:	3c57      	subs	r4, #87	; 0x57
 800c082:	e7db      	b.n	800c03c <_strtol_l.constprop.0+0x78>
 800c084:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800c088:	e7e6      	b.n	800c058 <_strtol_l.constprop.0+0x94>
 800c08a:	f1bc 0f00 	cmp.w	ip, #0
 800c08e:	da05      	bge.n	800c09c <_strtol_l.constprop.0+0xd8>
 800c090:	2322      	movs	r3, #34	; 0x22
 800c092:	6003      	str	r3, [r0, #0]
 800c094:	4646      	mov	r6, r8
 800c096:	b942      	cbnz	r2, 800c0aa <_strtol_l.constprop.0+0xe6>
 800c098:	4630      	mov	r0, r6
 800c09a:	e79e      	b.n	800bfda <_strtol_l.constprop.0+0x16>
 800c09c:	b107      	cbz	r7, 800c0a0 <_strtol_l.constprop.0+0xdc>
 800c09e:	4276      	negs	r6, r6
 800c0a0:	2a00      	cmp	r2, #0
 800c0a2:	d0f9      	beq.n	800c098 <_strtol_l.constprop.0+0xd4>
 800c0a4:	f1bc 0f00 	cmp.w	ip, #0
 800c0a8:	d000      	beq.n	800c0ac <_strtol_l.constprop.0+0xe8>
 800c0aa:	1e69      	subs	r1, r5, #1
 800c0ac:	6011      	str	r1, [r2, #0]
 800c0ae:	e7f3      	b.n	800c098 <_strtol_l.constprop.0+0xd4>
 800c0b0:	2430      	movs	r4, #48	; 0x30
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d1b1      	bne.n	800c01a <_strtol_l.constprop.0+0x56>
 800c0b6:	2308      	movs	r3, #8
 800c0b8:	e7af      	b.n	800c01a <_strtol_l.constprop.0+0x56>
 800c0ba:	2c30      	cmp	r4, #48	; 0x30
 800c0bc:	d0a5      	beq.n	800c00a <_strtol_l.constprop.0+0x46>
 800c0be:	230a      	movs	r3, #10
 800c0c0:	e7ab      	b.n	800c01a <_strtol_l.constprop.0+0x56>
 800c0c2:	bf00      	nop
 800c0c4:	080111f9 	.word	0x080111f9

0800c0c8 <strtol>:
 800c0c8:	4613      	mov	r3, r2
 800c0ca:	460a      	mov	r2, r1
 800c0cc:	4601      	mov	r1, r0
 800c0ce:	4802      	ldr	r0, [pc, #8]	; (800c0d8 <strtol+0x10>)
 800c0d0:	6800      	ldr	r0, [r0, #0]
 800c0d2:	f7ff bf77 	b.w	800bfc4 <_strtol_l.constprop.0>
 800c0d6:	bf00      	nop
 800c0d8:	2000004c 	.word	0x2000004c

0800c0dc <__swbuf_r>:
 800c0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0de:	460e      	mov	r6, r1
 800c0e0:	4614      	mov	r4, r2
 800c0e2:	4605      	mov	r5, r0
 800c0e4:	b118      	cbz	r0, 800c0ee <__swbuf_r+0x12>
 800c0e6:	6983      	ldr	r3, [r0, #24]
 800c0e8:	b90b      	cbnz	r3, 800c0ee <__swbuf_r+0x12>
 800c0ea:	f001 f84d 	bl	800d188 <__sinit>
 800c0ee:	4b21      	ldr	r3, [pc, #132]	; (800c174 <__swbuf_r+0x98>)
 800c0f0:	429c      	cmp	r4, r3
 800c0f2:	d12b      	bne.n	800c14c <__swbuf_r+0x70>
 800c0f4:	686c      	ldr	r4, [r5, #4]
 800c0f6:	69a3      	ldr	r3, [r4, #24]
 800c0f8:	60a3      	str	r3, [r4, #8]
 800c0fa:	89a3      	ldrh	r3, [r4, #12]
 800c0fc:	071a      	lsls	r2, r3, #28
 800c0fe:	d52f      	bpl.n	800c160 <__swbuf_r+0x84>
 800c100:	6923      	ldr	r3, [r4, #16]
 800c102:	b36b      	cbz	r3, 800c160 <__swbuf_r+0x84>
 800c104:	6923      	ldr	r3, [r4, #16]
 800c106:	6820      	ldr	r0, [r4, #0]
 800c108:	1ac0      	subs	r0, r0, r3
 800c10a:	6963      	ldr	r3, [r4, #20]
 800c10c:	b2f6      	uxtb	r6, r6
 800c10e:	4283      	cmp	r3, r0
 800c110:	4637      	mov	r7, r6
 800c112:	dc04      	bgt.n	800c11e <__swbuf_r+0x42>
 800c114:	4621      	mov	r1, r4
 800c116:	4628      	mov	r0, r5
 800c118:	f000 ffa2 	bl	800d060 <_fflush_r>
 800c11c:	bb30      	cbnz	r0, 800c16c <__swbuf_r+0x90>
 800c11e:	68a3      	ldr	r3, [r4, #8]
 800c120:	3b01      	subs	r3, #1
 800c122:	60a3      	str	r3, [r4, #8]
 800c124:	6823      	ldr	r3, [r4, #0]
 800c126:	1c5a      	adds	r2, r3, #1
 800c128:	6022      	str	r2, [r4, #0]
 800c12a:	701e      	strb	r6, [r3, #0]
 800c12c:	6963      	ldr	r3, [r4, #20]
 800c12e:	3001      	adds	r0, #1
 800c130:	4283      	cmp	r3, r0
 800c132:	d004      	beq.n	800c13e <__swbuf_r+0x62>
 800c134:	89a3      	ldrh	r3, [r4, #12]
 800c136:	07db      	lsls	r3, r3, #31
 800c138:	d506      	bpl.n	800c148 <__swbuf_r+0x6c>
 800c13a:	2e0a      	cmp	r6, #10
 800c13c:	d104      	bne.n	800c148 <__swbuf_r+0x6c>
 800c13e:	4621      	mov	r1, r4
 800c140:	4628      	mov	r0, r5
 800c142:	f000 ff8d 	bl	800d060 <_fflush_r>
 800c146:	b988      	cbnz	r0, 800c16c <__swbuf_r+0x90>
 800c148:	4638      	mov	r0, r7
 800c14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c14c:	4b0a      	ldr	r3, [pc, #40]	; (800c178 <__swbuf_r+0x9c>)
 800c14e:	429c      	cmp	r4, r3
 800c150:	d101      	bne.n	800c156 <__swbuf_r+0x7a>
 800c152:	68ac      	ldr	r4, [r5, #8]
 800c154:	e7cf      	b.n	800c0f6 <__swbuf_r+0x1a>
 800c156:	4b09      	ldr	r3, [pc, #36]	; (800c17c <__swbuf_r+0xa0>)
 800c158:	429c      	cmp	r4, r3
 800c15a:	bf08      	it	eq
 800c15c:	68ec      	ldreq	r4, [r5, #12]
 800c15e:	e7ca      	b.n	800c0f6 <__swbuf_r+0x1a>
 800c160:	4621      	mov	r1, r4
 800c162:	4628      	mov	r0, r5
 800c164:	f000 f80c 	bl	800c180 <__swsetup_r>
 800c168:	2800      	cmp	r0, #0
 800c16a:	d0cb      	beq.n	800c104 <__swbuf_r+0x28>
 800c16c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c170:	e7ea      	b.n	800c148 <__swbuf_r+0x6c>
 800c172:	bf00      	nop
 800c174:	080113ac 	.word	0x080113ac
 800c178:	080113cc 	.word	0x080113cc
 800c17c:	0801138c 	.word	0x0801138c

0800c180 <__swsetup_r>:
 800c180:	4b32      	ldr	r3, [pc, #200]	; (800c24c <__swsetup_r+0xcc>)
 800c182:	b570      	push	{r4, r5, r6, lr}
 800c184:	681d      	ldr	r5, [r3, #0]
 800c186:	4606      	mov	r6, r0
 800c188:	460c      	mov	r4, r1
 800c18a:	b125      	cbz	r5, 800c196 <__swsetup_r+0x16>
 800c18c:	69ab      	ldr	r3, [r5, #24]
 800c18e:	b913      	cbnz	r3, 800c196 <__swsetup_r+0x16>
 800c190:	4628      	mov	r0, r5
 800c192:	f000 fff9 	bl	800d188 <__sinit>
 800c196:	4b2e      	ldr	r3, [pc, #184]	; (800c250 <__swsetup_r+0xd0>)
 800c198:	429c      	cmp	r4, r3
 800c19a:	d10f      	bne.n	800c1bc <__swsetup_r+0x3c>
 800c19c:	686c      	ldr	r4, [r5, #4]
 800c19e:	89a3      	ldrh	r3, [r4, #12]
 800c1a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1a4:	0719      	lsls	r1, r3, #28
 800c1a6:	d42c      	bmi.n	800c202 <__swsetup_r+0x82>
 800c1a8:	06dd      	lsls	r5, r3, #27
 800c1aa:	d411      	bmi.n	800c1d0 <__swsetup_r+0x50>
 800c1ac:	2309      	movs	r3, #9
 800c1ae:	6033      	str	r3, [r6, #0]
 800c1b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c1b4:	81a3      	strh	r3, [r4, #12]
 800c1b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1ba:	e03e      	b.n	800c23a <__swsetup_r+0xba>
 800c1bc:	4b25      	ldr	r3, [pc, #148]	; (800c254 <__swsetup_r+0xd4>)
 800c1be:	429c      	cmp	r4, r3
 800c1c0:	d101      	bne.n	800c1c6 <__swsetup_r+0x46>
 800c1c2:	68ac      	ldr	r4, [r5, #8]
 800c1c4:	e7eb      	b.n	800c19e <__swsetup_r+0x1e>
 800c1c6:	4b24      	ldr	r3, [pc, #144]	; (800c258 <__swsetup_r+0xd8>)
 800c1c8:	429c      	cmp	r4, r3
 800c1ca:	bf08      	it	eq
 800c1cc:	68ec      	ldreq	r4, [r5, #12]
 800c1ce:	e7e6      	b.n	800c19e <__swsetup_r+0x1e>
 800c1d0:	0758      	lsls	r0, r3, #29
 800c1d2:	d512      	bpl.n	800c1fa <__swsetup_r+0x7a>
 800c1d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1d6:	b141      	cbz	r1, 800c1ea <__swsetup_r+0x6a>
 800c1d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1dc:	4299      	cmp	r1, r3
 800c1de:	d002      	beq.n	800c1e6 <__swsetup_r+0x66>
 800c1e0:	4630      	mov	r0, r6
 800c1e2:	f002 f93b 	bl	800e45c <_free_r>
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	6363      	str	r3, [r4, #52]	; 0x34
 800c1ea:	89a3      	ldrh	r3, [r4, #12]
 800c1ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c1f0:	81a3      	strh	r3, [r4, #12]
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	6063      	str	r3, [r4, #4]
 800c1f6:	6923      	ldr	r3, [r4, #16]
 800c1f8:	6023      	str	r3, [r4, #0]
 800c1fa:	89a3      	ldrh	r3, [r4, #12]
 800c1fc:	f043 0308 	orr.w	r3, r3, #8
 800c200:	81a3      	strh	r3, [r4, #12]
 800c202:	6923      	ldr	r3, [r4, #16]
 800c204:	b94b      	cbnz	r3, 800c21a <__swsetup_r+0x9a>
 800c206:	89a3      	ldrh	r3, [r4, #12]
 800c208:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c20c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c210:	d003      	beq.n	800c21a <__swsetup_r+0x9a>
 800c212:	4621      	mov	r1, r4
 800c214:	4630      	mov	r0, r6
 800c216:	f001 fbef 	bl	800d9f8 <__smakebuf_r>
 800c21a:	89a0      	ldrh	r0, [r4, #12]
 800c21c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c220:	f010 0301 	ands.w	r3, r0, #1
 800c224:	d00a      	beq.n	800c23c <__swsetup_r+0xbc>
 800c226:	2300      	movs	r3, #0
 800c228:	60a3      	str	r3, [r4, #8]
 800c22a:	6963      	ldr	r3, [r4, #20]
 800c22c:	425b      	negs	r3, r3
 800c22e:	61a3      	str	r3, [r4, #24]
 800c230:	6923      	ldr	r3, [r4, #16]
 800c232:	b943      	cbnz	r3, 800c246 <__swsetup_r+0xc6>
 800c234:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c238:	d1ba      	bne.n	800c1b0 <__swsetup_r+0x30>
 800c23a:	bd70      	pop	{r4, r5, r6, pc}
 800c23c:	0781      	lsls	r1, r0, #30
 800c23e:	bf58      	it	pl
 800c240:	6963      	ldrpl	r3, [r4, #20]
 800c242:	60a3      	str	r3, [r4, #8]
 800c244:	e7f4      	b.n	800c230 <__swsetup_r+0xb0>
 800c246:	2000      	movs	r0, #0
 800c248:	e7f7      	b.n	800c23a <__swsetup_r+0xba>
 800c24a:	bf00      	nop
 800c24c:	2000004c 	.word	0x2000004c
 800c250:	080113ac 	.word	0x080113ac
 800c254:	080113cc 	.word	0x080113cc
 800c258:	0801138c 	.word	0x0801138c

0800c25c <quorem>:
 800c25c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c260:	6903      	ldr	r3, [r0, #16]
 800c262:	690c      	ldr	r4, [r1, #16]
 800c264:	42a3      	cmp	r3, r4
 800c266:	4607      	mov	r7, r0
 800c268:	f2c0 8081 	blt.w	800c36e <quorem+0x112>
 800c26c:	3c01      	subs	r4, #1
 800c26e:	f101 0814 	add.w	r8, r1, #20
 800c272:	f100 0514 	add.w	r5, r0, #20
 800c276:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c27a:	9301      	str	r3, [sp, #4]
 800c27c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c280:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c284:	3301      	adds	r3, #1
 800c286:	429a      	cmp	r2, r3
 800c288:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c28c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c290:	fbb2 f6f3 	udiv	r6, r2, r3
 800c294:	d331      	bcc.n	800c2fa <quorem+0x9e>
 800c296:	f04f 0e00 	mov.w	lr, #0
 800c29a:	4640      	mov	r0, r8
 800c29c:	46ac      	mov	ip, r5
 800c29e:	46f2      	mov	sl, lr
 800c2a0:	f850 2b04 	ldr.w	r2, [r0], #4
 800c2a4:	b293      	uxth	r3, r2
 800c2a6:	fb06 e303 	mla	r3, r6, r3, lr
 800c2aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	ebaa 0303 	sub.w	r3, sl, r3
 800c2b4:	f8dc a000 	ldr.w	sl, [ip]
 800c2b8:	0c12      	lsrs	r2, r2, #16
 800c2ba:	fa13 f38a 	uxtah	r3, r3, sl
 800c2be:	fb06 e202 	mla	r2, r6, r2, lr
 800c2c2:	9300      	str	r3, [sp, #0]
 800c2c4:	9b00      	ldr	r3, [sp, #0]
 800c2c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c2ca:	b292      	uxth	r2, r2
 800c2cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c2d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c2d4:	f8bd 3000 	ldrh.w	r3, [sp]
 800c2d8:	4581      	cmp	r9, r0
 800c2da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2de:	f84c 3b04 	str.w	r3, [ip], #4
 800c2e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c2e6:	d2db      	bcs.n	800c2a0 <quorem+0x44>
 800c2e8:	f855 300b 	ldr.w	r3, [r5, fp]
 800c2ec:	b92b      	cbnz	r3, 800c2fa <quorem+0x9e>
 800c2ee:	9b01      	ldr	r3, [sp, #4]
 800c2f0:	3b04      	subs	r3, #4
 800c2f2:	429d      	cmp	r5, r3
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	d32e      	bcc.n	800c356 <quorem+0xfa>
 800c2f8:	613c      	str	r4, [r7, #16]
 800c2fa:	4638      	mov	r0, r7
 800c2fc:	f001 fea2 	bl	800e044 <__mcmp>
 800c300:	2800      	cmp	r0, #0
 800c302:	db24      	blt.n	800c34e <quorem+0xf2>
 800c304:	3601      	adds	r6, #1
 800c306:	4628      	mov	r0, r5
 800c308:	f04f 0c00 	mov.w	ip, #0
 800c30c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c310:	f8d0 e000 	ldr.w	lr, [r0]
 800c314:	b293      	uxth	r3, r2
 800c316:	ebac 0303 	sub.w	r3, ip, r3
 800c31a:	0c12      	lsrs	r2, r2, #16
 800c31c:	fa13 f38e 	uxtah	r3, r3, lr
 800c320:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c324:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c328:	b29b      	uxth	r3, r3
 800c32a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c32e:	45c1      	cmp	r9, r8
 800c330:	f840 3b04 	str.w	r3, [r0], #4
 800c334:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c338:	d2e8      	bcs.n	800c30c <quorem+0xb0>
 800c33a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c33e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c342:	b922      	cbnz	r2, 800c34e <quorem+0xf2>
 800c344:	3b04      	subs	r3, #4
 800c346:	429d      	cmp	r5, r3
 800c348:	461a      	mov	r2, r3
 800c34a:	d30a      	bcc.n	800c362 <quorem+0x106>
 800c34c:	613c      	str	r4, [r7, #16]
 800c34e:	4630      	mov	r0, r6
 800c350:	b003      	add	sp, #12
 800c352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c356:	6812      	ldr	r2, [r2, #0]
 800c358:	3b04      	subs	r3, #4
 800c35a:	2a00      	cmp	r2, #0
 800c35c:	d1cc      	bne.n	800c2f8 <quorem+0x9c>
 800c35e:	3c01      	subs	r4, #1
 800c360:	e7c7      	b.n	800c2f2 <quorem+0x96>
 800c362:	6812      	ldr	r2, [r2, #0]
 800c364:	3b04      	subs	r3, #4
 800c366:	2a00      	cmp	r2, #0
 800c368:	d1f0      	bne.n	800c34c <quorem+0xf0>
 800c36a:	3c01      	subs	r4, #1
 800c36c:	e7eb      	b.n	800c346 <quorem+0xea>
 800c36e:	2000      	movs	r0, #0
 800c370:	e7ee      	b.n	800c350 <quorem+0xf4>
 800c372:	0000      	movs	r0, r0
 800c374:	0000      	movs	r0, r0
	...

0800c378 <_dtoa_r>:
 800c378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c37c:	ed2d 8b04 	vpush	{d8-d9}
 800c380:	ec57 6b10 	vmov	r6, r7, d0
 800c384:	b093      	sub	sp, #76	; 0x4c
 800c386:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c388:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c38c:	9106      	str	r1, [sp, #24]
 800c38e:	ee10 aa10 	vmov	sl, s0
 800c392:	4604      	mov	r4, r0
 800c394:	9209      	str	r2, [sp, #36]	; 0x24
 800c396:	930c      	str	r3, [sp, #48]	; 0x30
 800c398:	46bb      	mov	fp, r7
 800c39a:	b975      	cbnz	r5, 800c3ba <_dtoa_r+0x42>
 800c39c:	2010      	movs	r0, #16
 800c39e:	f001 fb6b 	bl	800da78 <malloc>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	6260      	str	r0, [r4, #36]	; 0x24
 800c3a6:	b920      	cbnz	r0, 800c3b2 <_dtoa_r+0x3a>
 800c3a8:	4ba7      	ldr	r3, [pc, #668]	; (800c648 <_dtoa_r+0x2d0>)
 800c3aa:	21ea      	movs	r1, #234	; 0xea
 800c3ac:	48a7      	ldr	r0, [pc, #668]	; (800c64c <_dtoa_r+0x2d4>)
 800c3ae:	f002 fb1d 	bl	800e9ec <__assert_func>
 800c3b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c3b6:	6005      	str	r5, [r0, #0]
 800c3b8:	60c5      	str	r5, [r0, #12]
 800c3ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3bc:	6819      	ldr	r1, [r3, #0]
 800c3be:	b151      	cbz	r1, 800c3d6 <_dtoa_r+0x5e>
 800c3c0:	685a      	ldr	r2, [r3, #4]
 800c3c2:	604a      	str	r2, [r1, #4]
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	4093      	lsls	r3, r2
 800c3c8:	608b      	str	r3, [r1, #8]
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	f001 fbae 	bl	800db2c <_Bfree>
 800c3d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	601a      	str	r2, [r3, #0]
 800c3d6:	1e3b      	subs	r3, r7, #0
 800c3d8:	bfaa      	itet	ge
 800c3da:	2300      	movge	r3, #0
 800c3dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c3e0:	f8c8 3000 	strge.w	r3, [r8]
 800c3e4:	4b9a      	ldr	r3, [pc, #616]	; (800c650 <_dtoa_r+0x2d8>)
 800c3e6:	bfbc      	itt	lt
 800c3e8:	2201      	movlt	r2, #1
 800c3ea:	f8c8 2000 	strlt.w	r2, [r8]
 800c3ee:	ea33 030b 	bics.w	r3, r3, fp
 800c3f2:	d11b      	bne.n	800c42c <_dtoa_r+0xb4>
 800c3f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c3f6:	f242 730f 	movw	r3, #9999	; 0x270f
 800c3fa:	6013      	str	r3, [r2, #0]
 800c3fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c400:	4333      	orrs	r3, r6
 800c402:	f000 8592 	beq.w	800cf2a <_dtoa_r+0xbb2>
 800c406:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c408:	b963      	cbnz	r3, 800c424 <_dtoa_r+0xac>
 800c40a:	4b92      	ldr	r3, [pc, #584]	; (800c654 <_dtoa_r+0x2dc>)
 800c40c:	e022      	b.n	800c454 <_dtoa_r+0xdc>
 800c40e:	4b92      	ldr	r3, [pc, #584]	; (800c658 <_dtoa_r+0x2e0>)
 800c410:	9301      	str	r3, [sp, #4]
 800c412:	3308      	adds	r3, #8
 800c414:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c416:	6013      	str	r3, [r2, #0]
 800c418:	9801      	ldr	r0, [sp, #4]
 800c41a:	b013      	add	sp, #76	; 0x4c
 800c41c:	ecbd 8b04 	vpop	{d8-d9}
 800c420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c424:	4b8b      	ldr	r3, [pc, #556]	; (800c654 <_dtoa_r+0x2dc>)
 800c426:	9301      	str	r3, [sp, #4]
 800c428:	3303      	adds	r3, #3
 800c42a:	e7f3      	b.n	800c414 <_dtoa_r+0x9c>
 800c42c:	2200      	movs	r2, #0
 800c42e:	2300      	movs	r3, #0
 800c430:	4650      	mov	r0, sl
 800c432:	4659      	mov	r1, fp
 800c434:	f7f4 fb68 	bl	8000b08 <__aeabi_dcmpeq>
 800c438:	ec4b ab19 	vmov	d9, sl, fp
 800c43c:	4680      	mov	r8, r0
 800c43e:	b158      	cbz	r0, 800c458 <_dtoa_r+0xe0>
 800c440:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c442:	2301      	movs	r3, #1
 800c444:	6013      	str	r3, [r2, #0]
 800c446:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c448:	2b00      	cmp	r3, #0
 800c44a:	f000 856b 	beq.w	800cf24 <_dtoa_r+0xbac>
 800c44e:	4883      	ldr	r0, [pc, #524]	; (800c65c <_dtoa_r+0x2e4>)
 800c450:	6018      	str	r0, [r3, #0]
 800c452:	1e43      	subs	r3, r0, #1
 800c454:	9301      	str	r3, [sp, #4]
 800c456:	e7df      	b.n	800c418 <_dtoa_r+0xa0>
 800c458:	ec4b ab10 	vmov	d0, sl, fp
 800c45c:	aa10      	add	r2, sp, #64	; 0x40
 800c45e:	a911      	add	r1, sp, #68	; 0x44
 800c460:	4620      	mov	r0, r4
 800c462:	f001 ff11 	bl	800e288 <__d2b>
 800c466:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c46a:	ee08 0a10 	vmov	s16, r0
 800c46e:	2d00      	cmp	r5, #0
 800c470:	f000 8084 	beq.w	800c57c <_dtoa_r+0x204>
 800c474:	ee19 3a90 	vmov	r3, s19
 800c478:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c47c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c480:	4656      	mov	r6, sl
 800c482:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c486:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c48a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c48e:	4b74      	ldr	r3, [pc, #464]	; (800c660 <_dtoa_r+0x2e8>)
 800c490:	2200      	movs	r2, #0
 800c492:	4630      	mov	r0, r6
 800c494:	4639      	mov	r1, r7
 800c496:	f7f3 ff17 	bl	80002c8 <__aeabi_dsub>
 800c49a:	a365      	add	r3, pc, #404	; (adr r3, 800c630 <_dtoa_r+0x2b8>)
 800c49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a0:	f7f4 f8ca 	bl	8000638 <__aeabi_dmul>
 800c4a4:	a364      	add	r3, pc, #400	; (adr r3, 800c638 <_dtoa_r+0x2c0>)
 800c4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4aa:	f7f3 ff0f 	bl	80002cc <__adddf3>
 800c4ae:	4606      	mov	r6, r0
 800c4b0:	4628      	mov	r0, r5
 800c4b2:	460f      	mov	r7, r1
 800c4b4:	f7f4 f856 	bl	8000564 <__aeabi_i2d>
 800c4b8:	a361      	add	r3, pc, #388	; (adr r3, 800c640 <_dtoa_r+0x2c8>)
 800c4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4be:	f7f4 f8bb 	bl	8000638 <__aeabi_dmul>
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	4630      	mov	r0, r6
 800c4c8:	4639      	mov	r1, r7
 800c4ca:	f7f3 feff 	bl	80002cc <__adddf3>
 800c4ce:	4606      	mov	r6, r0
 800c4d0:	460f      	mov	r7, r1
 800c4d2:	f7f4 fb61 	bl	8000b98 <__aeabi_d2iz>
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	9000      	str	r0, [sp, #0]
 800c4da:	2300      	movs	r3, #0
 800c4dc:	4630      	mov	r0, r6
 800c4de:	4639      	mov	r1, r7
 800c4e0:	f7f4 fb1c 	bl	8000b1c <__aeabi_dcmplt>
 800c4e4:	b150      	cbz	r0, 800c4fc <_dtoa_r+0x184>
 800c4e6:	9800      	ldr	r0, [sp, #0]
 800c4e8:	f7f4 f83c 	bl	8000564 <__aeabi_i2d>
 800c4ec:	4632      	mov	r2, r6
 800c4ee:	463b      	mov	r3, r7
 800c4f0:	f7f4 fb0a 	bl	8000b08 <__aeabi_dcmpeq>
 800c4f4:	b910      	cbnz	r0, 800c4fc <_dtoa_r+0x184>
 800c4f6:	9b00      	ldr	r3, [sp, #0]
 800c4f8:	3b01      	subs	r3, #1
 800c4fa:	9300      	str	r3, [sp, #0]
 800c4fc:	9b00      	ldr	r3, [sp, #0]
 800c4fe:	2b16      	cmp	r3, #22
 800c500:	d85a      	bhi.n	800c5b8 <_dtoa_r+0x240>
 800c502:	9a00      	ldr	r2, [sp, #0]
 800c504:	4b57      	ldr	r3, [pc, #348]	; (800c664 <_dtoa_r+0x2ec>)
 800c506:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50e:	ec51 0b19 	vmov	r0, r1, d9
 800c512:	f7f4 fb03 	bl	8000b1c <__aeabi_dcmplt>
 800c516:	2800      	cmp	r0, #0
 800c518:	d050      	beq.n	800c5bc <_dtoa_r+0x244>
 800c51a:	9b00      	ldr	r3, [sp, #0]
 800c51c:	3b01      	subs	r3, #1
 800c51e:	9300      	str	r3, [sp, #0]
 800c520:	2300      	movs	r3, #0
 800c522:	930b      	str	r3, [sp, #44]	; 0x2c
 800c524:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c526:	1b5d      	subs	r5, r3, r5
 800c528:	1e6b      	subs	r3, r5, #1
 800c52a:	9305      	str	r3, [sp, #20]
 800c52c:	bf45      	ittet	mi
 800c52e:	f1c5 0301 	rsbmi	r3, r5, #1
 800c532:	9304      	strmi	r3, [sp, #16]
 800c534:	2300      	movpl	r3, #0
 800c536:	2300      	movmi	r3, #0
 800c538:	bf4c      	ite	mi
 800c53a:	9305      	strmi	r3, [sp, #20]
 800c53c:	9304      	strpl	r3, [sp, #16]
 800c53e:	9b00      	ldr	r3, [sp, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	db3d      	blt.n	800c5c0 <_dtoa_r+0x248>
 800c544:	9b05      	ldr	r3, [sp, #20]
 800c546:	9a00      	ldr	r2, [sp, #0]
 800c548:	920a      	str	r2, [sp, #40]	; 0x28
 800c54a:	4413      	add	r3, r2
 800c54c:	9305      	str	r3, [sp, #20]
 800c54e:	2300      	movs	r3, #0
 800c550:	9307      	str	r3, [sp, #28]
 800c552:	9b06      	ldr	r3, [sp, #24]
 800c554:	2b09      	cmp	r3, #9
 800c556:	f200 8089 	bhi.w	800c66c <_dtoa_r+0x2f4>
 800c55a:	2b05      	cmp	r3, #5
 800c55c:	bfc4      	itt	gt
 800c55e:	3b04      	subgt	r3, #4
 800c560:	9306      	strgt	r3, [sp, #24]
 800c562:	9b06      	ldr	r3, [sp, #24]
 800c564:	f1a3 0302 	sub.w	r3, r3, #2
 800c568:	bfcc      	ite	gt
 800c56a:	2500      	movgt	r5, #0
 800c56c:	2501      	movle	r5, #1
 800c56e:	2b03      	cmp	r3, #3
 800c570:	f200 8087 	bhi.w	800c682 <_dtoa_r+0x30a>
 800c574:	e8df f003 	tbb	[pc, r3]
 800c578:	59383a2d 	.word	0x59383a2d
 800c57c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c580:	441d      	add	r5, r3
 800c582:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c586:	2b20      	cmp	r3, #32
 800c588:	bfc1      	itttt	gt
 800c58a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c58e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c592:	fa0b f303 	lslgt.w	r3, fp, r3
 800c596:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c59a:	bfda      	itte	le
 800c59c:	f1c3 0320 	rsble	r3, r3, #32
 800c5a0:	fa06 f003 	lslle.w	r0, r6, r3
 800c5a4:	4318      	orrgt	r0, r3
 800c5a6:	f7f3 ffcd 	bl	8000544 <__aeabi_ui2d>
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	4606      	mov	r6, r0
 800c5ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c5b2:	3d01      	subs	r5, #1
 800c5b4:	930e      	str	r3, [sp, #56]	; 0x38
 800c5b6:	e76a      	b.n	800c48e <_dtoa_r+0x116>
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	e7b2      	b.n	800c522 <_dtoa_r+0x1aa>
 800c5bc:	900b      	str	r0, [sp, #44]	; 0x2c
 800c5be:	e7b1      	b.n	800c524 <_dtoa_r+0x1ac>
 800c5c0:	9b04      	ldr	r3, [sp, #16]
 800c5c2:	9a00      	ldr	r2, [sp, #0]
 800c5c4:	1a9b      	subs	r3, r3, r2
 800c5c6:	9304      	str	r3, [sp, #16]
 800c5c8:	4253      	negs	r3, r2
 800c5ca:	9307      	str	r3, [sp, #28]
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	930a      	str	r3, [sp, #40]	; 0x28
 800c5d0:	e7bf      	b.n	800c552 <_dtoa_r+0x1da>
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	9308      	str	r3, [sp, #32]
 800c5d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	dc55      	bgt.n	800c688 <_dtoa_r+0x310>
 800c5dc:	2301      	movs	r3, #1
 800c5de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	9209      	str	r2, [sp, #36]	; 0x24
 800c5e6:	e00c      	b.n	800c602 <_dtoa_r+0x28a>
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	e7f3      	b.n	800c5d4 <_dtoa_r+0x25c>
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5f0:	9308      	str	r3, [sp, #32]
 800c5f2:	9b00      	ldr	r3, [sp, #0]
 800c5f4:	4413      	add	r3, r2
 800c5f6:	9302      	str	r3, [sp, #8]
 800c5f8:	3301      	adds	r3, #1
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	9303      	str	r3, [sp, #12]
 800c5fe:	bfb8      	it	lt
 800c600:	2301      	movlt	r3, #1
 800c602:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c604:	2200      	movs	r2, #0
 800c606:	6042      	str	r2, [r0, #4]
 800c608:	2204      	movs	r2, #4
 800c60a:	f102 0614 	add.w	r6, r2, #20
 800c60e:	429e      	cmp	r6, r3
 800c610:	6841      	ldr	r1, [r0, #4]
 800c612:	d93d      	bls.n	800c690 <_dtoa_r+0x318>
 800c614:	4620      	mov	r0, r4
 800c616:	f001 fa49 	bl	800daac <_Balloc>
 800c61a:	9001      	str	r0, [sp, #4]
 800c61c:	2800      	cmp	r0, #0
 800c61e:	d13b      	bne.n	800c698 <_dtoa_r+0x320>
 800c620:	4b11      	ldr	r3, [pc, #68]	; (800c668 <_dtoa_r+0x2f0>)
 800c622:	4602      	mov	r2, r0
 800c624:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c628:	e6c0      	b.n	800c3ac <_dtoa_r+0x34>
 800c62a:	2301      	movs	r3, #1
 800c62c:	e7df      	b.n	800c5ee <_dtoa_r+0x276>
 800c62e:	bf00      	nop
 800c630:	636f4361 	.word	0x636f4361
 800c634:	3fd287a7 	.word	0x3fd287a7
 800c638:	8b60c8b3 	.word	0x8b60c8b3
 800c63c:	3fc68a28 	.word	0x3fc68a28
 800c640:	509f79fb 	.word	0x509f79fb
 800c644:	3fd34413 	.word	0x3fd34413
 800c648:	08011306 	.word	0x08011306
 800c64c:	0801131d 	.word	0x0801131d
 800c650:	7ff00000 	.word	0x7ff00000
 800c654:	08011302 	.word	0x08011302
 800c658:	080112f9 	.word	0x080112f9
 800c65c:	08011181 	.word	0x08011181
 800c660:	3ff80000 	.word	0x3ff80000
 800c664:	080114f0 	.word	0x080114f0
 800c668:	08011378 	.word	0x08011378
 800c66c:	2501      	movs	r5, #1
 800c66e:	2300      	movs	r3, #0
 800c670:	9306      	str	r3, [sp, #24]
 800c672:	9508      	str	r5, [sp, #32]
 800c674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c678:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c67c:	2200      	movs	r2, #0
 800c67e:	2312      	movs	r3, #18
 800c680:	e7b0      	b.n	800c5e4 <_dtoa_r+0x26c>
 800c682:	2301      	movs	r3, #1
 800c684:	9308      	str	r3, [sp, #32]
 800c686:	e7f5      	b.n	800c674 <_dtoa_r+0x2fc>
 800c688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c68a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c68e:	e7b8      	b.n	800c602 <_dtoa_r+0x28a>
 800c690:	3101      	adds	r1, #1
 800c692:	6041      	str	r1, [r0, #4]
 800c694:	0052      	lsls	r2, r2, #1
 800c696:	e7b8      	b.n	800c60a <_dtoa_r+0x292>
 800c698:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c69a:	9a01      	ldr	r2, [sp, #4]
 800c69c:	601a      	str	r2, [r3, #0]
 800c69e:	9b03      	ldr	r3, [sp, #12]
 800c6a0:	2b0e      	cmp	r3, #14
 800c6a2:	f200 809d 	bhi.w	800c7e0 <_dtoa_r+0x468>
 800c6a6:	2d00      	cmp	r5, #0
 800c6a8:	f000 809a 	beq.w	800c7e0 <_dtoa_r+0x468>
 800c6ac:	9b00      	ldr	r3, [sp, #0]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	dd32      	ble.n	800c718 <_dtoa_r+0x3a0>
 800c6b2:	4ab7      	ldr	r2, [pc, #732]	; (800c990 <_dtoa_r+0x618>)
 800c6b4:	f003 030f 	and.w	r3, r3, #15
 800c6b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c6bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c6c0:	9b00      	ldr	r3, [sp, #0]
 800c6c2:	05d8      	lsls	r0, r3, #23
 800c6c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c6c8:	d516      	bpl.n	800c6f8 <_dtoa_r+0x380>
 800c6ca:	4bb2      	ldr	r3, [pc, #712]	; (800c994 <_dtoa_r+0x61c>)
 800c6cc:	ec51 0b19 	vmov	r0, r1, d9
 800c6d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c6d4:	f7f4 f8da 	bl	800088c <__aeabi_ddiv>
 800c6d8:	f007 070f 	and.w	r7, r7, #15
 800c6dc:	4682      	mov	sl, r0
 800c6de:	468b      	mov	fp, r1
 800c6e0:	2503      	movs	r5, #3
 800c6e2:	4eac      	ldr	r6, [pc, #688]	; (800c994 <_dtoa_r+0x61c>)
 800c6e4:	b957      	cbnz	r7, 800c6fc <_dtoa_r+0x384>
 800c6e6:	4642      	mov	r2, r8
 800c6e8:	464b      	mov	r3, r9
 800c6ea:	4650      	mov	r0, sl
 800c6ec:	4659      	mov	r1, fp
 800c6ee:	f7f4 f8cd 	bl	800088c <__aeabi_ddiv>
 800c6f2:	4682      	mov	sl, r0
 800c6f4:	468b      	mov	fp, r1
 800c6f6:	e028      	b.n	800c74a <_dtoa_r+0x3d2>
 800c6f8:	2502      	movs	r5, #2
 800c6fa:	e7f2      	b.n	800c6e2 <_dtoa_r+0x36a>
 800c6fc:	07f9      	lsls	r1, r7, #31
 800c6fe:	d508      	bpl.n	800c712 <_dtoa_r+0x39a>
 800c700:	4640      	mov	r0, r8
 800c702:	4649      	mov	r1, r9
 800c704:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c708:	f7f3 ff96 	bl	8000638 <__aeabi_dmul>
 800c70c:	3501      	adds	r5, #1
 800c70e:	4680      	mov	r8, r0
 800c710:	4689      	mov	r9, r1
 800c712:	107f      	asrs	r7, r7, #1
 800c714:	3608      	adds	r6, #8
 800c716:	e7e5      	b.n	800c6e4 <_dtoa_r+0x36c>
 800c718:	f000 809b 	beq.w	800c852 <_dtoa_r+0x4da>
 800c71c:	9b00      	ldr	r3, [sp, #0]
 800c71e:	4f9d      	ldr	r7, [pc, #628]	; (800c994 <_dtoa_r+0x61c>)
 800c720:	425e      	negs	r6, r3
 800c722:	4b9b      	ldr	r3, [pc, #620]	; (800c990 <_dtoa_r+0x618>)
 800c724:	f006 020f 	and.w	r2, r6, #15
 800c728:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c730:	ec51 0b19 	vmov	r0, r1, d9
 800c734:	f7f3 ff80 	bl	8000638 <__aeabi_dmul>
 800c738:	1136      	asrs	r6, r6, #4
 800c73a:	4682      	mov	sl, r0
 800c73c:	468b      	mov	fp, r1
 800c73e:	2300      	movs	r3, #0
 800c740:	2502      	movs	r5, #2
 800c742:	2e00      	cmp	r6, #0
 800c744:	d17a      	bne.n	800c83c <_dtoa_r+0x4c4>
 800c746:	2b00      	cmp	r3, #0
 800c748:	d1d3      	bne.n	800c6f2 <_dtoa_r+0x37a>
 800c74a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	f000 8082 	beq.w	800c856 <_dtoa_r+0x4de>
 800c752:	4b91      	ldr	r3, [pc, #580]	; (800c998 <_dtoa_r+0x620>)
 800c754:	2200      	movs	r2, #0
 800c756:	4650      	mov	r0, sl
 800c758:	4659      	mov	r1, fp
 800c75a:	f7f4 f9df 	bl	8000b1c <__aeabi_dcmplt>
 800c75e:	2800      	cmp	r0, #0
 800c760:	d079      	beq.n	800c856 <_dtoa_r+0x4de>
 800c762:	9b03      	ldr	r3, [sp, #12]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d076      	beq.n	800c856 <_dtoa_r+0x4de>
 800c768:	9b02      	ldr	r3, [sp, #8]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	dd36      	ble.n	800c7dc <_dtoa_r+0x464>
 800c76e:	9b00      	ldr	r3, [sp, #0]
 800c770:	4650      	mov	r0, sl
 800c772:	4659      	mov	r1, fp
 800c774:	1e5f      	subs	r7, r3, #1
 800c776:	2200      	movs	r2, #0
 800c778:	4b88      	ldr	r3, [pc, #544]	; (800c99c <_dtoa_r+0x624>)
 800c77a:	f7f3 ff5d 	bl	8000638 <__aeabi_dmul>
 800c77e:	9e02      	ldr	r6, [sp, #8]
 800c780:	4682      	mov	sl, r0
 800c782:	468b      	mov	fp, r1
 800c784:	3501      	adds	r5, #1
 800c786:	4628      	mov	r0, r5
 800c788:	f7f3 feec 	bl	8000564 <__aeabi_i2d>
 800c78c:	4652      	mov	r2, sl
 800c78e:	465b      	mov	r3, fp
 800c790:	f7f3 ff52 	bl	8000638 <__aeabi_dmul>
 800c794:	4b82      	ldr	r3, [pc, #520]	; (800c9a0 <_dtoa_r+0x628>)
 800c796:	2200      	movs	r2, #0
 800c798:	f7f3 fd98 	bl	80002cc <__adddf3>
 800c79c:	46d0      	mov	r8, sl
 800c79e:	46d9      	mov	r9, fp
 800c7a0:	4682      	mov	sl, r0
 800c7a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c7a6:	2e00      	cmp	r6, #0
 800c7a8:	d158      	bne.n	800c85c <_dtoa_r+0x4e4>
 800c7aa:	4b7e      	ldr	r3, [pc, #504]	; (800c9a4 <_dtoa_r+0x62c>)
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	4640      	mov	r0, r8
 800c7b0:	4649      	mov	r1, r9
 800c7b2:	f7f3 fd89 	bl	80002c8 <__aeabi_dsub>
 800c7b6:	4652      	mov	r2, sl
 800c7b8:	465b      	mov	r3, fp
 800c7ba:	4680      	mov	r8, r0
 800c7bc:	4689      	mov	r9, r1
 800c7be:	f7f4 f9cb 	bl	8000b58 <__aeabi_dcmpgt>
 800c7c2:	2800      	cmp	r0, #0
 800c7c4:	f040 8295 	bne.w	800ccf2 <_dtoa_r+0x97a>
 800c7c8:	4652      	mov	r2, sl
 800c7ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c7ce:	4640      	mov	r0, r8
 800c7d0:	4649      	mov	r1, r9
 800c7d2:	f7f4 f9a3 	bl	8000b1c <__aeabi_dcmplt>
 800c7d6:	2800      	cmp	r0, #0
 800c7d8:	f040 8289 	bne.w	800ccee <_dtoa_r+0x976>
 800c7dc:	ec5b ab19 	vmov	sl, fp, d9
 800c7e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	f2c0 8148 	blt.w	800ca78 <_dtoa_r+0x700>
 800c7e8:	9a00      	ldr	r2, [sp, #0]
 800c7ea:	2a0e      	cmp	r2, #14
 800c7ec:	f300 8144 	bgt.w	800ca78 <_dtoa_r+0x700>
 800c7f0:	4b67      	ldr	r3, [pc, #412]	; (800c990 <_dtoa_r+0x618>)
 800c7f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c7fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	f280 80d5 	bge.w	800c9ac <_dtoa_r+0x634>
 800c802:	9b03      	ldr	r3, [sp, #12]
 800c804:	2b00      	cmp	r3, #0
 800c806:	f300 80d1 	bgt.w	800c9ac <_dtoa_r+0x634>
 800c80a:	f040 826f 	bne.w	800ccec <_dtoa_r+0x974>
 800c80e:	4b65      	ldr	r3, [pc, #404]	; (800c9a4 <_dtoa_r+0x62c>)
 800c810:	2200      	movs	r2, #0
 800c812:	4640      	mov	r0, r8
 800c814:	4649      	mov	r1, r9
 800c816:	f7f3 ff0f 	bl	8000638 <__aeabi_dmul>
 800c81a:	4652      	mov	r2, sl
 800c81c:	465b      	mov	r3, fp
 800c81e:	f7f4 f991 	bl	8000b44 <__aeabi_dcmpge>
 800c822:	9e03      	ldr	r6, [sp, #12]
 800c824:	4637      	mov	r7, r6
 800c826:	2800      	cmp	r0, #0
 800c828:	f040 8245 	bne.w	800ccb6 <_dtoa_r+0x93e>
 800c82c:	9d01      	ldr	r5, [sp, #4]
 800c82e:	2331      	movs	r3, #49	; 0x31
 800c830:	f805 3b01 	strb.w	r3, [r5], #1
 800c834:	9b00      	ldr	r3, [sp, #0]
 800c836:	3301      	adds	r3, #1
 800c838:	9300      	str	r3, [sp, #0]
 800c83a:	e240      	b.n	800ccbe <_dtoa_r+0x946>
 800c83c:	07f2      	lsls	r2, r6, #31
 800c83e:	d505      	bpl.n	800c84c <_dtoa_r+0x4d4>
 800c840:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c844:	f7f3 fef8 	bl	8000638 <__aeabi_dmul>
 800c848:	3501      	adds	r5, #1
 800c84a:	2301      	movs	r3, #1
 800c84c:	1076      	asrs	r6, r6, #1
 800c84e:	3708      	adds	r7, #8
 800c850:	e777      	b.n	800c742 <_dtoa_r+0x3ca>
 800c852:	2502      	movs	r5, #2
 800c854:	e779      	b.n	800c74a <_dtoa_r+0x3d2>
 800c856:	9f00      	ldr	r7, [sp, #0]
 800c858:	9e03      	ldr	r6, [sp, #12]
 800c85a:	e794      	b.n	800c786 <_dtoa_r+0x40e>
 800c85c:	9901      	ldr	r1, [sp, #4]
 800c85e:	4b4c      	ldr	r3, [pc, #304]	; (800c990 <_dtoa_r+0x618>)
 800c860:	4431      	add	r1, r6
 800c862:	910d      	str	r1, [sp, #52]	; 0x34
 800c864:	9908      	ldr	r1, [sp, #32]
 800c866:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c86a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c86e:	2900      	cmp	r1, #0
 800c870:	d043      	beq.n	800c8fa <_dtoa_r+0x582>
 800c872:	494d      	ldr	r1, [pc, #308]	; (800c9a8 <_dtoa_r+0x630>)
 800c874:	2000      	movs	r0, #0
 800c876:	f7f4 f809 	bl	800088c <__aeabi_ddiv>
 800c87a:	4652      	mov	r2, sl
 800c87c:	465b      	mov	r3, fp
 800c87e:	f7f3 fd23 	bl	80002c8 <__aeabi_dsub>
 800c882:	9d01      	ldr	r5, [sp, #4]
 800c884:	4682      	mov	sl, r0
 800c886:	468b      	mov	fp, r1
 800c888:	4649      	mov	r1, r9
 800c88a:	4640      	mov	r0, r8
 800c88c:	f7f4 f984 	bl	8000b98 <__aeabi_d2iz>
 800c890:	4606      	mov	r6, r0
 800c892:	f7f3 fe67 	bl	8000564 <__aeabi_i2d>
 800c896:	4602      	mov	r2, r0
 800c898:	460b      	mov	r3, r1
 800c89a:	4640      	mov	r0, r8
 800c89c:	4649      	mov	r1, r9
 800c89e:	f7f3 fd13 	bl	80002c8 <__aeabi_dsub>
 800c8a2:	3630      	adds	r6, #48	; 0x30
 800c8a4:	f805 6b01 	strb.w	r6, [r5], #1
 800c8a8:	4652      	mov	r2, sl
 800c8aa:	465b      	mov	r3, fp
 800c8ac:	4680      	mov	r8, r0
 800c8ae:	4689      	mov	r9, r1
 800c8b0:	f7f4 f934 	bl	8000b1c <__aeabi_dcmplt>
 800c8b4:	2800      	cmp	r0, #0
 800c8b6:	d163      	bne.n	800c980 <_dtoa_r+0x608>
 800c8b8:	4642      	mov	r2, r8
 800c8ba:	464b      	mov	r3, r9
 800c8bc:	4936      	ldr	r1, [pc, #216]	; (800c998 <_dtoa_r+0x620>)
 800c8be:	2000      	movs	r0, #0
 800c8c0:	f7f3 fd02 	bl	80002c8 <__aeabi_dsub>
 800c8c4:	4652      	mov	r2, sl
 800c8c6:	465b      	mov	r3, fp
 800c8c8:	f7f4 f928 	bl	8000b1c <__aeabi_dcmplt>
 800c8cc:	2800      	cmp	r0, #0
 800c8ce:	f040 80b5 	bne.w	800ca3c <_dtoa_r+0x6c4>
 800c8d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8d4:	429d      	cmp	r5, r3
 800c8d6:	d081      	beq.n	800c7dc <_dtoa_r+0x464>
 800c8d8:	4b30      	ldr	r3, [pc, #192]	; (800c99c <_dtoa_r+0x624>)
 800c8da:	2200      	movs	r2, #0
 800c8dc:	4650      	mov	r0, sl
 800c8de:	4659      	mov	r1, fp
 800c8e0:	f7f3 feaa 	bl	8000638 <__aeabi_dmul>
 800c8e4:	4b2d      	ldr	r3, [pc, #180]	; (800c99c <_dtoa_r+0x624>)
 800c8e6:	4682      	mov	sl, r0
 800c8e8:	468b      	mov	fp, r1
 800c8ea:	4640      	mov	r0, r8
 800c8ec:	4649      	mov	r1, r9
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	f7f3 fea2 	bl	8000638 <__aeabi_dmul>
 800c8f4:	4680      	mov	r8, r0
 800c8f6:	4689      	mov	r9, r1
 800c8f8:	e7c6      	b.n	800c888 <_dtoa_r+0x510>
 800c8fa:	4650      	mov	r0, sl
 800c8fc:	4659      	mov	r1, fp
 800c8fe:	f7f3 fe9b 	bl	8000638 <__aeabi_dmul>
 800c902:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c904:	9d01      	ldr	r5, [sp, #4]
 800c906:	930f      	str	r3, [sp, #60]	; 0x3c
 800c908:	4682      	mov	sl, r0
 800c90a:	468b      	mov	fp, r1
 800c90c:	4649      	mov	r1, r9
 800c90e:	4640      	mov	r0, r8
 800c910:	f7f4 f942 	bl	8000b98 <__aeabi_d2iz>
 800c914:	4606      	mov	r6, r0
 800c916:	f7f3 fe25 	bl	8000564 <__aeabi_i2d>
 800c91a:	3630      	adds	r6, #48	; 0x30
 800c91c:	4602      	mov	r2, r0
 800c91e:	460b      	mov	r3, r1
 800c920:	4640      	mov	r0, r8
 800c922:	4649      	mov	r1, r9
 800c924:	f7f3 fcd0 	bl	80002c8 <__aeabi_dsub>
 800c928:	f805 6b01 	strb.w	r6, [r5], #1
 800c92c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c92e:	429d      	cmp	r5, r3
 800c930:	4680      	mov	r8, r0
 800c932:	4689      	mov	r9, r1
 800c934:	f04f 0200 	mov.w	r2, #0
 800c938:	d124      	bne.n	800c984 <_dtoa_r+0x60c>
 800c93a:	4b1b      	ldr	r3, [pc, #108]	; (800c9a8 <_dtoa_r+0x630>)
 800c93c:	4650      	mov	r0, sl
 800c93e:	4659      	mov	r1, fp
 800c940:	f7f3 fcc4 	bl	80002cc <__adddf3>
 800c944:	4602      	mov	r2, r0
 800c946:	460b      	mov	r3, r1
 800c948:	4640      	mov	r0, r8
 800c94a:	4649      	mov	r1, r9
 800c94c:	f7f4 f904 	bl	8000b58 <__aeabi_dcmpgt>
 800c950:	2800      	cmp	r0, #0
 800c952:	d173      	bne.n	800ca3c <_dtoa_r+0x6c4>
 800c954:	4652      	mov	r2, sl
 800c956:	465b      	mov	r3, fp
 800c958:	4913      	ldr	r1, [pc, #76]	; (800c9a8 <_dtoa_r+0x630>)
 800c95a:	2000      	movs	r0, #0
 800c95c:	f7f3 fcb4 	bl	80002c8 <__aeabi_dsub>
 800c960:	4602      	mov	r2, r0
 800c962:	460b      	mov	r3, r1
 800c964:	4640      	mov	r0, r8
 800c966:	4649      	mov	r1, r9
 800c968:	f7f4 f8d8 	bl	8000b1c <__aeabi_dcmplt>
 800c96c:	2800      	cmp	r0, #0
 800c96e:	f43f af35 	beq.w	800c7dc <_dtoa_r+0x464>
 800c972:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c974:	1e6b      	subs	r3, r5, #1
 800c976:	930f      	str	r3, [sp, #60]	; 0x3c
 800c978:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c97c:	2b30      	cmp	r3, #48	; 0x30
 800c97e:	d0f8      	beq.n	800c972 <_dtoa_r+0x5fa>
 800c980:	9700      	str	r7, [sp, #0]
 800c982:	e049      	b.n	800ca18 <_dtoa_r+0x6a0>
 800c984:	4b05      	ldr	r3, [pc, #20]	; (800c99c <_dtoa_r+0x624>)
 800c986:	f7f3 fe57 	bl	8000638 <__aeabi_dmul>
 800c98a:	4680      	mov	r8, r0
 800c98c:	4689      	mov	r9, r1
 800c98e:	e7bd      	b.n	800c90c <_dtoa_r+0x594>
 800c990:	080114f0 	.word	0x080114f0
 800c994:	080114c8 	.word	0x080114c8
 800c998:	3ff00000 	.word	0x3ff00000
 800c99c:	40240000 	.word	0x40240000
 800c9a0:	401c0000 	.word	0x401c0000
 800c9a4:	40140000 	.word	0x40140000
 800c9a8:	3fe00000 	.word	0x3fe00000
 800c9ac:	9d01      	ldr	r5, [sp, #4]
 800c9ae:	4656      	mov	r6, sl
 800c9b0:	465f      	mov	r7, fp
 800c9b2:	4642      	mov	r2, r8
 800c9b4:	464b      	mov	r3, r9
 800c9b6:	4630      	mov	r0, r6
 800c9b8:	4639      	mov	r1, r7
 800c9ba:	f7f3 ff67 	bl	800088c <__aeabi_ddiv>
 800c9be:	f7f4 f8eb 	bl	8000b98 <__aeabi_d2iz>
 800c9c2:	4682      	mov	sl, r0
 800c9c4:	f7f3 fdce 	bl	8000564 <__aeabi_i2d>
 800c9c8:	4642      	mov	r2, r8
 800c9ca:	464b      	mov	r3, r9
 800c9cc:	f7f3 fe34 	bl	8000638 <__aeabi_dmul>
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	460b      	mov	r3, r1
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	4639      	mov	r1, r7
 800c9d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c9dc:	f7f3 fc74 	bl	80002c8 <__aeabi_dsub>
 800c9e0:	f805 6b01 	strb.w	r6, [r5], #1
 800c9e4:	9e01      	ldr	r6, [sp, #4]
 800c9e6:	9f03      	ldr	r7, [sp, #12]
 800c9e8:	1bae      	subs	r6, r5, r6
 800c9ea:	42b7      	cmp	r7, r6
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	460b      	mov	r3, r1
 800c9f0:	d135      	bne.n	800ca5e <_dtoa_r+0x6e6>
 800c9f2:	f7f3 fc6b 	bl	80002cc <__adddf3>
 800c9f6:	4642      	mov	r2, r8
 800c9f8:	464b      	mov	r3, r9
 800c9fa:	4606      	mov	r6, r0
 800c9fc:	460f      	mov	r7, r1
 800c9fe:	f7f4 f8ab 	bl	8000b58 <__aeabi_dcmpgt>
 800ca02:	b9d0      	cbnz	r0, 800ca3a <_dtoa_r+0x6c2>
 800ca04:	4642      	mov	r2, r8
 800ca06:	464b      	mov	r3, r9
 800ca08:	4630      	mov	r0, r6
 800ca0a:	4639      	mov	r1, r7
 800ca0c:	f7f4 f87c 	bl	8000b08 <__aeabi_dcmpeq>
 800ca10:	b110      	cbz	r0, 800ca18 <_dtoa_r+0x6a0>
 800ca12:	f01a 0f01 	tst.w	sl, #1
 800ca16:	d110      	bne.n	800ca3a <_dtoa_r+0x6c2>
 800ca18:	4620      	mov	r0, r4
 800ca1a:	ee18 1a10 	vmov	r1, s16
 800ca1e:	f001 f885 	bl	800db2c <_Bfree>
 800ca22:	2300      	movs	r3, #0
 800ca24:	9800      	ldr	r0, [sp, #0]
 800ca26:	702b      	strb	r3, [r5, #0]
 800ca28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca2a:	3001      	adds	r0, #1
 800ca2c:	6018      	str	r0, [r3, #0]
 800ca2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	f43f acf1 	beq.w	800c418 <_dtoa_r+0xa0>
 800ca36:	601d      	str	r5, [r3, #0]
 800ca38:	e4ee      	b.n	800c418 <_dtoa_r+0xa0>
 800ca3a:	9f00      	ldr	r7, [sp, #0]
 800ca3c:	462b      	mov	r3, r5
 800ca3e:	461d      	mov	r5, r3
 800ca40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca44:	2a39      	cmp	r2, #57	; 0x39
 800ca46:	d106      	bne.n	800ca56 <_dtoa_r+0x6de>
 800ca48:	9a01      	ldr	r2, [sp, #4]
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d1f7      	bne.n	800ca3e <_dtoa_r+0x6c6>
 800ca4e:	9901      	ldr	r1, [sp, #4]
 800ca50:	2230      	movs	r2, #48	; 0x30
 800ca52:	3701      	adds	r7, #1
 800ca54:	700a      	strb	r2, [r1, #0]
 800ca56:	781a      	ldrb	r2, [r3, #0]
 800ca58:	3201      	adds	r2, #1
 800ca5a:	701a      	strb	r2, [r3, #0]
 800ca5c:	e790      	b.n	800c980 <_dtoa_r+0x608>
 800ca5e:	4ba6      	ldr	r3, [pc, #664]	; (800ccf8 <_dtoa_r+0x980>)
 800ca60:	2200      	movs	r2, #0
 800ca62:	f7f3 fde9 	bl	8000638 <__aeabi_dmul>
 800ca66:	2200      	movs	r2, #0
 800ca68:	2300      	movs	r3, #0
 800ca6a:	4606      	mov	r6, r0
 800ca6c:	460f      	mov	r7, r1
 800ca6e:	f7f4 f84b 	bl	8000b08 <__aeabi_dcmpeq>
 800ca72:	2800      	cmp	r0, #0
 800ca74:	d09d      	beq.n	800c9b2 <_dtoa_r+0x63a>
 800ca76:	e7cf      	b.n	800ca18 <_dtoa_r+0x6a0>
 800ca78:	9a08      	ldr	r2, [sp, #32]
 800ca7a:	2a00      	cmp	r2, #0
 800ca7c:	f000 80d7 	beq.w	800cc2e <_dtoa_r+0x8b6>
 800ca80:	9a06      	ldr	r2, [sp, #24]
 800ca82:	2a01      	cmp	r2, #1
 800ca84:	f300 80ba 	bgt.w	800cbfc <_dtoa_r+0x884>
 800ca88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca8a:	2a00      	cmp	r2, #0
 800ca8c:	f000 80b2 	beq.w	800cbf4 <_dtoa_r+0x87c>
 800ca90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ca94:	9e07      	ldr	r6, [sp, #28]
 800ca96:	9d04      	ldr	r5, [sp, #16]
 800ca98:	9a04      	ldr	r2, [sp, #16]
 800ca9a:	441a      	add	r2, r3
 800ca9c:	9204      	str	r2, [sp, #16]
 800ca9e:	9a05      	ldr	r2, [sp, #20]
 800caa0:	2101      	movs	r1, #1
 800caa2:	441a      	add	r2, r3
 800caa4:	4620      	mov	r0, r4
 800caa6:	9205      	str	r2, [sp, #20]
 800caa8:	f001 f942 	bl	800dd30 <__i2b>
 800caac:	4607      	mov	r7, r0
 800caae:	2d00      	cmp	r5, #0
 800cab0:	dd0c      	ble.n	800cacc <_dtoa_r+0x754>
 800cab2:	9b05      	ldr	r3, [sp, #20]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	dd09      	ble.n	800cacc <_dtoa_r+0x754>
 800cab8:	42ab      	cmp	r3, r5
 800caba:	9a04      	ldr	r2, [sp, #16]
 800cabc:	bfa8      	it	ge
 800cabe:	462b      	movge	r3, r5
 800cac0:	1ad2      	subs	r2, r2, r3
 800cac2:	9204      	str	r2, [sp, #16]
 800cac4:	9a05      	ldr	r2, [sp, #20]
 800cac6:	1aed      	subs	r5, r5, r3
 800cac8:	1ad3      	subs	r3, r2, r3
 800caca:	9305      	str	r3, [sp, #20]
 800cacc:	9b07      	ldr	r3, [sp, #28]
 800cace:	b31b      	cbz	r3, 800cb18 <_dtoa_r+0x7a0>
 800cad0:	9b08      	ldr	r3, [sp, #32]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	f000 80af 	beq.w	800cc36 <_dtoa_r+0x8be>
 800cad8:	2e00      	cmp	r6, #0
 800cada:	dd13      	ble.n	800cb04 <_dtoa_r+0x78c>
 800cadc:	4639      	mov	r1, r7
 800cade:	4632      	mov	r2, r6
 800cae0:	4620      	mov	r0, r4
 800cae2:	f001 f9e5 	bl	800deb0 <__pow5mult>
 800cae6:	ee18 2a10 	vmov	r2, s16
 800caea:	4601      	mov	r1, r0
 800caec:	4607      	mov	r7, r0
 800caee:	4620      	mov	r0, r4
 800caf0:	f001 f934 	bl	800dd5c <__multiply>
 800caf4:	ee18 1a10 	vmov	r1, s16
 800caf8:	4680      	mov	r8, r0
 800cafa:	4620      	mov	r0, r4
 800cafc:	f001 f816 	bl	800db2c <_Bfree>
 800cb00:	ee08 8a10 	vmov	s16, r8
 800cb04:	9b07      	ldr	r3, [sp, #28]
 800cb06:	1b9a      	subs	r2, r3, r6
 800cb08:	d006      	beq.n	800cb18 <_dtoa_r+0x7a0>
 800cb0a:	ee18 1a10 	vmov	r1, s16
 800cb0e:	4620      	mov	r0, r4
 800cb10:	f001 f9ce 	bl	800deb0 <__pow5mult>
 800cb14:	ee08 0a10 	vmov	s16, r0
 800cb18:	2101      	movs	r1, #1
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	f001 f908 	bl	800dd30 <__i2b>
 800cb20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	4606      	mov	r6, r0
 800cb26:	f340 8088 	ble.w	800cc3a <_dtoa_r+0x8c2>
 800cb2a:	461a      	mov	r2, r3
 800cb2c:	4601      	mov	r1, r0
 800cb2e:	4620      	mov	r0, r4
 800cb30:	f001 f9be 	bl	800deb0 <__pow5mult>
 800cb34:	9b06      	ldr	r3, [sp, #24]
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	4606      	mov	r6, r0
 800cb3a:	f340 8081 	ble.w	800cc40 <_dtoa_r+0x8c8>
 800cb3e:	f04f 0800 	mov.w	r8, #0
 800cb42:	6933      	ldr	r3, [r6, #16]
 800cb44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cb48:	6918      	ldr	r0, [r3, #16]
 800cb4a:	f001 f8a1 	bl	800dc90 <__hi0bits>
 800cb4e:	f1c0 0020 	rsb	r0, r0, #32
 800cb52:	9b05      	ldr	r3, [sp, #20]
 800cb54:	4418      	add	r0, r3
 800cb56:	f010 001f 	ands.w	r0, r0, #31
 800cb5a:	f000 8092 	beq.w	800cc82 <_dtoa_r+0x90a>
 800cb5e:	f1c0 0320 	rsb	r3, r0, #32
 800cb62:	2b04      	cmp	r3, #4
 800cb64:	f340 808a 	ble.w	800cc7c <_dtoa_r+0x904>
 800cb68:	f1c0 001c 	rsb	r0, r0, #28
 800cb6c:	9b04      	ldr	r3, [sp, #16]
 800cb6e:	4403      	add	r3, r0
 800cb70:	9304      	str	r3, [sp, #16]
 800cb72:	9b05      	ldr	r3, [sp, #20]
 800cb74:	4403      	add	r3, r0
 800cb76:	4405      	add	r5, r0
 800cb78:	9305      	str	r3, [sp, #20]
 800cb7a:	9b04      	ldr	r3, [sp, #16]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	dd07      	ble.n	800cb90 <_dtoa_r+0x818>
 800cb80:	ee18 1a10 	vmov	r1, s16
 800cb84:	461a      	mov	r2, r3
 800cb86:	4620      	mov	r0, r4
 800cb88:	f001 f9ec 	bl	800df64 <__lshift>
 800cb8c:	ee08 0a10 	vmov	s16, r0
 800cb90:	9b05      	ldr	r3, [sp, #20]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	dd05      	ble.n	800cba2 <_dtoa_r+0x82a>
 800cb96:	4631      	mov	r1, r6
 800cb98:	461a      	mov	r2, r3
 800cb9a:	4620      	mov	r0, r4
 800cb9c:	f001 f9e2 	bl	800df64 <__lshift>
 800cba0:	4606      	mov	r6, r0
 800cba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d06e      	beq.n	800cc86 <_dtoa_r+0x90e>
 800cba8:	ee18 0a10 	vmov	r0, s16
 800cbac:	4631      	mov	r1, r6
 800cbae:	f001 fa49 	bl	800e044 <__mcmp>
 800cbb2:	2800      	cmp	r0, #0
 800cbb4:	da67      	bge.n	800cc86 <_dtoa_r+0x90e>
 800cbb6:	9b00      	ldr	r3, [sp, #0]
 800cbb8:	3b01      	subs	r3, #1
 800cbba:	ee18 1a10 	vmov	r1, s16
 800cbbe:	9300      	str	r3, [sp, #0]
 800cbc0:	220a      	movs	r2, #10
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	4620      	mov	r0, r4
 800cbc6:	f000 ffd3 	bl	800db70 <__multadd>
 800cbca:	9b08      	ldr	r3, [sp, #32]
 800cbcc:	ee08 0a10 	vmov	s16, r0
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	f000 81b1 	beq.w	800cf38 <_dtoa_r+0xbc0>
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	4639      	mov	r1, r7
 800cbda:	220a      	movs	r2, #10
 800cbdc:	4620      	mov	r0, r4
 800cbde:	f000 ffc7 	bl	800db70 <__multadd>
 800cbe2:	9b02      	ldr	r3, [sp, #8]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	4607      	mov	r7, r0
 800cbe8:	f300 808e 	bgt.w	800cd08 <_dtoa_r+0x990>
 800cbec:	9b06      	ldr	r3, [sp, #24]
 800cbee:	2b02      	cmp	r3, #2
 800cbf0:	dc51      	bgt.n	800cc96 <_dtoa_r+0x91e>
 800cbf2:	e089      	b.n	800cd08 <_dtoa_r+0x990>
 800cbf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cbf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cbfa:	e74b      	b.n	800ca94 <_dtoa_r+0x71c>
 800cbfc:	9b03      	ldr	r3, [sp, #12]
 800cbfe:	1e5e      	subs	r6, r3, #1
 800cc00:	9b07      	ldr	r3, [sp, #28]
 800cc02:	42b3      	cmp	r3, r6
 800cc04:	bfbf      	itttt	lt
 800cc06:	9b07      	ldrlt	r3, [sp, #28]
 800cc08:	9607      	strlt	r6, [sp, #28]
 800cc0a:	1af2      	sublt	r2, r6, r3
 800cc0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cc0e:	bfb6      	itet	lt
 800cc10:	189b      	addlt	r3, r3, r2
 800cc12:	1b9e      	subge	r6, r3, r6
 800cc14:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cc16:	9b03      	ldr	r3, [sp, #12]
 800cc18:	bfb8      	it	lt
 800cc1a:	2600      	movlt	r6, #0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	bfb7      	itett	lt
 800cc20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cc24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cc28:	1a9d      	sublt	r5, r3, r2
 800cc2a:	2300      	movlt	r3, #0
 800cc2c:	e734      	b.n	800ca98 <_dtoa_r+0x720>
 800cc2e:	9e07      	ldr	r6, [sp, #28]
 800cc30:	9d04      	ldr	r5, [sp, #16]
 800cc32:	9f08      	ldr	r7, [sp, #32]
 800cc34:	e73b      	b.n	800caae <_dtoa_r+0x736>
 800cc36:	9a07      	ldr	r2, [sp, #28]
 800cc38:	e767      	b.n	800cb0a <_dtoa_r+0x792>
 800cc3a:	9b06      	ldr	r3, [sp, #24]
 800cc3c:	2b01      	cmp	r3, #1
 800cc3e:	dc18      	bgt.n	800cc72 <_dtoa_r+0x8fa>
 800cc40:	f1ba 0f00 	cmp.w	sl, #0
 800cc44:	d115      	bne.n	800cc72 <_dtoa_r+0x8fa>
 800cc46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc4a:	b993      	cbnz	r3, 800cc72 <_dtoa_r+0x8fa>
 800cc4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cc50:	0d1b      	lsrs	r3, r3, #20
 800cc52:	051b      	lsls	r3, r3, #20
 800cc54:	b183      	cbz	r3, 800cc78 <_dtoa_r+0x900>
 800cc56:	9b04      	ldr	r3, [sp, #16]
 800cc58:	3301      	adds	r3, #1
 800cc5a:	9304      	str	r3, [sp, #16]
 800cc5c:	9b05      	ldr	r3, [sp, #20]
 800cc5e:	3301      	adds	r3, #1
 800cc60:	9305      	str	r3, [sp, #20]
 800cc62:	f04f 0801 	mov.w	r8, #1
 800cc66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	f47f af6a 	bne.w	800cb42 <_dtoa_r+0x7ca>
 800cc6e:	2001      	movs	r0, #1
 800cc70:	e76f      	b.n	800cb52 <_dtoa_r+0x7da>
 800cc72:	f04f 0800 	mov.w	r8, #0
 800cc76:	e7f6      	b.n	800cc66 <_dtoa_r+0x8ee>
 800cc78:	4698      	mov	r8, r3
 800cc7a:	e7f4      	b.n	800cc66 <_dtoa_r+0x8ee>
 800cc7c:	f43f af7d 	beq.w	800cb7a <_dtoa_r+0x802>
 800cc80:	4618      	mov	r0, r3
 800cc82:	301c      	adds	r0, #28
 800cc84:	e772      	b.n	800cb6c <_dtoa_r+0x7f4>
 800cc86:	9b03      	ldr	r3, [sp, #12]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	dc37      	bgt.n	800ccfc <_dtoa_r+0x984>
 800cc8c:	9b06      	ldr	r3, [sp, #24]
 800cc8e:	2b02      	cmp	r3, #2
 800cc90:	dd34      	ble.n	800ccfc <_dtoa_r+0x984>
 800cc92:	9b03      	ldr	r3, [sp, #12]
 800cc94:	9302      	str	r3, [sp, #8]
 800cc96:	9b02      	ldr	r3, [sp, #8]
 800cc98:	b96b      	cbnz	r3, 800ccb6 <_dtoa_r+0x93e>
 800cc9a:	4631      	mov	r1, r6
 800cc9c:	2205      	movs	r2, #5
 800cc9e:	4620      	mov	r0, r4
 800cca0:	f000 ff66 	bl	800db70 <__multadd>
 800cca4:	4601      	mov	r1, r0
 800cca6:	4606      	mov	r6, r0
 800cca8:	ee18 0a10 	vmov	r0, s16
 800ccac:	f001 f9ca 	bl	800e044 <__mcmp>
 800ccb0:	2800      	cmp	r0, #0
 800ccb2:	f73f adbb 	bgt.w	800c82c <_dtoa_r+0x4b4>
 800ccb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccb8:	9d01      	ldr	r5, [sp, #4]
 800ccba:	43db      	mvns	r3, r3
 800ccbc:	9300      	str	r3, [sp, #0]
 800ccbe:	f04f 0800 	mov.w	r8, #0
 800ccc2:	4631      	mov	r1, r6
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	f000 ff31 	bl	800db2c <_Bfree>
 800ccca:	2f00      	cmp	r7, #0
 800cccc:	f43f aea4 	beq.w	800ca18 <_dtoa_r+0x6a0>
 800ccd0:	f1b8 0f00 	cmp.w	r8, #0
 800ccd4:	d005      	beq.n	800cce2 <_dtoa_r+0x96a>
 800ccd6:	45b8      	cmp	r8, r7
 800ccd8:	d003      	beq.n	800cce2 <_dtoa_r+0x96a>
 800ccda:	4641      	mov	r1, r8
 800ccdc:	4620      	mov	r0, r4
 800ccde:	f000 ff25 	bl	800db2c <_Bfree>
 800cce2:	4639      	mov	r1, r7
 800cce4:	4620      	mov	r0, r4
 800cce6:	f000 ff21 	bl	800db2c <_Bfree>
 800ccea:	e695      	b.n	800ca18 <_dtoa_r+0x6a0>
 800ccec:	2600      	movs	r6, #0
 800ccee:	4637      	mov	r7, r6
 800ccf0:	e7e1      	b.n	800ccb6 <_dtoa_r+0x93e>
 800ccf2:	9700      	str	r7, [sp, #0]
 800ccf4:	4637      	mov	r7, r6
 800ccf6:	e599      	b.n	800c82c <_dtoa_r+0x4b4>
 800ccf8:	40240000 	.word	0x40240000
 800ccfc:	9b08      	ldr	r3, [sp, #32]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	f000 80ca 	beq.w	800ce98 <_dtoa_r+0xb20>
 800cd04:	9b03      	ldr	r3, [sp, #12]
 800cd06:	9302      	str	r3, [sp, #8]
 800cd08:	2d00      	cmp	r5, #0
 800cd0a:	dd05      	ble.n	800cd18 <_dtoa_r+0x9a0>
 800cd0c:	4639      	mov	r1, r7
 800cd0e:	462a      	mov	r2, r5
 800cd10:	4620      	mov	r0, r4
 800cd12:	f001 f927 	bl	800df64 <__lshift>
 800cd16:	4607      	mov	r7, r0
 800cd18:	f1b8 0f00 	cmp.w	r8, #0
 800cd1c:	d05b      	beq.n	800cdd6 <_dtoa_r+0xa5e>
 800cd1e:	6879      	ldr	r1, [r7, #4]
 800cd20:	4620      	mov	r0, r4
 800cd22:	f000 fec3 	bl	800daac <_Balloc>
 800cd26:	4605      	mov	r5, r0
 800cd28:	b928      	cbnz	r0, 800cd36 <_dtoa_r+0x9be>
 800cd2a:	4b87      	ldr	r3, [pc, #540]	; (800cf48 <_dtoa_r+0xbd0>)
 800cd2c:	4602      	mov	r2, r0
 800cd2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cd32:	f7ff bb3b 	b.w	800c3ac <_dtoa_r+0x34>
 800cd36:	693a      	ldr	r2, [r7, #16]
 800cd38:	3202      	adds	r2, #2
 800cd3a:	0092      	lsls	r2, r2, #2
 800cd3c:	f107 010c 	add.w	r1, r7, #12
 800cd40:	300c      	adds	r0, #12
 800cd42:	f7fd fe03 	bl	800a94c <memcpy>
 800cd46:	2201      	movs	r2, #1
 800cd48:	4629      	mov	r1, r5
 800cd4a:	4620      	mov	r0, r4
 800cd4c:	f001 f90a 	bl	800df64 <__lshift>
 800cd50:	9b01      	ldr	r3, [sp, #4]
 800cd52:	f103 0901 	add.w	r9, r3, #1
 800cd56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cd5a:	4413      	add	r3, r2
 800cd5c:	9305      	str	r3, [sp, #20]
 800cd5e:	f00a 0301 	and.w	r3, sl, #1
 800cd62:	46b8      	mov	r8, r7
 800cd64:	9304      	str	r3, [sp, #16]
 800cd66:	4607      	mov	r7, r0
 800cd68:	4631      	mov	r1, r6
 800cd6a:	ee18 0a10 	vmov	r0, s16
 800cd6e:	f7ff fa75 	bl	800c25c <quorem>
 800cd72:	4641      	mov	r1, r8
 800cd74:	9002      	str	r0, [sp, #8]
 800cd76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cd7a:	ee18 0a10 	vmov	r0, s16
 800cd7e:	f001 f961 	bl	800e044 <__mcmp>
 800cd82:	463a      	mov	r2, r7
 800cd84:	9003      	str	r0, [sp, #12]
 800cd86:	4631      	mov	r1, r6
 800cd88:	4620      	mov	r0, r4
 800cd8a:	f001 f977 	bl	800e07c <__mdiff>
 800cd8e:	68c2      	ldr	r2, [r0, #12]
 800cd90:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800cd94:	4605      	mov	r5, r0
 800cd96:	bb02      	cbnz	r2, 800cdda <_dtoa_r+0xa62>
 800cd98:	4601      	mov	r1, r0
 800cd9a:	ee18 0a10 	vmov	r0, s16
 800cd9e:	f001 f951 	bl	800e044 <__mcmp>
 800cda2:	4602      	mov	r2, r0
 800cda4:	4629      	mov	r1, r5
 800cda6:	4620      	mov	r0, r4
 800cda8:	9207      	str	r2, [sp, #28]
 800cdaa:	f000 febf 	bl	800db2c <_Bfree>
 800cdae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cdb2:	ea43 0102 	orr.w	r1, r3, r2
 800cdb6:	9b04      	ldr	r3, [sp, #16]
 800cdb8:	430b      	orrs	r3, r1
 800cdba:	464d      	mov	r5, r9
 800cdbc:	d10f      	bne.n	800cdde <_dtoa_r+0xa66>
 800cdbe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cdc2:	d02a      	beq.n	800ce1a <_dtoa_r+0xaa2>
 800cdc4:	9b03      	ldr	r3, [sp, #12]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	dd02      	ble.n	800cdd0 <_dtoa_r+0xa58>
 800cdca:	9b02      	ldr	r3, [sp, #8]
 800cdcc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cdd0:	f88b a000 	strb.w	sl, [fp]
 800cdd4:	e775      	b.n	800ccc2 <_dtoa_r+0x94a>
 800cdd6:	4638      	mov	r0, r7
 800cdd8:	e7ba      	b.n	800cd50 <_dtoa_r+0x9d8>
 800cdda:	2201      	movs	r2, #1
 800cddc:	e7e2      	b.n	800cda4 <_dtoa_r+0xa2c>
 800cdde:	9b03      	ldr	r3, [sp, #12]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	db04      	blt.n	800cdee <_dtoa_r+0xa76>
 800cde4:	9906      	ldr	r1, [sp, #24]
 800cde6:	430b      	orrs	r3, r1
 800cde8:	9904      	ldr	r1, [sp, #16]
 800cdea:	430b      	orrs	r3, r1
 800cdec:	d122      	bne.n	800ce34 <_dtoa_r+0xabc>
 800cdee:	2a00      	cmp	r2, #0
 800cdf0:	ddee      	ble.n	800cdd0 <_dtoa_r+0xa58>
 800cdf2:	ee18 1a10 	vmov	r1, s16
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	4620      	mov	r0, r4
 800cdfa:	f001 f8b3 	bl	800df64 <__lshift>
 800cdfe:	4631      	mov	r1, r6
 800ce00:	ee08 0a10 	vmov	s16, r0
 800ce04:	f001 f91e 	bl	800e044 <__mcmp>
 800ce08:	2800      	cmp	r0, #0
 800ce0a:	dc03      	bgt.n	800ce14 <_dtoa_r+0xa9c>
 800ce0c:	d1e0      	bne.n	800cdd0 <_dtoa_r+0xa58>
 800ce0e:	f01a 0f01 	tst.w	sl, #1
 800ce12:	d0dd      	beq.n	800cdd0 <_dtoa_r+0xa58>
 800ce14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ce18:	d1d7      	bne.n	800cdca <_dtoa_r+0xa52>
 800ce1a:	2339      	movs	r3, #57	; 0x39
 800ce1c:	f88b 3000 	strb.w	r3, [fp]
 800ce20:	462b      	mov	r3, r5
 800ce22:	461d      	mov	r5, r3
 800ce24:	3b01      	subs	r3, #1
 800ce26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ce2a:	2a39      	cmp	r2, #57	; 0x39
 800ce2c:	d071      	beq.n	800cf12 <_dtoa_r+0xb9a>
 800ce2e:	3201      	adds	r2, #1
 800ce30:	701a      	strb	r2, [r3, #0]
 800ce32:	e746      	b.n	800ccc2 <_dtoa_r+0x94a>
 800ce34:	2a00      	cmp	r2, #0
 800ce36:	dd07      	ble.n	800ce48 <_dtoa_r+0xad0>
 800ce38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ce3c:	d0ed      	beq.n	800ce1a <_dtoa_r+0xaa2>
 800ce3e:	f10a 0301 	add.w	r3, sl, #1
 800ce42:	f88b 3000 	strb.w	r3, [fp]
 800ce46:	e73c      	b.n	800ccc2 <_dtoa_r+0x94a>
 800ce48:	9b05      	ldr	r3, [sp, #20]
 800ce4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ce4e:	4599      	cmp	r9, r3
 800ce50:	d047      	beq.n	800cee2 <_dtoa_r+0xb6a>
 800ce52:	ee18 1a10 	vmov	r1, s16
 800ce56:	2300      	movs	r3, #0
 800ce58:	220a      	movs	r2, #10
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	f000 fe88 	bl	800db70 <__multadd>
 800ce60:	45b8      	cmp	r8, r7
 800ce62:	ee08 0a10 	vmov	s16, r0
 800ce66:	f04f 0300 	mov.w	r3, #0
 800ce6a:	f04f 020a 	mov.w	r2, #10
 800ce6e:	4641      	mov	r1, r8
 800ce70:	4620      	mov	r0, r4
 800ce72:	d106      	bne.n	800ce82 <_dtoa_r+0xb0a>
 800ce74:	f000 fe7c 	bl	800db70 <__multadd>
 800ce78:	4680      	mov	r8, r0
 800ce7a:	4607      	mov	r7, r0
 800ce7c:	f109 0901 	add.w	r9, r9, #1
 800ce80:	e772      	b.n	800cd68 <_dtoa_r+0x9f0>
 800ce82:	f000 fe75 	bl	800db70 <__multadd>
 800ce86:	4639      	mov	r1, r7
 800ce88:	4680      	mov	r8, r0
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	220a      	movs	r2, #10
 800ce8e:	4620      	mov	r0, r4
 800ce90:	f000 fe6e 	bl	800db70 <__multadd>
 800ce94:	4607      	mov	r7, r0
 800ce96:	e7f1      	b.n	800ce7c <_dtoa_r+0xb04>
 800ce98:	9b03      	ldr	r3, [sp, #12]
 800ce9a:	9302      	str	r3, [sp, #8]
 800ce9c:	9d01      	ldr	r5, [sp, #4]
 800ce9e:	ee18 0a10 	vmov	r0, s16
 800cea2:	4631      	mov	r1, r6
 800cea4:	f7ff f9da 	bl	800c25c <quorem>
 800cea8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ceac:	9b01      	ldr	r3, [sp, #4]
 800ceae:	f805 ab01 	strb.w	sl, [r5], #1
 800ceb2:	1aea      	subs	r2, r5, r3
 800ceb4:	9b02      	ldr	r3, [sp, #8]
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	dd09      	ble.n	800cece <_dtoa_r+0xb56>
 800ceba:	ee18 1a10 	vmov	r1, s16
 800cebe:	2300      	movs	r3, #0
 800cec0:	220a      	movs	r2, #10
 800cec2:	4620      	mov	r0, r4
 800cec4:	f000 fe54 	bl	800db70 <__multadd>
 800cec8:	ee08 0a10 	vmov	s16, r0
 800cecc:	e7e7      	b.n	800ce9e <_dtoa_r+0xb26>
 800cece:	9b02      	ldr	r3, [sp, #8]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	bfc8      	it	gt
 800ced4:	461d      	movgt	r5, r3
 800ced6:	9b01      	ldr	r3, [sp, #4]
 800ced8:	bfd8      	it	le
 800ceda:	2501      	movle	r5, #1
 800cedc:	441d      	add	r5, r3
 800cede:	f04f 0800 	mov.w	r8, #0
 800cee2:	ee18 1a10 	vmov	r1, s16
 800cee6:	2201      	movs	r2, #1
 800cee8:	4620      	mov	r0, r4
 800ceea:	f001 f83b 	bl	800df64 <__lshift>
 800ceee:	4631      	mov	r1, r6
 800cef0:	ee08 0a10 	vmov	s16, r0
 800cef4:	f001 f8a6 	bl	800e044 <__mcmp>
 800cef8:	2800      	cmp	r0, #0
 800cefa:	dc91      	bgt.n	800ce20 <_dtoa_r+0xaa8>
 800cefc:	d102      	bne.n	800cf04 <_dtoa_r+0xb8c>
 800cefe:	f01a 0f01 	tst.w	sl, #1
 800cf02:	d18d      	bne.n	800ce20 <_dtoa_r+0xaa8>
 800cf04:	462b      	mov	r3, r5
 800cf06:	461d      	mov	r5, r3
 800cf08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf0c:	2a30      	cmp	r2, #48	; 0x30
 800cf0e:	d0fa      	beq.n	800cf06 <_dtoa_r+0xb8e>
 800cf10:	e6d7      	b.n	800ccc2 <_dtoa_r+0x94a>
 800cf12:	9a01      	ldr	r2, [sp, #4]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d184      	bne.n	800ce22 <_dtoa_r+0xaaa>
 800cf18:	9b00      	ldr	r3, [sp, #0]
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	9300      	str	r3, [sp, #0]
 800cf1e:	2331      	movs	r3, #49	; 0x31
 800cf20:	7013      	strb	r3, [r2, #0]
 800cf22:	e6ce      	b.n	800ccc2 <_dtoa_r+0x94a>
 800cf24:	4b09      	ldr	r3, [pc, #36]	; (800cf4c <_dtoa_r+0xbd4>)
 800cf26:	f7ff ba95 	b.w	800c454 <_dtoa_r+0xdc>
 800cf2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	f47f aa6e 	bne.w	800c40e <_dtoa_r+0x96>
 800cf32:	4b07      	ldr	r3, [pc, #28]	; (800cf50 <_dtoa_r+0xbd8>)
 800cf34:	f7ff ba8e 	b.w	800c454 <_dtoa_r+0xdc>
 800cf38:	9b02      	ldr	r3, [sp, #8]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	dcae      	bgt.n	800ce9c <_dtoa_r+0xb24>
 800cf3e:	9b06      	ldr	r3, [sp, #24]
 800cf40:	2b02      	cmp	r3, #2
 800cf42:	f73f aea8 	bgt.w	800cc96 <_dtoa_r+0x91e>
 800cf46:	e7a9      	b.n	800ce9c <_dtoa_r+0xb24>
 800cf48:	08011378 	.word	0x08011378
 800cf4c:	08011180 	.word	0x08011180
 800cf50:	080112f9 	.word	0x080112f9

0800cf54 <__sflush_r>:
 800cf54:	898a      	ldrh	r2, [r1, #12]
 800cf56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf5a:	4605      	mov	r5, r0
 800cf5c:	0710      	lsls	r0, r2, #28
 800cf5e:	460c      	mov	r4, r1
 800cf60:	d458      	bmi.n	800d014 <__sflush_r+0xc0>
 800cf62:	684b      	ldr	r3, [r1, #4]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	dc05      	bgt.n	800cf74 <__sflush_r+0x20>
 800cf68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	dc02      	bgt.n	800cf74 <__sflush_r+0x20>
 800cf6e:	2000      	movs	r0, #0
 800cf70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf76:	2e00      	cmp	r6, #0
 800cf78:	d0f9      	beq.n	800cf6e <__sflush_r+0x1a>
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf80:	682f      	ldr	r7, [r5, #0]
 800cf82:	602b      	str	r3, [r5, #0]
 800cf84:	d032      	beq.n	800cfec <__sflush_r+0x98>
 800cf86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf88:	89a3      	ldrh	r3, [r4, #12]
 800cf8a:	075a      	lsls	r2, r3, #29
 800cf8c:	d505      	bpl.n	800cf9a <__sflush_r+0x46>
 800cf8e:	6863      	ldr	r3, [r4, #4]
 800cf90:	1ac0      	subs	r0, r0, r3
 800cf92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf94:	b10b      	cbz	r3, 800cf9a <__sflush_r+0x46>
 800cf96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf98:	1ac0      	subs	r0, r0, r3
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	4602      	mov	r2, r0
 800cf9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cfa0:	6a21      	ldr	r1, [r4, #32]
 800cfa2:	4628      	mov	r0, r5
 800cfa4:	47b0      	blx	r6
 800cfa6:	1c43      	adds	r3, r0, #1
 800cfa8:	89a3      	ldrh	r3, [r4, #12]
 800cfaa:	d106      	bne.n	800cfba <__sflush_r+0x66>
 800cfac:	6829      	ldr	r1, [r5, #0]
 800cfae:	291d      	cmp	r1, #29
 800cfb0:	d82c      	bhi.n	800d00c <__sflush_r+0xb8>
 800cfb2:	4a2a      	ldr	r2, [pc, #168]	; (800d05c <__sflush_r+0x108>)
 800cfb4:	40ca      	lsrs	r2, r1
 800cfb6:	07d6      	lsls	r6, r2, #31
 800cfb8:	d528      	bpl.n	800d00c <__sflush_r+0xb8>
 800cfba:	2200      	movs	r2, #0
 800cfbc:	6062      	str	r2, [r4, #4]
 800cfbe:	04d9      	lsls	r1, r3, #19
 800cfc0:	6922      	ldr	r2, [r4, #16]
 800cfc2:	6022      	str	r2, [r4, #0]
 800cfc4:	d504      	bpl.n	800cfd0 <__sflush_r+0x7c>
 800cfc6:	1c42      	adds	r2, r0, #1
 800cfc8:	d101      	bne.n	800cfce <__sflush_r+0x7a>
 800cfca:	682b      	ldr	r3, [r5, #0]
 800cfcc:	b903      	cbnz	r3, 800cfd0 <__sflush_r+0x7c>
 800cfce:	6560      	str	r0, [r4, #84]	; 0x54
 800cfd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfd2:	602f      	str	r7, [r5, #0]
 800cfd4:	2900      	cmp	r1, #0
 800cfd6:	d0ca      	beq.n	800cf6e <__sflush_r+0x1a>
 800cfd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfdc:	4299      	cmp	r1, r3
 800cfde:	d002      	beq.n	800cfe6 <__sflush_r+0x92>
 800cfe0:	4628      	mov	r0, r5
 800cfe2:	f001 fa3b 	bl	800e45c <_free_r>
 800cfe6:	2000      	movs	r0, #0
 800cfe8:	6360      	str	r0, [r4, #52]	; 0x34
 800cfea:	e7c1      	b.n	800cf70 <__sflush_r+0x1c>
 800cfec:	6a21      	ldr	r1, [r4, #32]
 800cfee:	2301      	movs	r3, #1
 800cff0:	4628      	mov	r0, r5
 800cff2:	47b0      	blx	r6
 800cff4:	1c41      	adds	r1, r0, #1
 800cff6:	d1c7      	bne.n	800cf88 <__sflush_r+0x34>
 800cff8:	682b      	ldr	r3, [r5, #0]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d0c4      	beq.n	800cf88 <__sflush_r+0x34>
 800cffe:	2b1d      	cmp	r3, #29
 800d000:	d001      	beq.n	800d006 <__sflush_r+0xb2>
 800d002:	2b16      	cmp	r3, #22
 800d004:	d101      	bne.n	800d00a <__sflush_r+0xb6>
 800d006:	602f      	str	r7, [r5, #0]
 800d008:	e7b1      	b.n	800cf6e <__sflush_r+0x1a>
 800d00a:	89a3      	ldrh	r3, [r4, #12]
 800d00c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d010:	81a3      	strh	r3, [r4, #12]
 800d012:	e7ad      	b.n	800cf70 <__sflush_r+0x1c>
 800d014:	690f      	ldr	r7, [r1, #16]
 800d016:	2f00      	cmp	r7, #0
 800d018:	d0a9      	beq.n	800cf6e <__sflush_r+0x1a>
 800d01a:	0793      	lsls	r3, r2, #30
 800d01c:	680e      	ldr	r6, [r1, #0]
 800d01e:	bf08      	it	eq
 800d020:	694b      	ldreq	r3, [r1, #20]
 800d022:	600f      	str	r7, [r1, #0]
 800d024:	bf18      	it	ne
 800d026:	2300      	movne	r3, #0
 800d028:	eba6 0807 	sub.w	r8, r6, r7
 800d02c:	608b      	str	r3, [r1, #8]
 800d02e:	f1b8 0f00 	cmp.w	r8, #0
 800d032:	dd9c      	ble.n	800cf6e <__sflush_r+0x1a>
 800d034:	6a21      	ldr	r1, [r4, #32]
 800d036:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d038:	4643      	mov	r3, r8
 800d03a:	463a      	mov	r2, r7
 800d03c:	4628      	mov	r0, r5
 800d03e:	47b0      	blx	r6
 800d040:	2800      	cmp	r0, #0
 800d042:	dc06      	bgt.n	800d052 <__sflush_r+0xfe>
 800d044:	89a3      	ldrh	r3, [r4, #12]
 800d046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d04a:	81a3      	strh	r3, [r4, #12]
 800d04c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d050:	e78e      	b.n	800cf70 <__sflush_r+0x1c>
 800d052:	4407      	add	r7, r0
 800d054:	eba8 0800 	sub.w	r8, r8, r0
 800d058:	e7e9      	b.n	800d02e <__sflush_r+0xda>
 800d05a:	bf00      	nop
 800d05c:	20400001 	.word	0x20400001

0800d060 <_fflush_r>:
 800d060:	b538      	push	{r3, r4, r5, lr}
 800d062:	690b      	ldr	r3, [r1, #16]
 800d064:	4605      	mov	r5, r0
 800d066:	460c      	mov	r4, r1
 800d068:	b913      	cbnz	r3, 800d070 <_fflush_r+0x10>
 800d06a:	2500      	movs	r5, #0
 800d06c:	4628      	mov	r0, r5
 800d06e:	bd38      	pop	{r3, r4, r5, pc}
 800d070:	b118      	cbz	r0, 800d07a <_fflush_r+0x1a>
 800d072:	6983      	ldr	r3, [r0, #24]
 800d074:	b90b      	cbnz	r3, 800d07a <_fflush_r+0x1a>
 800d076:	f000 f887 	bl	800d188 <__sinit>
 800d07a:	4b14      	ldr	r3, [pc, #80]	; (800d0cc <_fflush_r+0x6c>)
 800d07c:	429c      	cmp	r4, r3
 800d07e:	d11b      	bne.n	800d0b8 <_fflush_r+0x58>
 800d080:	686c      	ldr	r4, [r5, #4]
 800d082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d0ef      	beq.n	800d06a <_fflush_r+0xa>
 800d08a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d08c:	07d0      	lsls	r0, r2, #31
 800d08e:	d404      	bmi.n	800d09a <_fflush_r+0x3a>
 800d090:	0599      	lsls	r1, r3, #22
 800d092:	d402      	bmi.n	800d09a <_fflush_r+0x3a>
 800d094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d096:	f000 fc88 	bl	800d9aa <__retarget_lock_acquire_recursive>
 800d09a:	4628      	mov	r0, r5
 800d09c:	4621      	mov	r1, r4
 800d09e:	f7ff ff59 	bl	800cf54 <__sflush_r>
 800d0a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d0a4:	07da      	lsls	r2, r3, #31
 800d0a6:	4605      	mov	r5, r0
 800d0a8:	d4e0      	bmi.n	800d06c <_fflush_r+0xc>
 800d0aa:	89a3      	ldrh	r3, [r4, #12]
 800d0ac:	059b      	lsls	r3, r3, #22
 800d0ae:	d4dd      	bmi.n	800d06c <_fflush_r+0xc>
 800d0b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0b2:	f000 fc7b 	bl	800d9ac <__retarget_lock_release_recursive>
 800d0b6:	e7d9      	b.n	800d06c <_fflush_r+0xc>
 800d0b8:	4b05      	ldr	r3, [pc, #20]	; (800d0d0 <_fflush_r+0x70>)
 800d0ba:	429c      	cmp	r4, r3
 800d0bc:	d101      	bne.n	800d0c2 <_fflush_r+0x62>
 800d0be:	68ac      	ldr	r4, [r5, #8]
 800d0c0:	e7df      	b.n	800d082 <_fflush_r+0x22>
 800d0c2:	4b04      	ldr	r3, [pc, #16]	; (800d0d4 <_fflush_r+0x74>)
 800d0c4:	429c      	cmp	r4, r3
 800d0c6:	bf08      	it	eq
 800d0c8:	68ec      	ldreq	r4, [r5, #12]
 800d0ca:	e7da      	b.n	800d082 <_fflush_r+0x22>
 800d0cc:	080113ac 	.word	0x080113ac
 800d0d0:	080113cc 	.word	0x080113cc
 800d0d4:	0801138c 	.word	0x0801138c

0800d0d8 <std>:
 800d0d8:	2300      	movs	r3, #0
 800d0da:	b510      	push	{r4, lr}
 800d0dc:	4604      	mov	r4, r0
 800d0de:	e9c0 3300 	strd	r3, r3, [r0]
 800d0e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d0e6:	6083      	str	r3, [r0, #8]
 800d0e8:	8181      	strh	r1, [r0, #12]
 800d0ea:	6643      	str	r3, [r0, #100]	; 0x64
 800d0ec:	81c2      	strh	r2, [r0, #14]
 800d0ee:	6183      	str	r3, [r0, #24]
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	2208      	movs	r2, #8
 800d0f4:	305c      	adds	r0, #92	; 0x5c
 800d0f6:	f7fd fc37 	bl	800a968 <memset>
 800d0fa:	4b05      	ldr	r3, [pc, #20]	; (800d110 <std+0x38>)
 800d0fc:	6263      	str	r3, [r4, #36]	; 0x24
 800d0fe:	4b05      	ldr	r3, [pc, #20]	; (800d114 <std+0x3c>)
 800d100:	62a3      	str	r3, [r4, #40]	; 0x28
 800d102:	4b05      	ldr	r3, [pc, #20]	; (800d118 <std+0x40>)
 800d104:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d106:	4b05      	ldr	r3, [pc, #20]	; (800d11c <std+0x44>)
 800d108:	6224      	str	r4, [r4, #32]
 800d10a:	6323      	str	r3, [r4, #48]	; 0x30
 800d10c:	bd10      	pop	{r4, pc}
 800d10e:	bf00      	nop
 800d110:	0800e901 	.word	0x0800e901
 800d114:	0800e923 	.word	0x0800e923
 800d118:	0800e95b 	.word	0x0800e95b
 800d11c:	0800e97f 	.word	0x0800e97f

0800d120 <_cleanup_r>:
 800d120:	4901      	ldr	r1, [pc, #4]	; (800d128 <_cleanup_r+0x8>)
 800d122:	f000 b8af 	b.w	800d284 <_fwalk_reent>
 800d126:	bf00      	nop
 800d128:	0800d061 	.word	0x0800d061

0800d12c <__sfmoreglue>:
 800d12c:	b570      	push	{r4, r5, r6, lr}
 800d12e:	2268      	movs	r2, #104	; 0x68
 800d130:	1e4d      	subs	r5, r1, #1
 800d132:	4355      	muls	r5, r2
 800d134:	460e      	mov	r6, r1
 800d136:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d13a:	f001 f9fb 	bl	800e534 <_malloc_r>
 800d13e:	4604      	mov	r4, r0
 800d140:	b140      	cbz	r0, 800d154 <__sfmoreglue+0x28>
 800d142:	2100      	movs	r1, #0
 800d144:	e9c0 1600 	strd	r1, r6, [r0]
 800d148:	300c      	adds	r0, #12
 800d14a:	60a0      	str	r0, [r4, #8]
 800d14c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d150:	f7fd fc0a 	bl	800a968 <memset>
 800d154:	4620      	mov	r0, r4
 800d156:	bd70      	pop	{r4, r5, r6, pc}

0800d158 <__sfp_lock_acquire>:
 800d158:	4801      	ldr	r0, [pc, #4]	; (800d160 <__sfp_lock_acquire+0x8>)
 800d15a:	f000 bc26 	b.w	800d9aa <__retarget_lock_acquire_recursive>
 800d15e:	bf00      	nop
 800d160:	200099f1 	.word	0x200099f1

0800d164 <__sfp_lock_release>:
 800d164:	4801      	ldr	r0, [pc, #4]	; (800d16c <__sfp_lock_release+0x8>)
 800d166:	f000 bc21 	b.w	800d9ac <__retarget_lock_release_recursive>
 800d16a:	bf00      	nop
 800d16c:	200099f1 	.word	0x200099f1

0800d170 <__sinit_lock_acquire>:
 800d170:	4801      	ldr	r0, [pc, #4]	; (800d178 <__sinit_lock_acquire+0x8>)
 800d172:	f000 bc1a 	b.w	800d9aa <__retarget_lock_acquire_recursive>
 800d176:	bf00      	nop
 800d178:	200099f2 	.word	0x200099f2

0800d17c <__sinit_lock_release>:
 800d17c:	4801      	ldr	r0, [pc, #4]	; (800d184 <__sinit_lock_release+0x8>)
 800d17e:	f000 bc15 	b.w	800d9ac <__retarget_lock_release_recursive>
 800d182:	bf00      	nop
 800d184:	200099f2 	.word	0x200099f2

0800d188 <__sinit>:
 800d188:	b510      	push	{r4, lr}
 800d18a:	4604      	mov	r4, r0
 800d18c:	f7ff fff0 	bl	800d170 <__sinit_lock_acquire>
 800d190:	69a3      	ldr	r3, [r4, #24]
 800d192:	b11b      	cbz	r3, 800d19c <__sinit+0x14>
 800d194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d198:	f7ff bff0 	b.w	800d17c <__sinit_lock_release>
 800d19c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d1a0:	6523      	str	r3, [r4, #80]	; 0x50
 800d1a2:	4b13      	ldr	r3, [pc, #76]	; (800d1f0 <__sinit+0x68>)
 800d1a4:	4a13      	ldr	r2, [pc, #76]	; (800d1f4 <__sinit+0x6c>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800d1aa:	42a3      	cmp	r3, r4
 800d1ac:	bf04      	itt	eq
 800d1ae:	2301      	moveq	r3, #1
 800d1b0:	61a3      	streq	r3, [r4, #24]
 800d1b2:	4620      	mov	r0, r4
 800d1b4:	f000 f820 	bl	800d1f8 <__sfp>
 800d1b8:	6060      	str	r0, [r4, #4]
 800d1ba:	4620      	mov	r0, r4
 800d1bc:	f000 f81c 	bl	800d1f8 <__sfp>
 800d1c0:	60a0      	str	r0, [r4, #8]
 800d1c2:	4620      	mov	r0, r4
 800d1c4:	f000 f818 	bl	800d1f8 <__sfp>
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	60e0      	str	r0, [r4, #12]
 800d1cc:	2104      	movs	r1, #4
 800d1ce:	6860      	ldr	r0, [r4, #4]
 800d1d0:	f7ff ff82 	bl	800d0d8 <std>
 800d1d4:	68a0      	ldr	r0, [r4, #8]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	2109      	movs	r1, #9
 800d1da:	f7ff ff7d 	bl	800d0d8 <std>
 800d1de:	68e0      	ldr	r0, [r4, #12]
 800d1e0:	2202      	movs	r2, #2
 800d1e2:	2112      	movs	r1, #18
 800d1e4:	f7ff ff78 	bl	800d0d8 <std>
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	61a3      	str	r3, [r4, #24]
 800d1ec:	e7d2      	b.n	800d194 <__sinit+0xc>
 800d1ee:	bf00      	nop
 800d1f0:	0801116c 	.word	0x0801116c
 800d1f4:	0800d121 	.word	0x0800d121

0800d1f8 <__sfp>:
 800d1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1fa:	4607      	mov	r7, r0
 800d1fc:	f7ff ffac 	bl	800d158 <__sfp_lock_acquire>
 800d200:	4b1e      	ldr	r3, [pc, #120]	; (800d27c <__sfp+0x84>)
 800d202:	681e      	ldr	r6, [r3, #0]
 800d204:	69b3      	ldr	r3, [r6, #24]
 800d206:	b913      	cbnz	r3, 800d20e <__sfp+0x16>
 800d208:	4630      	mov	r0, r6
 800d20a:	f7ff ffbd 	bl	800d188 <__sinit>
 800d20e:	3648      	adds	r6, #72	; 0x48
 800d210:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d214:	3b01      	subs	r3, #1
 800d216:	d503      	bpl.n	800d220 <__sfp+0x28>
 800d218:	6833      	ldr	r3, [r6, #0]
 800d21a:	b30b      	cbz	r3, 800d260 <__sfp+0x68>
 800d21c:	6836      	ldr	r6, [r6, #0]
 800d21e:	e7f7      	b.n	800d210 <__sfp+0x18>
 800d220:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d224:	b9d5      	cbnz	r5, 800d25c <__sfp+0x64>
 800d226:	4b16      	ldr	r3, [pc, #88]	; (800d280 <__sfp+0x88>)
 800d228:	60e3      	str	r3, [r4, #12]
 800d22a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d22e:	6665      	str	r5, [r4, #100]	; 0x64
 800d230:	f000 fbba 	bl	800d9a8 <__retarget_lock_init_recursive>
 800d234:	f7ff ff96 	bl	800d164 <__sfp_lock_release>
 800d238:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d23c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d240:	6025      	str	r5, [r4, #0]
 800d242:	61a5      	str	r5, [r4, #24]
 800d244:	2208      	movs	r2, #8
 800d246:	4629      	mov	r1, r5
 800d248:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d24c:	f7fd fb8c 	bl	800a968 <memset>
 800d250:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d254:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d258:	4620      	mov	r0, r4
 800d25a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d25c:	3468      	adds	r4, #104	; 0x68
 800d25e:	e7d9      	b.n	800d214 <__sfp+0x1c>
 800d260:	2104      	movs	r1, #4
 800d262:	4638      	mov	r0, r7
 800d264:	f7ff ff62 	bl	800d12c <__sfmoreglue>
 800d268:	4604      	mov	r4, r0
 800d26a:	6030      	str	r0, [r6, #0]
 800d26c:	2800      	cmp	r0, #0
 800d26e:	d1d5      	bne.n	800d21c <__sfp+0x24>
 800d270:	f7ff ff78 	bl	800d164 <__sfp_lock_release>
 800d274:	230c      	movs	r3, #12
 800d276:	603b      	str	r3, [r7, #0]
 800d278:	e7ee      	b.n	800d258 <__sfp+0x60>
 800d27a:	bf00      	nop
 800d27c:	0801116c 	.word	0x0801116c
 800d280:	ffff0001 	.word	0xffff0001

0800d284 <_fwalk_reent>:
 800d284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d288:	4606      	mov	r6, r0
 800d28a:	4688      	mov	r8, r1
 800d28c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d290:	2700      	movs	r7, #0
 800d292:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d296:	f1b9 0901 	subs.w	r9, r9, #1
 800d29a:	d505      	bpl.n	800d2a8 <_fwalk_reent+0x24>
 800d29c:	6824      	ldr	r4, [r4, #0]
 800d29e:	2c00      	cmp	r4, #0
 800d2a0:	d1f7      	bne.n	800d292 <_fwalk_reent+0xe>
 800d2a2:	4638      	mov	r0, r7
 800d2a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2a8:	89ab      	ldrh	r3, [r5, #12]
 800d2aa:	2b01      	cmp	r3, #1
 800d2ac:	d907      	bls.n	800d2be <_fwalk_reent+0x3a>
 800d2ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	d003      	beq.n	800d2be <_fwalk_reent+0x3a>
 800d2b6:	4629      	mov	r1, r5
 800d2b8:	4630      	mov	r0, r6
 800d2ba:	47c0      	blx	r8
 800d2bc:	4307      	orrs	r7, r0
 800d2be:	3568      	adds	r5, #104	; 0x68
 800d2c0:	e7e9      	b.n	800d296 <_fwalk_reent+0x12>

0800d2c2 <rshift>:
 800d2c2:	6903      	ldr	r3, [r0, #16]
 800d2c4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d2c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d2cc:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d2d0:	f100 0414 	add.w	r4, r0, #20
 800d2d4:	dd45      	ble.n	800d362 <rshift+0xa0>
 800d2d6:	f011 011f 	ands.w	r1, r1, #31
 800d2da:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d2de:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d2e2:	d10c      	bne.n	800d2fe <rshift+0x3c>
 800d2e4:	f100 0710 	add.w	r7, r0, #16
 800d2e8:	4629      	mov	r1, r5
 800d2ea:	42b1      	cmp	r1, r6
 800d2ec:	d334      	bcc.n	800d358 <rshift+0x96>
 800d2ee:	1a9b      	subs	r3, r3, r2
 800d2f0:	009b      	lsls	r3, r3, #2
 800d2f2:	1eea      	subs	r2, r5, #3
 800d2f4:	4296      	cmp	r6, r2
 800d2f6:	bf38      	it	cc
 800d2f8:	2300      	movcc	r3, #0
 800d2fa:	4423      	add	r3, r4
 800d2fc:	e015      	b.n	800d32a <rshift+0x68>
 800d2fe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d302:	f1c1 0820 	rsb	r8, r1, #32
 800d306:	40cf      	lsrs	r7, r1
 800d308:	f105 0e04 	add.w	lr, r5, #4
 800d30c:	46a1      	mov	r9, r4
 800d30e:	4576      	cmp	r6, lr
 800d310:	46f4      	mov	ip, lr
 800d312:	d815      	bhi.n	800d340 <rshift+0x7e>
 800d314:	1a9a      	subs	r2, r3, r2
 800d316:	0092      	lsls	r2, r2, #2
 800d318:	3a04      	subs	r2, #4
 800d31a:	3501      	adds	r5, #1
 800d31c:	42ae      	cmp	r6, r5
 800d31e:	bf38      	it	cc
 800d320:	2200      	movcc	r2, #0
 800d322:	18a3      	adds	r3, r4, r2
 800d324:	50a7      	str	r7, [r4, r2]
 800d326:	b107      	cbz	r7, 800d32a <rshift+0x68>
 800d328:	3304      	adds	r3, #4
 800d32a:	1b1a      	subs	r2, r3, r4
 800d32c:	42a3      	cmp	r3, r4
 800d32e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d332:	bf08      	it	eq
 800d334:	2300      	moveq	r3, #0
 800d336:	6102      	str	r2, [r0, #16]
 800d338:	bf08      	it	eq
 800d33a:	6143      	streq	r3, [r0, #20]
 800d33c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d340:	f8dc c000 	ldr.w	ip, [ip]
 800d344:	fa0c fc08 	lsl.w	ip, ip, r8
 800d348:	ea4c 0707 	orr.w	r7, ip, r7
 800d34c:	f849 7b04 	str.w	r7, [r9], #4
 800d350:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d354:	40cf      	lsrs	r7, r1
 800d356:	e7da      	b.n	800d30e <rshift+0x4c>
 800d358:	f851 cb04 	ldr.w	ip, [r1], #4
 800d35c:	f847 cf04 	str.w	ip, [r7, #4]!
 800d360:	e7c3      	b.n	800d2ea <rshift+0x28>
 800d362:	4623      	mov	r3, r4
 800d364:	e7e1      	b.n	800d32a <rshift+0x68>

0800d366 <__hexdig_fun>:
 800d366:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d36a:	2b09      	cmp	r3, #9
 800d36c:	d802      	bhi.n	800d374 <__hexdig_fun+0xe>
 800d36e:	3820      	subs	r0, #32
 800d370:	b2c0      	uxtb	r0, r0
 800d372:	4770      	bx	lr
 800d374:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d378:	2b05      	cmp	r3, #5
 800d37a:	d801      	bhi.n	800d380 <__hexdig_fun+0x1a>
 800d37c:	3847      	subs	r0, #71	; 0x47
 800d37e:	e7f7      	b.n	800d370 <__hexdig_fun+0xa>
 800d380:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d384:	2b05      	cmp	r3, #5
 800d386:	d801      	bhi.n	800d38c <__hexdig_fun+0x26>
 800d388:	3827      	subs	r0, #39	; 0x27
 800d38a:	e7f1      	b.n	800d370 <__hexdig_fun+0xa>
 800d38c:	2000      	movs	r0, #0
 800d38e:	4770      	bx	lr

0800d390 <__gethex>:
 800d390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d394:	ed2d 8b02 	vpush	{d8}
 800d398:	b089      	sub	sp, #36	; 0x24
 800d39a:	ee08 0a10 	vmov	s16, r0
 800d39e:	9304      	str	r3, [sp, #16]
 800d3a0:	4bb4      	ldr	r3, [pc, #720]	; (800d674 <__gethex+0x2e4>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	9301      	str	r3, [sp, #4]
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	468b      	mov	fp, r1
 800d3aa:	4690      	mov	r8, r2
 800d3ac:	f7f2 ff30 	bl	8000210 <strlen>
 800d3b0:	9b01      	ldr	r3, [sp, #4]
 800d3b2:	f8db 2000 	ldr.w	r2, [fp]
 800d3b6:	4403      	add	r3, r0
 800d3b8:	4682      	mov	sl, r0
 800d3ba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d3be:	9305      	str	r3, [sp, #20]
 800d3c0:	1c93      	adds	r3, r2, #2
 800d3c2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d3c6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d3ca:	32fe      	adds	r2, #254	; 0xfe
 800d3cc:	18d1      	adds	r1, r2, r3
 800d3ce:	461f      	mov	r7, r3
 800d3d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d3d4:	9100      	str	r1, [sp, #0]
 800d3d6:	2830      	cmp	r0, #48	; 0x30
 800d3d8:	d0f8      	beq.n	800d3cc <__gethex+0x3c>
 800d3da:	f7ff ffc4 	bl	800d366 <__hexdig_fun>
 800d3de:	4604      	mov	r4, r0
 800d3e0:	2800      	cmp	r0, #0
 800d3e2:	d13a      	bne.n	800d45a <__gethex+0xca>
 800d3e4:	9901      	ldr	r1, [sp, #4]
 800d3e6:	4652      	mov	r2, sl
 800d3e8:	4638      	mov	r0, r7
 800d3ea:	f001 facc 	bl	800e986 <strncmp>
 800d3ee:	4605      	mov	r5, r0
 800d3f0:	2800      	cmp	r0, #0
 800d3f2:	d168      	bne.n	800d4c6 <__gethex+0x136>
 800d3f4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d3f8:	eb07 060a 	add.w	r6, r7, sl
 800d3fc:	f7ff ffb3 	bl	800d366 <__hexdig_fun>
 800d400:	2800      	cmp	r0, #0
 800d402:	d062      	beq.n	800d4ca <__gethex+0x13a>
 800d404:	4633      	mov	r3, r6
 800d406:	7818      	ldrb	r0, [r3, #0]
 800d408:	2830      	cmp	r0, #48	; 0x30
 800d40a:	461f      	mov	r7, r3
 800d40c:	f103 0301 	add.w	r3, r3, #1
 800d410:	d0f9      	beq.n	800d406 <__gethex+0x76>
 800d412:	f7ff ffa8 	bl	800d366 <__hexdig_fun>
 800d416:	2301      	movs	r3, #1
 800d418:	fab0 f480 	clz	r4, r0
 800d41c:	0964      	lsrs	r4, r4, #5
 800d41e:	4635      	mov	r5, r6
 800d420:	9300      	str	r3, [sp, #0]
 800d422:	463a      	mov	r2, r7
 800d424:	4616      	mov	r6, r2
 800d426:	3201      	adds	r2, #1
 800d428:	7830      	ldrb	r0, [r6, #0]
 800d42a:	f7ff ff9c 	bl	800d366 <__hexdig_fun>
 800d42e:	2800      	cmp	r0, #0
 800d430:	d1f8      	bne.n	800d424 <__gethex+0x94>
 800d432:	9901      	ldr	r1, [sp, #4]
 800d434:	4652      	mov	r2, sl
 800d436:	4630      	mov	r0, r6
 800d438:	f001 faa5 	bl	800e986 <strncmp>
 800d43c:	b980      	cbnz	r0, 800d460 <__gethex+0xd0>
 800d43e:	b94d      	cbnz	r5, 800d454 <__gethex+0xc4>
 800d440:	eb06 050a 	add.w	r5, r6, sl
 800d444:	462a      	mov	r2, r5
 800d446:	4616      	mov	r6, r2
 800d448:	3201      	adds	r2, #1
 800d44a:	7830      	ldrb	r0, [r6, #0]
 800d44c:	f7ff ff8b 	bl	800d366 <__hexdig_fun>
 800d450:	2800      	cmp	r0, #0
 800d452:	d1f8      	bne.n	800d446 <__gethex+0xb6>
 800d454:	1bad      	subs	r5, r5, r6
 800d456:	00ad      	lsls	r5, r5, #2
 800d458:	e004      	b.n	800d464 <__gethex+0xd4>
 800d45a:	2400      	movs	r4, #0
 800d45c:	4625      	mov	r5, r4
 800d45e:	e7e0      	b.n	800d422 <__gethex+0x92>
 800d460:	2d00      	cmp	r5, #0
 800d462:	d1f7      	bne.n	800d454 <__gethex+0xc4>
 800d464:	7833      	ldrb	r3, [r6, #0]
 800d466:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d46a:	2b50      	cmp	r3, #80	; 0x50
 800d46c:	d13b      	bne.n	800d4e6 <__gethex+0x156>
 800d46e:	7873      	ldrb	r3, [r6, #1]
 800d470:	2b2b      	cmp	r3, #43	; 0x2b
 800d472:	d02c      	beq.n	800d4ce <__gethex+0x13e>
 800d474:	2b2d      	cmp	r3, #45	; 0x2d
 800d476:	d02e      	beq.n	800d4d6 <__gethex+0x146>
 800d478:	1c71      	adds	r1, r6, #1
 800d47a:	f04f 0900 	mov.w	r9, #0
 800d47e:	7808      	ldrb	r0, [r1, #0]
 800d480:	f7ff ff71 	bl	800d366 <__hexdig_fun>
 800d484:	1e43      	subs	r3, r0, #1
 800d486:	b2db      	uxtb	r3, r3
 800d488:	2b18      	cmp	r3, #24
 800d48a:	d82c      	bhi.n	800d4e6 <__gethex+0x156>
 800d48c:	f1a0 0210 	sub.w	r2, r0, #16
 800d490:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d494:	f7ff ff67 	bl	800d366 <__hexdig_fun>
 800d498:	1e43      	subs	r3, r0, #1
 800d49a:	b2db      	uxtb	r3, r3
 800d49c:	2b18      	cmp	r3, #24
 800d49e:	d91d      	bls.n	800d4dc <__gethex+0x14c>
 800d4a0:	f1b9 0f00 	cmp.w	r9, #0
 800d4a4:	d000      	beq.n	800d4a8 <__gethex+0x118>
 800d4a6:	4252      	negs	r2, r2
 800d4a8:	4415      	add	r5, r2
 800d4aa:	f8cb 1000 	str.w	r1, [fp]
 800d4ae:	b1e4      	cbz	r4, 800d4ea <__gethex+0x15a>
 800d4b0:	9b00      	ldr	r3, [sp, #0]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	bf14      	ite	ne
 800d4b6:	2700      	movne	r7, #0
 800d4b8:	2706      	moveq	r7, #6
 800d4ba:	4638      	mov	r0, r7
 800d4bc:	b009      	add	sp, #36	; 0x24
 800d4be:	ecbd 8b02 	vpop	{d8}
 800d4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4c6:	463e      	mov	r6, r7
 800d4c8:	4625      	mov	r5, r4
 800d4ca:	2401      	movs	r4, #1
 800d4cc:	e7ca      	b.n	800d464 <__gethex+0xd4>
 800d4ce:	f04f 0900 	mov.w	r9, #0
 800d4d2:	1cb1      	adds	r1, r6, #2
 800d4d4:	e7d3      	b.n	800d47e <__gethex+0xee>
 800d4d6:	f04f 0901 	mov.w	r9, #1
 800d4da:	e7fa      	b.n	800d4d2 <__gethex+0x142>
 800d4dc:	230a      	movs	r3, #10
 800d4de:	fb03 0202 	mla	r2, r3, r2, r0
 800d4e2:	3a10      	subs	r2, #16
 800d4e4:	e7d4      	b.n	800d490 <__gethex+0x100>
 800d4e6:	4631      	mov	r1, r6
 800d4e8:	e7df      	b.n	800d4aa <__gethex+0x11a>
 800d4ea:	1bf3      	subs	r3, r6, r7
 800d4ec:	3b01      	subs	r3, #1
 800d4ee:	4621      	mov	r1, r4
 800d4f0:	2b07      	cmp	r3, #7
 800d4f2:	dc0b      	bgt.n	800d50c <__gethex+0x17c>
 800d4f4:	ee18 0a10 	vmov	r0, s16
 800d4f8:	f000 fad8 	bl	800daac <_Balloc>
 800d4fc:	4604      	mov	r4, r0
 800d4fe:	b940      	cbnz	r0, 800d512 <__gethex+0x182>
 800d500:	4b5d      	ldr	r3, [pc, #372]	; (800d678 <__gethex+0x2e8>)
 800d502:	4602      	mov	r2, r0
 800d504:	21de      	movs	r1, #222	; 0xde
 800d506:	485d      	ldr	r0, [pc, #372]	; (800d67c <__gethex+0x2ec>)
 800d508:	f001 fa70 	bl	800e9ec <__assert_func>
 800d50c:	3101      	adds	r1, #1
 800d50e:	105b      	asrs	r3, r3, #1
 800d510:	e7ee      	b.n	800d4f0 <__gethex+0x160>
 800d512:	f100 0914 	add.w	r9, r0, #20
 800d516:	f04f 0b00 	mov.w	fp, #0
 800d51a:	f1ca 0301 	rsb	r3, sl, #1
 800d51e:	f8cd 9008 	str.w	r9, [sp, #8]
 800d522:	f8cd b000 	str.w	fp, [sp]
 800d526:	9306      	str	r3, [sp, #24]
 800d528:	42b7      	cmp	r7, r6
 800d52a:	d340      	bcc.n	800d5ae <__gethex+0x21e>
 800d52c:	9802      	ldr	r0, [sp, #8]
 800d52e:	9b00      	ldr	r3, [sp, #0]
 800d530:	f840 3b04 	str.w	r3, [r0], #4
 800d534:	eba0 0009 	sub.w	r0, r0, r9
 800d538:	1080      	asrs	r0, r0, #2
 800d53a:	0146      	lsls	r6, r0, #5
 800d53c:	6120      	str	r0, [r4, #16]
 800d53e:	4618      	mov	r0, r3
 800d540:	f000 fba6 	bl	800dc90 <__hi0bits>
 800d544:	1a30      	subs	r0, r6, r0
 800d546:	f8d8 6000 	ldr.w	r6, [r8]
 800d54a:	42b0      	cmp	r0, r6
 800d54c:	dd63      	ble.n	800d616 <__gethex+0x286>
 800d54e:	1b87      	subs	r7, r0, r6
 800d550:	4639      	mov	r1, r7
 800d552:	4620      	mov	r0, r4
 800d554:	f000 ff4a 	bl	800e3ec <__any_on>
 800d558:	4682      	mov	sl, r0
 800d55a:	b1a8      	cbz	r0, 800d588 <__gethex+0x1f8>
 800d55c:	1e7b      	subs	r3, r7, #1
 800d55e:	1159      	asrs	r1, r3, #5
 800d560:	f003 021f 	and.w	r2, r3, #31
 800d564:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d568:	f04f 0a01 	mov.w	sl, #1
 800d56c:	fa0a f202 	lsl.w	r2, sl, r2
 800d570:	420a      	tst	r2, r1
 800d572:	d009      	beq.n	800d588 <__gethex+0x1f8>
 800d574:	4553      	cmp	r3, sl
 800d576:	dd05      	ble.n	800d584 <__gethex+0x1f4>
 800d578:	1eb9      	subs	r1, r7, #2
 800d57a:	4620      	mov	r0, r4
 800d57c:	f000 ff36 	bl	800e3ec <__any_on>
 800d580:	2800      	cmp	r0, #0
 800d582:	d145      	bne.n	800d610 <__gethex+0x280>
 800d584:	f04f 0a02 	mov.w	sl, #2
 800d588:	4639      	mov	r1, r7
 800d58a:	4620      	mov	r0, r4
 800d58c:	f7ff fe99 	bl	800d2c2 <rshift>
 800d590:	443d      	add	r5, r7
 800d592:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d596:	42ab      	cmp	r3, r5
 800d598:	da4c      	bge.n	800d634 <__gethex+0x2a4>
 800d59a:	ee18 0a10 	vmov	r0, s16
 800d59e:	4621      	mov	r1, r4
 800d5a0:	f000 fac4 	bl	800db2c <_Bfree>
 800d5a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	6013      	str	r3, [r2, #0]
 800d5aa:	27a3      	movs	r7, #163	; 0xa3
 800d5ac:	e785      	b.n	800d4ba <__gethex+0x12a>
 800d5ae:	1e73      	subs	r3, r6, #1
 800d5b0:	9a05      	ldr	r2, [sp, #20]
 800d5b2:	9303      	str	r3, [sp, #12]
 800d5b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d019      	beq.n	800d5f0 <__gethex+0x260>
 800d5bc:	f1bb 0f20 	cmp.w	fp, #32
 800d5c0:	d107      	bne.n	800d5d2 <__gethex+0x242>
 800d5c2:	9b02      	ldr	r3, [sp, #8]
 800d5c4:	9a00      	ldr	r2, [sp, #0]
 800d5c6:	f843 2b04 	str.w	r2, [r3], #4
 800d5ca:	9302      	str	r3, [sp, #8]
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	9300      	str	r3, [sp, #0]
 800d5d0:	469b      	mov	fp, r3
 800d5d2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d5d6:	f7ff fec6 	bl	800d366 <__hexdig_fun>
 800d5da:	9b00      	ldr	r3, [sp, #0]
 800d5dc:	f000 000f 	and.w	r0, r0, #15
 800d5e0:	fa00 f00b 	lsl.w	r0, r0, fp
 800d5e4:	4303      	orrs	r3, r0
 800d5e6:	9300      	str	r3, [sp, #0]
 800d5e8:	f10b 0b04 	add.w	fp, fp, #4
 800d5ec:	9b03      	ldr	r3, [sp, #12]
 800d5ee:	e00d      	b.n	800d60c <__gethex+0x27c>
 800d5f0:	9b03      	ldr	r3, [sp, #12]
 800d5f2:	9a06      	ldr	r2, [sp, #24]
 800d5f4:	4413      	add	r3, r2
 800d5f6:	42bb      	cmp	r3, r7
 800d5f8:	d3e0      	bcc.n	800d5bc <__gethex+0x22c>
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	9901      	ldr	r1, [sp, #4]
 800d5fe:	9307      	str	r3, [sp, #28]
 800d600:	4652      	mov	r2, sl
 800d602:	f001 f9c0 	bl	800e986 <strncmp>
 800d606:	9b07      	ldr	r3, [sp, #28]
 800d608:	2800      	cmp	r0, #0
 800d60a:	d1d7      	bne.n	800d5bc <__gethex+0x22c>
 800d60c:	461e      	mov	r6, r3
 800d60e:	e78b      	b.n	800d528 <__gethex+0x198>
 800d610:	f04f 0a03 	mov.w	sl, #3
 800d614:	e7b8      	b.n	800d588 <__gethex+0x1f8>
 800d616:	da0a      	bge.n	800d62e <__gethex+0x29e>
 800d618:	1a37      	subs	r7, r6, r0
 800d61a:	4621      	mov	r1, r4
 800d61c:	ee18 0a10 	vmov	r0, s16
 800d620:	463a      	mov	r2, r7
 800d622:	f000 fc9f 	bl	800df64 <__lshift>
 800d626:	1bed      	subs	r5, r5, r7
 800d628:	4604      	mov	r4, r0
 800d62a:	f100 0914 	add.w	r9, r0, #20
 800d62e:	f04f 0a00 	mov.w	sl, #0
 800d632:	e7ae      	b.n	800d592 <__gethex+0x202>
 800d634:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d638:	42a8      	cmp	r0, r5
 800d63a:	dd72      	ble.n	800d722 <__gethex+0x392>
 800d63c:	1b45      	subs	r5, r0, r5
 800d63e:	42ae      	cmp	r6, r5
 800d640:	dc36      	bgt.n	800d6b0 <__gethex+0x320>
 800d642:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d646:	2b02      	cmp	r3, #2
 800d648:	d02a      	beq.n	800d6a0 <__gethex+0x310>
 800d64a:	2b03      	cmp	r3, #3
 800d64c:	d02c      	beq.n	800d6a8 <__gethex+0x318>
 800d64e:	2b01      	cmp	r3, #1
 800d650:	d11c      	bne.n	800d68c <__gethex+0x2fc>
 800d652:	42ae      	cmp	r6, r5
 800d654:	d11a      	bne.n	800d68c <__gethex+0x2fc>
 800d656:	2e01      	cmp	r6, #1
 800d658:	d112      	bne.n	800d680 <__gethex+0x2f0>
 800d65a:	9a04      	ldr	r2, [sp, #16]
 800d65c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d660:	6013      	str	r3, [r2, #0]
 800d662:	2301      	movs	r3, #1
 800d664:	6123      	str	r3, [r4, #16]
 800d666:	f8c9 3000 	str.w	r3, [r9]
 800d66a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d66c:	2762      	movs	r7, #98	; 0x62
 800d66e:	601c      	str	r4, [r3, #0]
 800d670:	e723      	b.n	800d4ba <__gethex+0x12a>
 800d672:	bf00      	nop
 800d674:	08011454 	.word	0x08011454
 800d678:	08011378 	.word	0x08011378
 800d67c:	080113ec 	.word	0x080113ec
 800d680:	1e71      	subs	r1, r6, #1
 800d682:	4620      	mov	r0, r4
 800d684:	f000 feb2 	bl	800e3ec <__any_on>
 800d688:	2800      	cmp	r0, #0
 800d68a:	d1e6      	bne.n	800d65a <__gethex+0x2ca>
 800d68c:	ee18 0a10 	vmov	r0, s16
 800d690:	4621      	mov	r1, r4
 800d692:	f000 fa4b 	bl	800db2c <_Bfree>
 800d696:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d698:	2300      	movs	r3, #0
 800d69a:	6013      	str	r3, [r2, #0]
 800d69c:	2750      	movs	r7, #80	; 0x50
 800d69e:	e70c      	b.n	800d4ba <__gethex+0x12a>
 800d6a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d1f2      	bne.n	800d68c <__gethex+0x2fc>
 800d6a6:	e7d8      	b.n	800d65a <__gethex+0x2ca>
 800d6a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d1d5      	bne.n	800d65a <__gethex+0x2ca>
 800d6ae:	e7ed      	b.n	800d68c <__gethex+0x2fc>
 800d6b0:	1e6f      	subs	r7, r5, #1
 800d6b2:	f1ba 0f00 	cmp.w	sl, #0
 800d6b6:	d131      	bne.n	800d71c <__gethex+0x38c>
 800d6b8:	b127      	cbz	r7, 800d6c4 <__gethex+0x334>
 800d6ba:	4639      	mov	r1, r7
 800d6bc:	4620      	mov	r0, r4
 800d6be:	f000 fe95 	bl	800e3ec <__any_on>
 800d6c2:	4682      	mov	sl, r0
 800d6c4:	117b      	asrs	r3, r7, #5
 800d6c6:	2101      	movs	r1, #1
 800d6c8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d6cc:	f007 071f 	and.w	r7, r7, #31
 800d6d0:	fa01 f707 	lsl.w	r7, r1, r7
 800d6d4:	421f      	tst	r7, r3
 800d6d6:	4629      	mov	r1, r5
 800d6d8:	4620      	mov	r0, r4
 800d6da:	bf18      	it	ne
 800d6dc:	f04a 0a02 	orrne.w	sl, sl, #2
 800d6e0:	1b76      	subs	r6, r6, r5
 800d6e2:	f7ff fdee 	bl	800d2c2 <rshift>
 800d6e6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d6ea:	2702      	movs	r7, #2
 800d6ec:	f1ba 0f00 	cmp.w	sl, #0
 800d6f0:	d048      	beq.n	800d784 <__gethex+0x3f4>
 800d6f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d6f6:	2b02      	cmp	r3, #2
 800d6f8:	d015      	beq.n	800d726 <__gethex+0x396>
 800d6fa:	2b03      	cmp	r3, #3
 800d6fc:	d017      	beq.n	800d72e <__gethex+0x39e>
 800d6fe:	2b01      	cmp	r3, #1
 800d700:	d109      	bne.n	800d716 <__gethex+0x386>
 800d702:	f01a 0f02 	tst.w	sl, #2
 800d706:	d006      	beq.n	800d716 <__gethex+0x386>
 800d708:	f8d9 0000 	ldr.w	r0, [r9]
 800d70c:	ea4a 0a00 	orr.w	sl, sl, r0
 800d710:	f01a 0f01 	tst.w	sl, #1
 800d714:	d10e      	bne.n	800d734 <__gethex+0x3a4>
 800d716:	f047 0710 	orr.w	r7, r7, #16
 800d71a:	e033      	b.n	800d784 <__gethex+0x3f4>
 800d71c:	f04f 0a01 	mov.w	sl, #1
 800d720:	e7d0      	b.n	800d6c4 <__gethex+0x334>
 800d722:	2701      	movs	r7, #1
 800d724:	e7e2      	b.n	800d6ec <__gethex+0x35c>
 800d726:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d728:	f1c3 0301 	rsb	r3, r3, #1
 800d72c:	9315      	str	r3, [sp, #84]	; 0x54
 800d72e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d730:	2b00      	cmp	r3, #0
 800d732:	d0f0      	beq.n	800d716 <__gethex+0x386>
 800d734:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d738:	f104 0314 	add.w	r3, r4, #20
 800d73c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d740:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d744:	f04f 0c00 	mov.w	ip, #0
 800d748:	4618      	mov	r0, r3
 800d74a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d74e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800d752:	d01c      	beq.n	800d78e <__gethex+0x3fe>
 800d754:	3201      	adds	r2, #1
 800d756:	6002      	str	r2, [r0, #0]
 800d758:	2f02      	cmp	r7, #2
 800d75a:	f104 0314 	add.w	r3, r4, #20
 800d75e:	d13f      	bne.n	800d7e0 <__gethex+0x450>
 800d760:	f8d8 2000 	ldr.w	r2, [r8]
 800d764:	3a01      	subs	r2, #1
 800d766:	42b2      	cmp	r2, r6
 800d768:	d10a      	bne.n	800d780 <__gethex+0x3f0>
 800d76a:	1171      	asrs	r1, r6, #5
 800d76c:	2201      	movs	r2, #1
 800d76e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d772:	f006 061f 	and.w	r6, r6, #31
 800d776:	fa02 f606 	lsl.w	r6, r2, r6
 800d77a:	421e      	tst	r6, r3
 800d77c:	bf18      	it	ne
 800d77e:	4617      	movne	r7, r2
 800d780:	f047 0720 	orr.w	r7, r7, #32
 800d784:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d786:	601c      	str	r4, [r3, #0]
 800d788:	9b04      	ldr	r3, [sp, #16]
 800d78a:	601d      	str	r5, [r3, #0]
 800d78c:	e695      	b.n	800d4ba <__gethex+0x12a>
 800d78e:	4299      	cmp	r1, r3
 800d790:	f843 cc04 	str.w	ip, [r3, #-4]
 800d794:	d8d8      	bhi.n	800d748 <__gethex+0x3b8>
 800d796:	68a3      	ldr	r3, [r4, #8]
 800d798:	459b      	cmp	fp, r3
 800d79a:	db19      	blt.n	800d7d0 <__gethex+0x440>
 800d79c:	6861      	ldr	r1, [r4, #4]
 800d79e:	ee18 0a10 	vmov	r0, s16
 800d7a2:	3101      	adds	r1, #1
 800d7a4:	f000 f982 	bl	800daac <_Balloc>
 800d7a8:	4681      	mov	r9, r0
 800d7aa:	b918      	cbnz	r0, 800d7b4 <__gethex+0x424>
 800d7ac:	4b1a      	ldr	r3, [pc, #104]	; (800d818 <__gethex+0x488>)
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	2184      	movs	r1, #132	; 0x84
 800d7b2:	e6a8      	b.n	800d506 <__gethex+0x176>
 800d7b4:	6922      	ldr	r2, [r4, #16]
 800d7b6:	3202      	adds	r2, #2
 800d7b8:	f104 010c 	add.w	r1, r4, #12
 800d7bc:	0092      	lsls	r2, r2, #2
 800d7be:	300c      	adds	r0, #12
 800d7c0:	f7fd f8c4 	bl	800a94c <memcpy>
 800d7c4:	4621      	mov	r1, r4
 800d7c6:	ee18 0a10 	vmov	r0, s16
 800d7ca:	f000 f9af 	bl	800db2c <_Bfree>
 800d7ce:	464c      	mov	r4, r9
 800d7d0:	6923      	ldr	r3, [r4, #16]
 800d7d2:	1c5a      	adds	r2, r3, #1
 800d7d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d7d8:	6122      	str	r2, [r4, #16]
 800d7da:	2201      	movs	r2, #1
 800d7dc:	615a      	str	r2, [r3, #20]
 800d7de:	e7bb      	b.n	800d758 <__gethex+0x3c8>
 800d7e0:	6922      	ldr	r2, [r4, #16]
 800d7e2:	455a      	cmp	r2, fp
 800d7e4:	dd0b      	ble.n	800d7fe <__gethex+0x46e>
 800d7e6:	2101      	movs	r1, #1
 800d7e8:	4620      	mov	r0, r4
 800d7ea:	f7ff fd6a 	bl	800d2c2 <rshift>
 800d7ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d7f2:	3501      	adds	r5, #1
 800d7f4:	42ab      	cmp	r3, r5
 800d7f6:	f6ff aed0 	blt.w	800d59a <__gethex+0x20a>
 800d7fa:	2701      	movs	r7, #1
 800d7fc:	e7c0      	b.n	800d780 <__gethex+0x3f0>
 800d7fe:	f016 061f 	ands.w	r6, r6, #31
 800d802:	d0fa      	beq.n	800d7fa <__gethex+0x46a>
 800d804:	4453      	add	r3, sl
 800d806:	f1c6 0620 	rsb	r6, r6, #32
 800d80a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d80e:	f000 fa3f 	bl	800dc90 <__hi0bits>
 800d812:	42b0      	cmp	r0, r6
 800d814:	dbe7      	blt.n	800d7e6 <__gethex+0x456>
 800d816:	e7f0      	b.n	800d7fa <__gethex+0x46a>
 800d818:	08011378 	.word	0x08011378

0800d81c <L_shift>:
 800d81c:	f1c2 0208 	rsb	r2, r2, #8
 800d820:	0092      	lsls	r2, r2, #2
 800d822:	b570      	push	{r4, r5, r6, lr}
 800d824:	f1c2 0620 	rsb	r6, r2, #32
 800d828:	6843      	ldr	r3, [r0, #4]
 800d82a:	6804      	ldr	r4, [r0, #0]
 800d82c:	fa03 f506 	lsl.w	r5, r3, r6
 800d830:	432c      	orrs	r4, r5
 800d832:	40d3      	lsrs	r3, r2
 800d834:	6004      	str	r4, [r0, #0]
 800d836:	f840 3f04 	str.w	r3, [r0, #4]!
 800d83a:	4288      	cmp	r0, r1
 800d83c:	d3f4      	bcc.n	800d828 <L_shift+0xc>
 800d83e:	bd70      	pop	{r4, r5, r6, pc}

0800d840 <__match>:
 800d840:	b530      	push	{r4, r5, lr}
 800d842:	6803      	ldr	r3, [r0, #0]
 800d844:	3301      	adds	r3, #1
 800d846:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d84a:	b914      	cbnz	r4, 800d852 <__match+0x12>
 800d84c:	6003      	str	r3, [r0, #0]
 800d84e:	2001      	movs	r0, #1
 800d850:	bd30      	pop	{r4, r5, pc}
 800d852:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d856:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d85a:	2d19      	cmp	r5, #25
 800d85c:	bf98      	it	ls
 800d85e:	3220      	addls	r2, #32
 800d860:	42a2      	cmp	r2, r4
 800d862:	d0f0      	beq.n	800d846 <__match+0x6>
 800d864:	2000      	movs	r0, #0
 800d866:	e7f3      	b.n	800d850 <__match+0x10>

0800d868 <__hexnan>:
 800d868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d86c:	680b      	ldr	r3, [r1, #0]
 800d86e:	115e      	asrs	r6, r3, #5
 800d870:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d874:	f013 031f 	ands.w	r3, r3, #31
 800d878:	b087      	sub	sp, #28
 800d87a:	bf18      	it	ne
 800d87c:	3604      	addne	r6, #4
 800d87e:	2500      	movs	r5, #0
 800d880:	1f37      	subs	r7, r6, #4
 800d882:	4690      	mov	r8, r2
 800d884:	6802      	ldr	r2, [r0, #0]
 800d886:	9301      	str	r3, [sp, #4]
 800d888:	4682      	mov	sl, r0
 800d88a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d88e:	46b9      	mov	r9, r7
 800d890:	463c      	mov	r4, r7
 800d892:	9502      	str	r5, [sp, #8]
 800d894:	46ab      	mov	fp, r5
 800d896:	7851      	ldrb	r1, [r2, #1]
 800d898:	1c53      	adds	r3, r2, #1
 800d89a:	9303      	str	r3, [sp, #12]
 800d89c:	b341      	cbz	r1, 800d8f0 <__hexnan+0x88>
 800d89e:	4608      	mov	r0, r1
 800d8a0:	9205      	str	r2, [sp, #20]
 800d8a2:	9104      	str	r1, [sp, #16]
 800d8a4:	f7ff fd5f 	bl	800d366 <__hexdig_fun>
 800d8a8:	2800      	cmp	r0, #0
 800d8aa:	d14f      	bne.n	800d94c <__hexnan+0xe4>
 800d8ac:	9904      	ldr	r1, [sp, #16]
 800d8ae:	9a05      	ldr	r2, [sp, #20]
 800d8b0:	2920      	cmp	r1, #32
 800d8b2:	d818      	bhi.n	800d8e6 <__hexnan+0x7e>
 800d8b4:	9b02      	ldr	r3, [sp, #8]
 800d8b6:	459b      	cmp	fp, r3
 800d8b8:	dd13      	ble.n	800d8e2 <__hexnan+0x7a>
 800d8ba:	454c      	cmp	r4, r9
 800d8bc:	d206      	bcs.n	800d8cc <__hexnan+0x64>
 800d8be:	2d07      	cmp	r5, #7
 800d8c0:	dc04      	bgt.n	800d8cc <__hexnan+0x64>
 800d8c2:	462a      	mov	r2, r5
 800d8c4:	4649      	mov	r1, r9
 800d8c6:	4620      	mov	r0, r4
 800d8c8:	f7ff ffa8 	bl	800d81c <L_shift>
 800d8cc:	4544      	cmp	r4, r8
 800d8ce:	d950      	bls.n	800d972 <__hexnan+0x10a>
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	f1a4 0904 	sub.w	r9, r4, #4
 800d8d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d8da:	f8cd b008 	str.w	fp, [sp, #8]
 800d8de:	464c      	mov	r4, r9
 800d8e0:	461d      	mov	r5, r3
 800d8e2:	9a03      	ldr	r2, [sp, #12]
 800d8e4:	e7d7      	b.n	800d896 <__hexnan+0x2e>
 800d8e6:	2929      	cmp	r1, #41	; 0x29
 800d8e8:	d156      	bne.n	800d998 <__hexnan+0x130>
 800d8ea:	3202      	adds	r2, #2
 800d8ec:	f8ca 2000 	str.w	r2, [sl]
 800d8f0:	f1bb 0f00 	cmp.w	fp, #0
 800d8f4:	d050      	beq.n	800d998 <__hexnan+0x130>
 800d8f6:	454c      	cmp	r4, r9
 800d8f8:	d206      	bcs.n	800d908 <__hexnan+0xa0>
 800d8fa:	2d07      	cmp	r5, #7
 800d8fc:	dc04      	bgt.n	800d908 <__hexnan+0xa0>
 800d8fe:	462a      	mov	r2, r5
 800d900:	4649      	mov	r1, r9
 800d902:	4620      	mov	r0, r4
 800d904:	f7ff ff8a 	bl	800d81c <L_shift>
 800d908:	4544      	cmp	r4, r8
 800d90a:	d934      	bls.n	800d976 <__hexnan+0x10e>
 800d90c:	f1a8 0204 	sub.w	r2, r8, #4
 800d910:	4623      	mov	r3, r4
 800d912:	f853 1b04 	ldr.w	r1, [r3], #4
 800d916:	f842 1f04 	str.w	r1, [r2, #4]!
 800d91a:	429f      	cmp	r7, r3
 800d91c:	d2f9      	bcs.n	800d912 <__hexnan+0xaa>
 800d91e:	1b3b      	subs	r3, r7, r4
 800d920:	f023 0303 	bic.w	r3, r3, #3
 800d924:	3304      	adds	r3, #4
 800d926:	3401      	adds	r4, #1
 800d928:	3e03      	subs	r6, #3
 800d92a:	42b4      	cmp	r4, r6
 800d92c:	bf88      	it	hi
 800d92e:	2304      	movhi	r3, #4
 800d930:	4443      	add	r3, r8
 800d932:	2200      	movs	r2, #0
 800d934:	f843 2b04 	str.w	r2, [r3], #4
 800d938:	429f      	cmp	r7, r3
 800d93a:	d2fb      	bcs.n	800d934 <__hexnan+0xcc>
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	b91b      	cbnz	r3, 800d948 <__hexnan+0xe0>
 800d940:	4547      	cmp	r7, r8
 800d942:	d127      	bne.n	800d994 <__hexnan+0x12c>
 800d944:	2301      	movs	r3, #1
 800d946:	603b      	str	r3, [r7, #0]
 800d948:	2005      	movs	r0, #5
 800d94a:	e026      	b.n	800d99a <__hexnan+0x132>
 800d94c:	3501      	adds	r5, #1
 800d94e:	2d08      	cmp	r5, #8
 800d950:	f10b 0b01 	add.w	fp, fp, #1
 800d954:	dd06      	ble.n	800d964 <__hexnan+0xfc>
 800d956:	4544      	cmp	r4, r8
 800d958:	d9c3      	bls.n	800d8e2 <__hexnan+0x7a>
 800d95a:	2300      	movs	r3, #0
 800d95c:	f844 3c04 	str.w	r3, [r4, #-4]
 800d960:	2501      	movs	r5, #1
 800d962:	3c04      	subs	r4, #4
 800d964:	6822      	ldr	r2, [r4, #0]
 800d966:	f000 000f 	and.w	r0, r0, #15
 800d96a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d96e:	6022      	str	r2, [r4, #0]
 800d970:	e7b7      	b.n	800d8e2 <__hexnan+0x7a>
 800d972:	2508      	movs	r5, #8
 800d974:	e7b5      	b.n	800d8e2 <__hexnan+0x7a>
 800d976:	9b01      	ldr	r3, [sp, #4]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d0df      	beq.n	800d93c <__hexnan+0xd4>
 800d97c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d980:	f1c3 0320 	rsb	r3, r3, #32
 800d984:	fa22 f303 	lsr.w	r3, r2, r3
 800d988:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d98c:	401a      	ands	r2, r3
 800d98e:	f846 2c04 	str.w	r2, [r6, #-4]
 800d992:	e7d3      	b.n	800d93c <__hexnan+0xd4>
 800d994:	3f04      	subs	r7, #4
 800d996:	e7d1      	b.n	800d93c <__hexnan+0xd4>
 800d998:	2004      	movs	r0, #4
 800d99a:	b007      	add	sp, #28
 800d99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d9a0 <_localeconv_r>:
 800d9a0:	4800      	ldr	r0, [pc, #0]	; (800d9a4 <_localeconv_r+0x4>)
 800d9a2:	4770      	bx	lr
 800d9a4:	200001a4 	.word	0x200001a4

0800d9a8 <__retarget_lock_init_recursive>:
 800d9a8:	4770      	bx	lr

0800d9aa <__retarget_lock_acquire_recursive>:
 800d9aa:	4770      	bx	lr

0800d9ac <__retarget_lock_release_recursive>:
 800d9ac:	4770      	bx	lr

0800d9ae <__swhatbuf_r>:
 800d9ae:	b570      	push	{r4, r5, r6, lr}
 800d9b0:	460e      	mov	r6, r1
 800d9b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9b6:	2900      	cmp	r1, #0
 800d9b8:	b096      	sub	sp, #88	; 0x58
 800d9ba:	4614      	mov	r4, r2
 800d9bc:	461d      	mov	r5, r3
 800d9be:	da08      	bge.n	800d9d2 <__swhatbuf_r+0x24>
 800d9c0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	602a      	str	r2, [r5, #0]
 800d9c8:	061a      	lsls	r2, r3, #24
 800d9ca:	d410      	bmi.n	800d9ee <__swhatbuf_r+0x40>
 800d9cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9d0:	e00e      	b.n	800d9f0 <__swhatbuf_r+0x42>
 800d9d2:	466a      	mov	r2, sp
 800d9d4:	f001 f84a 	bl	800ea6c <_fstat_r>
 800d9d8:	2800      	cmp	r0, #0
 800d9da:	dbf1      	blt.n	800d9c0 <__swhatbuf_r+0x12>
 800d9dc:	9a01      	ldr	r2, [sp, #4]
 800d9de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d9e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d9e6:	425a      	negs	r2, r3
 800d9e8:	415a      	adcs	r2, r3
 800d9ea:	602a      	str	r2, [r5, #0]
 800d9ec:	e7ee      	b.n	800d9cc <__swhatbuf_r+0x1e>
 800d9ee:	2340      	movs	r3, #64	; 0x40
 800d9f0:	2000      	movs	r0, #0
 800d9f2:	6023      	str	r3, [r4, #0]
 800d9f4:	b016      	add	sp, #88	; 0x58
 800d9f6:	bd70      	pop	{r4, r5, r6, pc}

0800d9f8 <__smakebuf_r>:
 800d9f8:	898b      	ldrh	r3, [r1, #12]
 800d9fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d9fc:	079d      	lsls	r5, r3, #30
 800d9fe:	4606      	mov	r6, r0
 800da00:	460c      	mov	r4, r1
 800da02:	d507      	bpl.n	800da14 <__smakebuf_r+0x1c>
 800da04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800da08:	6023      	str	r3, [r4, #0]
 800da0a:	6123      	str	r3, [r4, #16]
 800da0c:	2301      	movs	r3, #1
 800da0e:	6163      	str	r3, [r4, #20]
 800da10:	b002      	add	sp, #8
 800da12:	bd70      	pop	{r4, r5, r6, pc}
 800da14:	ab01      	add	r3, sp, #4
 800da16:	466a      	mov	r2, sp
 800da18:	f7ff ffc9 	bl	800d9ae <__swhatbuf_r>
 800da1c:	9900      	ldr	r1, [sp, #0]
 800da1e:	4605      	mov	r5, r0
 800da20:	4630      	mov	r0, r6
 800da22:	f000 fd87 	bl	800e534 <_malloc_r>
 800da26:	b948      	cbnz	r0, 800da3c <__smakebuf_r+0x44>
 800da28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da2c:	059a      	lsls	r2, r3, #22
 800da2e:	d4ef      	bmi.n	800da10 <__smakebuf_r+0x18>
 800da30:	f023 0303 	bic.w	r3, r3, #3
 800da34:	f043 0302 	orr.w	r3, r3, #2
 800da38:	81a3      	strh	r3, [r4, #12]
 800da3a:	e7e3      	b.n	800da04 <__smakebuf_r+0xc>
 800da3c:	4b0d      	ldr	r3, [pc, #52]	; (800da74 <__smakebuf_r+0x7c>)
 800da3e:	62b3      	str	r3, [r6, #40]	; 0x28
 800da40:	89a3      	ldrh	r3, [r4, #12]
 800da42:	6020      	str	r0, [r4, #0]
 800da44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da48:	81a3      	strh	r3, [r4, #12]
 800da4a:	9b00      	ldr	r3, [sp, #0]
 800da4c:	6163      	str	r3, [r4, #20]
 800da4e:	9b01      	ldr	r3, [sp, #4]
 800da50:	6120      	str	r0, [r4, #16]
 800da52:	b15b      	cbz	r3, 800da6c <__smakebuf_r+0x74>
 800da54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da58:	4630      	mov	r0, r6
 800da5a:	f001 f819 	bl	800ea90 <_isatty_r>
 800da5e:	b128      	cbz	r0, 800da6c <__smakebuf_r+0x74>
 800da60:	89a3      	ldrh	r3, [r4, #12]
 800da62:	f023 0303 	bic.w	r3, r3, #3
 800da66:	f043 0301 	orr.w	r3, r3, #1
 800da6a:	81a3      	strh	r3, [r4, #12]
 800da6c:	89a0      	ldrh	r0, [r4, #12]
 800da6e:	4305      	orrs	r5, r0
 800da70:	81a5      	strh	r5, [r4, #12]
 800da72:	e7cd      	b.n	800da10 <__smakebuf_r+0x18>
 800da74:	0800d121 	.word	0x0800d121

0800da78 <malloc>:
 800da78:	4b02      	ldr	r3, [pc, #8]	; (800da84 <malloc+0xc>)
 800da7a:	4601      	mov	r1, r0
 800da7c:	6818      	ldr	r0, [r3, #0]
 800da7e:	f000 bd59 	b.w	800e534 <_malloc_r>
 800da82:	bf00      	nop
 800da84:	2000004c 	.word	0x2000004c

0800da88 <__ascii_mbtowc>:
 800da88:	b082      	sub	sp, #8
 800da8a:	b901      	cbnz	r1, 800da8e <__ascii_mbtowc+0x6>
 800da8c:	a901      	add	r1, sp, #4
 800da8e:	b142      	cbz	r2, 800daa2 <__ascii_mbtowc+0x1a>
 800da90:	b14b      	cbz	r3, 800daa6 <__ascii_mbtowc+0x1e>
 800da92:	7813      	ldrb	r3, [r2, #0]
 800da94:	600b      	str	r3, [r1, #0]
 800da96:	7812      	ldrb	r2, [r2, #0]
 800da98:	1e10      	subs	r0, r2, #0
 800da9a:	bf18      	it	ne
 800da9c:	2001      	movne	r0, #1
 800da9e:	b002      	add	sp, #8
 800daa0:	4770      	bx	lr
 800daa2:	4610      	mov	r0, r2
 800daa4:	e7fb      	b.n	800da9e <__ascii_mbtowc+0x16>
 800daa6:	f06f 0001 	mvn.w	r0, #1
 800daaa:	e7f8      	b.n	800da9e <__ascii_mbtowc+0x16>

0800daac <_Balloc>:
 800daac:	b570      	push	{r4, r5, r6, lr}
 800daae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dab0:	4604      	mov	r4, r0
 800dab2:	460d      	mov	r5, r1
 800dab4:	b976      	cbnz	r6, 800dad4 <_Balloc+0x28>
 800dab6:	2010      	movs	r0, #16
 800dab8:	f7ff ffde 	bl	800da78 <malloc>
 800dabc:	4602      	mov	r2, r0
 800dabe:	6260      	str	r0, [r4, #36]	; 0x24
 800dac0:	b920      	cbnz	r0, 800dacc <_Balloc+0x20>
 800dac2:	4b18      	ldr	r3, [pc, #96]	; (800db24 <_Balloc+0x78>)
 800dac4:	4818      	ldr	r0, [pc, #96]	; (800db28 <_Balloc+0x7c>)
 800dac6:	2166      	movs	r1, #102	; 0x66
 800dac8:	f000 ff90 	bl	800e9ec <__assert_func>
 800dacc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dad0:	6006      	str	r6, [r0, #0]
 800dad2:	60c6      	str	r6, [r0, #12]
 800dad4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dad6:	68f3      	ldr	r3, [r6, #12]
 800dad8:	b183      	cbz	r3, 800dafc <_Balloc+0x50>
 800dada:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dadc:	68db      	ldr	r3, [r3, #12]
 800dade:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dae2:	b9b8      	cbnz	r0, 800db14 <_Balloc+0x68>
 800dae4:	2101      	movs	r1, #1
 800dae6:	fa01 f605 	lsl.w	r6, r1, r5
 800daea:	1d72      	adds	r2, r6, #5
 800daec:	0092      	lsls	r2, r2, #2
 800daee:	4620      	mov	r0, r4
 800daf0:	f000 fc9d 	bl	800e42e <_calloc_r>
 800daf4:	b160      	cbz	r0, 800db10 <_Balloc+0x64>
 800daf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dafa:	e00e      	b.n	800db1a <_Balloc+0x6e>
 800dafc:	2221      	movs	r2, #33	; 0x21
 800dafe:	2104      	movs	r1, #4
 800db00:	4620      	mov	r0, r4
 800db02:	f000 fc94 	bl	800e42e <_calloc_r>
 800db06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db08:	60f0      	str	r0, [r6, #12]
 800db0a:	68db      	ldr	r3, [r3, #12]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d1e4      	bne.n	800dada <_Balloc+0x2e>
 800db10:	2000      	movs	r0, #0
 800db12:	bd70      	pop	{r4, r5, r6, pc}
 800db14:	6802      	ldr	r2, [r0, #0]
 800db16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800db1a:	2300      	movs	r3, #0
 800db1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800db20:	e7f7      	b.n	800db12 <_Balloc+0x66>
 800db22:	bf00      	nop
 800db24:	08011306 	.word	0x08011306
 800db28:	08011468 	.word	0x08011468

0800db2c <_Bfree>:
 800db2c:	b570      	push	{r4, r5, r6, lr}
 800db2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800db30:	4605      	mov	r5, r0
 800db32:	460c      	mov	r4, r1
 800db34:	b976      	cbnz	r6, 800db54 <_Bfree+0x28>
 800db36:	2010      	movs	r0, #16
 800db38:	f7ff ff9e 	bl	800da78 <malloc>
 800db3c:	4602      	mov	r2, r0
 800db3e:	6268      	str	r0, [r5, #36]	; 0x24
 800db40:	b920      	cbnz	r0, 800db4c <_Bfree+0x20>
 800db42:	4b09      	ldr	r3, [pc, #36]	; (800db68 <_Bfree+0x3c>)
 800db44:	4809      	ldr	r0, [pc, #36]	; (800db6c <_Bfree+0x40>)
 800db46:	218a      	movs	r1, #138	; 0x8a
 800db48:	f000 ff50 	bl	800e9ec <__assert_func>
 800db4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db50:	6006      	str	r6, [r0, #0]
 800db52:	60c6      	str	r6, [r0, #12]
 800db54:	b13c      	cbz	r4, 800db66 <_Bfree+0x3a>
 800db56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800db58:	6862      	ldr	r2, [r4, #4]
 800db5a:	68db      	ldr	r3, [r3, #12]
 800db5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800db60:	6021      	str	r1, [r4, #0]
 800db62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800db66:	bd70      	pop	{r4, r5, r6, pc}
 800db68:	08011306 	.word	0x08011306
 800db6c:	08011468 	.word	0x08011468

0800db70 <__multadd>:
 800db70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db74:	690d      	ldr	r5, [r1, #16]
 800db76:	4607      	mov	r7, r0
 800db78:	460c      	mov	r4, r1
 800db7a:	461e      	mov	r6, r3
 800db7c:	f101 0c14 	add.w	ip, r1, #20
 800db80:	2000      	movs	r0, #0
 800db82:	f8dc 3000 	ldr.w	r3, [ip]
 800db86:	b299      	uxth	r1, r3
 800db88:	fb02 6101 	mla	r1, r2, r1, r6
 800db8c:	0c1e      	lsrs	r6, r3, #16
 800db8e:	0c0b      	lsrs	r3, r1, #16
 800db90:	fb02 3306 	mla	r3, r2, r6, r3
 800db94:	b289      	uxth	r1, r1
 800db96:	3001      	adds	r0, #1
 800db98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800db9c:	4285      	cmp	r5, r0
 800db9e:	f84c 1b04 	str.w	r1, [ip], #4
 800dba2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dba6:	dcec      	bgt.n	800db82 <__multadd+0x12>
 800dba8:	b30e      	cbz	r6, 800dbee <__multadd+0x7e>
 800dbaa:	68a3      	ldr	r3, [r4, #8]
 800dbac:	42ab      	cmp	r3, r5
 800dbae:	dc19      	bgt.n	800dbe4 <__multadd+0x74>
 800dbb0:	6861      	ldr	r1, [r4, #4]
 800dbb2:	4638      	mov	r0, r7
 800dbb4:	3101      	adds	r1, #1
 800dbb6:	f7ff ff79 	bl	800daac <_Balloc>
 800dbba:	4680      	mov	r8, r0
 800dbbc:	b928      	cbnz	r0, 800dbca <__multadd+0x5a>
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	4b0c      	ldr	r3, [pc, #48]	; (800dbf4 <__multadd+0x84>)
 800dbc2:	480d      	ldr	r0, [pc, #52]	; (800dbf8 <__multadd+0x88>)
 800dbc4:	21b5      	movs	r1, #181	; 0xb5
 800dbc6:	f000 ff11 	bl	800e9ec <__assert_func>
 800dbca:	6922      	ldr	r2, [r4, #16]
 800dbcc:	3202      	adds	r2, #2
 800dbce:	f104 010c 	add.w	r1, r4, #12
 800dbd2:	0092      	lsls	r2, r2, #2
 800dbd4:	300c      	adds	r0, #12
 800dbd6:	f7fc feb9 	bl	800a94c <memcpy>
 800dbda:	4621      	mov	r1, r4
 800dbdc:	4638      	mov	r0, r7
 800dbde:	f7ff ffa5 	bl	800db2c <_Bfree>
 800dbe2:	4644      	mov	r4, r8
 800dbe4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dbe8:	3501      	adds	r5, #1
 800dbea:	615e      	str	r6, [r3, #20]
 800dbec:	6125      	str	r5, [r4, #16]
 800dbee:	4620      	mov	r0, r4
 800dbf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbf4:	08011378 	.word	0x08011378
 800dbf8:	08011468 	.word	0x08011468

0800dbfc <__s2b>:
 800dbfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc00:	460c      	mov	r4, r1
 800dc02:	4615      	mov	r5, r2
 800dc04:	461f      	mov	r7, r3
 800dc06:	2209      	movs	r2, #9
 800dc08:	3308      	adds	r3, #8
 800dc0a:	4606      	mov	r6, r0
 800dc0c:	fb93 f3f2 	sdiv	r3, r3, r2
 800dc10:	2100      	movs	r1, #0
 800dc12:	2201      	movs	r2, #1
 800dc14:	429a      	cmp	r2, r3
 800dc16:	db09      	blt.n	800dc2c <__s2b+0x30>
 800dc18:	4630      	mov	r0, r6
 800dc1a:	f7ff ff47 	bl	800daac <_Balloc>
 800dc1e:	b940      	cbnz	r0, 800dc32 <__s2b+0x36>
 800dc20:	4602      	mov	r2, r0
 800dc22:	4b19      	ldr	r3, [pc, #100]	; (800dc88 <__s2b+0x8c>)
 800dc24:	4819      	ldr	r0, [pc, #100]	; (800dc8c <__s2b+0x90>)
 800dc26:	21ce      	movs	r1, #206	; 0xce
 800dc28:	f000 fee0 	bl	800e9ec <__assert_func>
 800dc2c:	0052      	lsls	r2, r2, #1
 800dc2e:	3101      	adds	r1, #1
 800dc30:	e7f0      	b.n	800dc14 <__s2b+0x18>
 800dc32:	9b08      	ldr	r3, [sp, #32]
 800dc34:	6143      	str	r3, [r0, #20]
 800dc36:	2d09      	cmp	r5, #9
 800dc38:	f04f 0301 	mov.w	r3, #1
 800dc3c:	6103      	str	r3, [r0, #16]
 800dc3e:	dd16      	ble.n	800dc6e <__s2b+0x72>
 800dc40:	f104 0909 	add.w	r9, r4, #9
 800dc44:	46c8      	mov	r8, r9
 800dc46:	442c      	add	r4, r5
 800dc48:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dc4c:	4601      	mov	r1, r0
 800dc4e:	3b30      	subs	r3, #48	; 0x30
 800dc50:	220a      	movs	r2, #10
 800dc52:	4630      	mov	r0, r6
 800dc54:	f7ff ff8c 	bl	800db70 <__multadd>
 800dc58:	45a0      	cmp	r8, r4
 800dc5a:	d1f5      	bne.n	800dc48 <__s2b+0x4c>
 800dc5c:	f1a5 0408 	sub.w	r4, r5, #8
 800dc60:	444c      	add	r4, r9
 800dc62:	1b2d      	subs	r5, r5, r4
 800dc64:	1963      	adds	r3, r4, r5
 800dc66:	42bb      	cmp	r3, r7
 800dc68:	db04      	blt.n	800dc74 <__s2b+0x78>
 800dc6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc6e:	340a      	adds	r4, #10
 800dc70:	2509      	movs	r5, #9
 800dc72:	e7f6      	b.n	800dc62 <__s2b+0x66>
 800dc74:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dc78:	4601      	mov	r1, r0
 800dc7a:	3b30      	subs	r3, #48	; 0x30
 800dc7c:	220a      	movs	r2, #10
 800dc7e:	4630      	mov	r0, r6
 800dc80:	f7ff ff76 	bl	800db70 <__multadd>
 800dc84:	e7ee      	b.n	800dc64 <__s2b+0x68>
 800dc86:	bf00      	nop
 800dc88:	08011378 	.word	0x08011378
 800dc8c:	08011468 	.word	0x08011468

0800dc90 <__hi0bits>:
 800dc90:	0c03      	lsrs	r3, r0, #16
 800dc92:	041b      	lsls	r3, r3, #16
 800dc94:	b9d3      	cbnz	r3, 800dccc <__hi0bits+0x3c>
 800dc96:	0400      	lsls	r0, r0, #16
 800dc98:	2310      	movs	r3, #16
 800dc9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dc9e:	bf04      	itt	eq
 800dca0:	0200      	lsleq	r0, r0, #8
 800dca2:	3308      	addeq	r3, #8
 800dca4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dca8:	bf04      	itt	eq
 800dcaa:	0100      	lsleq	r0, r0, #4
 800dcac:	3304      	addeq	r3, #4
 800dcae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dcb2:	bf04      	itt	eq
 800dcb4:	0080      	lsleq	r0, r0, #2
 800dcb6:	3302      	addeq	r3, #2
 800dcb8:	2800      	cmp	r0, #0
 800dcba:	db05      	blt.n	800dcc8 <__hi0bits+0x38>
 800dcbc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dcc0:	f103 0301 	add.w	r3, r3, #1
 800dcc4:	bf08      	it	eq
 800dcc6:	2320      	moveq	r3, #32
 800dcc8:	4618      	mov	r0, r3
 800dcca:	4770      	bx	lr
 800dccc:	2300      	movs	r3, #0
 800dcce:	e7e4      	b.n	800dc9a <__hi0bits+0xa>

0800dcd0 <__lo0bits>:
 800dcd0:	6803      	ldr	r3, [r0, #0]
 800dcd2:	f013 0207 	ands.w	r2, r3, #7
 800dcd6:	4601      	mov	r1, r0
 800dcd8:	d00b      	beq.n	800dcf2 <__lo0bits+0x22>
 800dcda:	07da      	lsls	r2, r3, #31
 800dcdc:	d423      	bmi.n	800dd26 <__lo0bits+0x56>
 800dcde:	0798      	lsls	r0, r3, #30
 800dce0:	bf49      	itett	mi
 800dce2:	085b      	lsrmi	r3, r3, #1
 800dce4:	089b      	lsrpl	r3, r3, #2
 800dce6:	2001      	movmi	r0, #1
 800dce8:	600b      	strmi	r3, [r1, #0]
 800dcea:	bf5c      	itt	pl
 800dcec:	600b      	strpl	r3, [r1, #0]
 800dcee:	2002      	movpl	r0, #2
 800dcf0:	4770      	bx	lr
 800dcf2:	b298      	uxth	r0, r3
 800dcf4:	b9a8      	cbnz	r0, 800dd22 <__lo0bits+0x52>
 800dcf6:	0c1b      	lsrs	r3, r3, #16
 800dcf8:	2010      	movs	r0, #16
 800dcfa:	b2da      	uxtb	r2, r3
 800dcfc:	b90a      	cbnz	r2, 800dd02 <__lo0bits+0x32>
 800dcfe:	3008      	adds	r0, #8
 800dd00:	0a1b      	lsrs	r3, r3, #8
 800dd02:	071a      	lsls	r2, r3, #28
 800dd04:	bf04      	itt	eq
 800dd06:	091b      	lsreq	r3, r3, #4
 800dd08:	3004      	addeq	r0, #4
 800dd0a:	079a      	lsls	r2, r3, #30
 800dd0c:	bf04      	itt	eq
 800dd0e:	089b      	lsreq	r3, r3, #2
 800dd10:	3002      	addeq	r0, #2
 800dd12:	07da      	lsls	r2, r3, #31
 800dd14:	d403      	bmi.n	800dd1e <__lo0bits+0x4e>
 800dd16:	085b      	lsrs	r3, r3, #1
 800dd18:	f100 0001 	add.w	r0, r0, #1
 800dd1c:	d005      	beq.n	800dd2a <__lo0bits+0x5a>
 800dd1e:	600b      	str	r3, [r1, #0]
 800dd20:	4770      	bx	lr
 800dd22:	4610      	mov	r0, r2
 800dd24:	e7e9      	b.n	800dcfa <__lo0bits+0x2a>
 800dd26:	2000      	movs	r0, #0
 800dd28:	4770      	bx	lr
 800dd2a:	2020      	movs	r0, #32
 800dd2c:	4770      	bx	lr
	...

0800dd30 <__i2b>:
 800dd30:	b510      	push	{r4, lr}
 800dd32:	460c      	mov	r4, r1
 800dd34:	2101      	movs	r1, #1
 800dd36:	f7ff feb9 	bl	800daac <_Balloc>
 800dd3a:	4602      	mov	r2, r0
 800dd3c:	b928      	cbnz	r0, 800dd4a <__i2b+0x1a>
 800dd3e:	4b05      	ldr	r3, [pc, #20]	; (800dd54 <__i2b+0x24>)
 800dd40:	4805      	ldr	r0, [pc, #20]	; (800dd58 <__i2b+0x28>)
 800dd42:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dd46:	f000 fe51 	bl	800e9ec <__assert_func>
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	6144      	str	r4, [r0, #20]
 800dd4e:	6103      	str	r3, [r0, #16]
 800dd50:	bd10      	pop	{r4, pc}
 800dd52:	bf00      	nop
 800dd54:	08011378 	.word	0x08011378
 800dd58:	08011468 	.word	0x08011468

0800dd5c <__multiply>:
 800dd5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd60:	4691      	mov	r9, r2
 800dd62:	690a      	ldr	r2, [r1, #16]
 800dd64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	bfb8      	it	lt
 800dd6c:	460b      	movlt	r3, r1
 800dd6e:	460c      	mov	r4, r1
 800dd70:	bfbc      	itt	lt
 800dd72:	464c      	movlt	r4, r9
 800dd74:	4699      	movlt	r9, r3
 800dd76:	6927      	ldr	r7, [r4, #16]
 800dd78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dd7c:	68a3      	ldr	r3, [r4, #8]
 800dd7e:	6861      	ldr	r1, [r4, #4]
 800dd80:	eb07 060a 	add.w	r6, r7, sl
 800dd84:	42b3      	cmp	r3, r6
 800dd86:	b085      	sub	sp, #20
 800dd88:	bfb8      	it	lt
 800dd8a:	3101      	addlt	r1, #1
 800dd8c:	f7ff fe8e 	bl	800daac <_Balloc>
 800dd90:	b930      	cbnz	r0, 800dda0 <__multiply+0x44>
 800dd92:	4602      	mov	r2, r0
 800dd94:	4b44      	ldr	r3, [pc, #272]	; (800dea8 <__multiply+0x14c>)
 800dd96:	4845      	ldr	r0, [pc, #276]	; (800deac <__multiply+0x150>)
 800dd98:	f240 115d 	movw	r1, #349	; 0x15d
 800dd9c:	f000 fe26 	bl	800e9ec <__assert_func>
 800dda0:	f100 0514 	add.w	r5, r0, #20
 800dda4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dda8:	462b      	mov	r3, r5
 800ddaa:	2200      	movs	r2, #0
 800ddac:	4543      	cmp	r3, r8
 800ddae:	d321      	bcc.n	800ddf4 <__multiply+0x98>
 800ddb0:	f104 0314 	add.w	r3, r4, #20
 800ddb4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ddb8:	f109 0314 	add.w	r3, r9, #20
 800ddbc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ddc0:	9202      	str	r2, [sp, #8]
 800ddc2:	1b3a      	subs	r2, r7, r4
 800ddc4:	3a15      	subs	r2, #21
 800ddc6:	f022 0203 	bic.w	r2, r2, #3
 800ddca:	3204      	adds	r2, #4
 800ddcc:	f104 0115 	add.w	r1, r4, #21
 800ddd0:	428f      	cmp	r7, r1
 800ddd2:	bf38      	it	cc
 800ddd4:	2204      	movcc	r2, #4
 800ddd6:	9201      	str	r2, [sp, #4]
 800ddd8:	9a02      	ldr	r2, [sp, #8]
 800ddda:	9303      	str	r3, [sp, #12]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d80c      	bhi.n	800ddfa <__multiply+0x9e>
 800dde0:	2e00      	cmp	r6, #0
 800dde2:	dd03      	ble.n	800ddec <__multiply+0x90>
 800dde4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d05a      	beq.n	800dea2 <__multiply+0x146>
 800ddec:	6106      	str	r6, [r0, #16]
 800ddee:	b005      	add	sp, #20
 800ddf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddf4:	f843 2b04 	str.w	r2, [r3], #4
 800ddf8:	e7d8      	b.n	800ddac <__multiply+0x50>
 800ddfa:	f8b3 a000 	ldrh.w	sl, [r3]
 800ddfe:	f1ba 0f00 	cmp.w	sl, #0
 800de02:	d024      	beq.n	800de4e <__multiply+0xf2>
 800de04:	f104 0e14 	add.w	lr, r4, #20
 800de08:	46a9      	mov	r9, r5
 800de0a:	f04f 0c00 	mov.w	ip, #0
 800de0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800de12:	f8d9 1000 	ldr.w	r1, [r9]
 800de16:	fa1f fb82 	uxth.w	fp, r2
 800de1a:	b289      	uxth	r1, r1
 800de1c:	fb0a 110b 	mla	r1, sl, fp, r1
 800de20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800de24:	f8d9 2000 	ldr.w	r2, [r9]
 800de28:	4461      	add	r1, ip
 800de2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800de2e:	fb0a c20b 	mla	r2, sl, fp, ip
 800de32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800de36:	b289      	uxth	r1, r1
 800de38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800de3c:	4577      	cmp	r7, lr
 800de3e:	f849 1b04 	str.w	r1, [r9], #4
 800de42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800de46:	d8e2      	bhi.n	800de0e <__multiply+0xb2>
 800de48:	9a01      	ldr	r2, [sp, #4]
 800de4a:	f845 c002 	str.w	ip, [r5, r2]
 800de4e:	9a03      	ldr	r2, [sp, #12]
 800de50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800de54:	3304      	adds	r3, #4
 800de56:	f1b9 0f00 	cmp.w	r9, #0
 800de5a:	d020      	beq.n	800de9e <__multiply+0x142>
 800de5c:	6829      	ldr	r1, [r5, #0]
 800de5e:	f104 0c14 	add.w	ip, r4, #20
 800de62:	46ae      	mov	lr, r5
 800de64:	f04f 0a00 	mov.w	sl, #0
 800de68:	f8bc b000 	ldrh.w	fp, [ip]
 800de6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800de70:	fb09 220b 	mla	r2, r9, fp, r2
 800de74:	4492      	add	sl, r2
 800de76:	b289      	uxth	r1, r1
 800de78:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800de7c:	f84e 1b04 	str.w	r1, [lr], #4
 800de80:	f85c 2b04 	ldr.w	r2, [ip], #4
 800de84:	f8be 1000 	ldrh.w	r1, [lr]
 800de88:	0c12      	lsrs	r2, r2, #16
 800de8a:	fb09 1102 	mla	r1, r9, r2, r1
 800de8e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800de92:	4567      	cmp	r7, ip
 800de94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800de98:	d8e6      	bhi.n	800de68 <__multiply+0x10c>
 800de9a:	9a01      	ldr	r2, [sp, #4]
 800de9c:	50a9      	str	r1, [r5, r2]
 800de9e:	3504      	adds	r5, #4
 800dea0:	e79a      	b.n	800ddd8 <__multiply+0x7c>
 800dea2:	3e01      	subs	r6, #1
 800dea4:	e79c      	b.n	800dde0 <__multiply+0x84>
 800dea6:	bf00      	nop
 800dea8:	08011378 	.word	0x08011378
 800deac:	08011468 	.word	0x08011468

0800deb0 <__pow5mult>:
 800deb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800deb4:	4615      	mov	r5, r2
 800deb6:	f012 0203 	ands.w	r2, r2, #3
 800deba:	4606      	mov	r6, r0
 800debc:	460f      	mov	r7, r1
 800debe:	d007      	beq.n	800ded0 <__pow5mult+0x20>
 800dec0:	4c25      	ldr	r4, [pc, #148]	; (800df58 <__pow5mult+0xa8>)
 800dec2:	3a01      	subs	r2, #1
 800dec4:	2300      	movs	r3, #0
 800dec6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800deca:	f7ff fe51 	bl	800db70 <__multadd>
 800dece:	4607      	mov	r7, r0
 800ded0:	10ad      	asrs	r5, r5, #2
 800ded2:	d03d      	beq.n	800df50 <__pow5mult+0xa0>
 800ded4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ded6:	b97c      	cbnz	r4, 800def8 <__pow5mult+0x48>
 800ded8:	2010      	movs	r0, #16
 800deda:	f7ff fdcd 	bl	800da78 <malloc>
 800dede:	4602      	mov	r2, r0
 800dee0:	6270      	str	r0, [r6, #36]	; 0x24
 800dee2:	b928      	cbnz	r0, 800def0 <__pow5mult+0x40>
 800dee4:	4b1d      	ldr	r3, [pc, #116]	; (800df5c <__pow5mult+0xac>)
 800dee6:	481e      	ldr	r0, [pc, #120]	; (800df60 <__pow5mult+0xb0>)
 800dee8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800deec:	f000 fd7e 	bl	800e9ec <__assert_func>
 800def0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800def4:	6004      	str	r4, [r0, #0]
 800def6:	60c4      	str	r4, [r0, #12]
 800def8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800defc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800df00:	b94c      	cbnz	r4, 800df16 <__pow5mult+0x66>
 800df02:	f240 2171 	movw	r1, #625	; 0x271
 800df06:	4630      	mov	r0, r6
 800df08:	f7ff ff12 	bl	800dd30 <__i2b>
 800df0c:	2300      	movs	r3, #0
 800df0e:	f8c8 0008 	str.w	r0, [r8, #8]
 800df12:	4604      	mov	r4, r0
 800df14:	6003      	str	r3, [r0, #0]
 800df16:	f04f 0900 	mov.w	r9, #0
 800df1a:	07eb      	lsls	r3, r5, #31
 800df1c:	d50a      	bpl.n	800df34 <__pow5mult+0x84>
 800df1e:	4639      	mov	r1, r7
 800df20:	4622      	mov	r2, r4
 800df22:	4630      	mov	r0, r6
 800df24:	f7ff ff1a 	bl	800dd5c <__multiply>
 800df28:	4639      	mov	r1, r7
 800df2a:	4680      	mov	r8, r0
 800df2c:	4630      	mov	r0, r6
 800df2e:	f7ff fdfd 	bl	800db2c <_Bfree>
 800df32:	4647      	mov	r7, r8
 800df34:	106d      	asrs	r5, r5, #1
 800df36:	d00b      	beq.n	800df50 <__pow5mult+0xa0>
 800df38:	6820      	ldr	r0, [r4, #0]
 800df3a:	b938      	cbnz	r0, 800df4c <__pow5mult+0x9c>
 800df3c:	4622      	mov	r2, r4
 800df3e:	4621      	mov	r1, r4
 800df40:	4630      	mov	r0, r6
 800df42:	f7ff ff0b 	bl	800dd5c <__multiply>
 800df46:	6020      	str	r0, [r4, #0]
 800df48:	f8c0 9000 	str.w	r9, [r0]
 800df4c:	4604      	mov	r4, r0
 800df4e:	e7e4      	b.n	800df1a <__pow5mult+0x6a>
 800df50:	4638      	mov	r0, r7
 800df52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df56:	bf00      	nop
 800df58:	080115b8 	.word	0x080115b8
 800df5c:	08011306 	.word	0x08011306
 800df60:	08011468 	.word	0x08011468

0800df64 <__lshift>:
 800df64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df68:	460c      	mov	r4, r1
 800df6a:	6849      	ldr	r1, [r1, #4]
 800df6c:	6923      	ldr	r3, [r4, #16]
 800df6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800df72:	68a3      	ldr	r3, [r4, #8]
 800df74:	4607      	mov	r7, r0
 800df76:	4691      	mov	r9, r2
 800df78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800df7c:	f108 0601 	add.w	r6, r8, #1
 800df80:	42b3      	cmp	r3, r6
 800df82:	db0b      	blt.n	800df9c <__lshift+0x38>
 800df84:	4638      	mov	r0, r7
 800df86:	f7ff fd91 	bl	800daac <_Balloc>
 800df8a:	4605      	mov	r5, r0
 800df8c:	b948      	cbnz	r0, 800dfa2 <__lshift+0x3e>
 800df8e:	4602      	mov	r2, r0
 800df90:	4b2a      	ldr	r3, [pc, #168]	; (800e03c <__lshift+0xd8>)
 800df92:	482b      	ldr	r0, [pc, #172]	; (800e040 <__lshift+0xdc>)
 800df94:	f240 11d9 	movw	r1, #473	; 0x1d9
 800df98:	f000 fd28 	bl	800e9ec <__assert_func>
 800df9c:	3101      	adds	r1, #1
 800df9e:	005b      	lsls	r3, r3, #1
 800dfa0:	e7ee      	b.n	800df80 <__lshift+0x1c>
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	f100 0114 	add.w	r1, r0, #20
 800dfa8:	f100 0210 	add.w	r2, r0, #16
 800dfac:	4618      	mov	r0, r3
 800dfae:	4553      	cmp	r3, sl
 800dfb0:	db37      	blt.n	800e022 <__lshift+0xbe>
 800dfb2:	6920      	ldr	r0, [r4, #16]
 800dfb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dfb8:	f104 0314 	add.w	r3, r4, #20
 800dfbc:	f019 091f 	ands.w	r9, r9, #31
 800dfc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dfc4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dfc8:	d02f      	beq.n	800e02a <__lshift+0xc6>
 800dfca:	f1c9 0e20 	rsb	lr, r9, #32
 800dfce:	468a      	mov	sl, r1
 800dfd0:	f04f 0c00 	mov.w	ip, #0
 800dfd4:	681a      	ldr	r2, [r3, #0]
 800dfd6:	fa02 f209 	lsl.w	r2, r2, r9
 800dfda:	ea42 020c 	orr.w	r2, r2, ip
 800dfde:	f84a 2b04 	str.w	r2, [sl], #4
 800dfe2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfe6:	4298      	cmp	r0, r3
 800dfe8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dfec:	d8f2      	bhi.n	800dfd4 <__lshift+0x70>
 800dfee:	1b03      	subs	r3, r0, r4
 800dff0:	3b15      	subs	r3, #21
 800dff2:	f023 0303 	bic.w	r3, r3, #3
 800dff6:	3304      	adds	r3, #4
 800dff8:	f104 0215 	add.w	r2, r4, #21
 800dffc:	4290      	cmp	r0, r2
 800dffe:	bf38      	it	cc
 800e000:	2304      	movcc	r3, #4
 800e002:	f841 c003 	str.w	ip, [r1, r3]
 800e006:	f1bc 0f00 	cmp.w	ip, #0
 800e00a:	d001      	beq.n	800e010 <__lshift+0xac>
 800e00c:	f108 0602 	add.w	r6, r8, #2
 800e010:	3e01      	subs	r6, #1
 800e012:	4638      	mov	r0, r7
 800e014:	612e      	str	r6, [r5, #16]
 800e016:	4621      	mov	r1, r4
 800e018:	f7ff fd88 	bl	800db2c <_Bfree>
 800e01c:	4628      	mov	r0, r5
 800e01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e022:	f842 0f04 	str.w	r0, [r2, #4]!
 800e026:	3301      	adds	r3, #1
 800e028:	e7c1      	b.n	800dfae <__lshift+0x4a>
 800e02a:	3904      	subs	r1, #4
 800e02c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e030:	f841 2f04 	str.w	r2, [r1, #4]!
 800e034:	4298      	cmp	r0, r3
 800e036:	d8f9      	bhi.n	800e02c <__lshift+0xc8>
 800e038:	e7ea      	b.n	800e010 <__lshift+0xac>
 800e03a:	bf00      	nop
 800e03c:	08011378 	.word	0x08011378
 800e040:	08011468 	.word	0x08011468

0800e044 <__mcmp>:
 800e044:	b530      	push	{r4, r5, lr}
 800e046:	6902      	ldr	r2, [r0, #16]
 800e048:	690c      	ldr	r4, [r1, #16]
 800e04a:	1b12      	subs	r2, r2, r4
 800e04c:	d10e      	bne.n	800e06c <__mcmp+0x28>
 800e04e:	f100 0314 	add.w	r3, r0, #20
 800e052:	3114      	adds	r1, #20
 800e054:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e058:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e05c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e060:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e064:	42a5      	cmp	r5, r4
 800e066:	d003      	beq.n	800e070 <__mcmp+0x2c>
 800e068:	d305      	bcc.n	800e076 <__mcmp+0x32>
 800e06a:	2201      	movs	r2, #1
 800e06c:	4610      	mov	r0, r2
 800e06e:	bd30      	pop	{r4, r5, pc}
 800e070:	4283      	cmp	r3, r0
 800e072:	d3f3      	bcc.n	800e05c <__mcmp+0x18>
 800e074:	e7fa      	b.n	800e06c <__mcmp+0x28>
 800e076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e07a:	e7f7      	b.n	800e06c <__mcmp+0x28>

0800e07c <__mdiff>:
 800e07c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e080:	460c      	mov	r4, r1
 800e082:	4606      	mov	r6, r0
 800e084:	4611      	mov	r1, r2
 800e086:	4620      	mov	r0, r4
 800e088:	4690      	mov	r8, r2
 800e08a:	f7ff ffdb 	bl	800e044 <__mcmp>
 800e08e:	1e05      	subs	r5, r0, #0
 800e090:	d110      	bne.n	800e0b4 <__mdiff+0x38>
 800e092:	4629      	mov	r1, r5
 800e094:	4630      	mov	r0, r6
 800e096:	f7ff fd09 	bl	800daac <_Balloc>
 800e09a:	b930      	cbnz	r0, 800e0aa <__mdiff+0x2e>
 800e09c:	4b3a      	ldr	r3, [pc, #232]	; (800e188 <__mdiff+0x10c>)
 800e09e:	4602      	mov	r2, r0
 800e0a0:	f240 2132 	movw	r1, #562	; 0x232
 800e0a4:	4839      	ldr	r0, [pc, #228]	; (800e18c <__mdiff+0x110>)
 800e0a6:	f000 fca1 	bl	800e9ec <__assert_func>
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e0b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0b4:	bfa4      	itt	ge
 800e0b6:	4643      	movge	r3, r8
 800e0b8:	46a0      	movge	r8, r4
 800e0ba:	4630      	mov	r0, r6
 800e0bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e0c0:	bfa6      	itte	ge
 800e0c2:	461c      	movge	r4, r3
 800e0c4:	2500      	movge	r5, #0
 800e0c6:	2501      	movlt	r5, #1
 800e0c8:	f7ff fcf0 	bl	800daac <_Balloc>
 800e0cc:	b920      	cbnz	r0, 800e0d8 <__mdiff+0x5c>
 800e0ce:	4b2e      	ldr	r3, [pc, #184]	; (800e188 <__mdiff+0x10c>)
 800e0d0:	4602      	mov	r2, r0
 800e0d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e0d6:	e7e5      	b.n	800e0a4 <__mdiff+0x28>
 800e0d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e0dc:	6926      	ldr	r6, [r4, #16]
 800e0de:	60c5      	str	r5, [r0, #12]
 800e0e0:	f104 0914 	add.w	r9, r4, #20
 800e0e4:	f108 0514 	add.w	r5, r8, #20
 800e0e8:	f100 0e14 	add.w	lr, r0, #20
 800e0ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e0f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e0f4:	f108 0210 	add.w	r2, r8, #16
 800e0f8:	46f2      	mov	sl, lr
 800e0fa:	2100      	movs	r1, #0
 800e0fc:	f859 3b04 	ldr.w	r3, [r9], #4
 800e100:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e104:	fa1f f883 	uxth.w	r8, r3
 800e108:	fa11 f18b 	uxtah	r1, r1, fp
 800e10c:	0c1b      	lsrs	r3, r3, #16
 800e10e:	eba1 0808 	sub.w	r8, r1, r8
 800e112:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e116:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e11a:	fa1f f888 	uxth.w	r8, r8
 800e11e:	1419      	asrs	r1, r3, #16
 800e120:	454e      	cmp	r6, r9
 800e122:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e126:	f84a 3b04 	str.w	r3, [sl], #4
 800e12a:	d8e7      	bhi.n	800e0fc <__mdiff+0x80>
 800e12c:	1b33      	subs	r3, r6, r4
 800e12e:	3b15      	subs	r3, #21
 800e130:	f023 0303 	bic.w	r3, r3, #3
 800e134:	3304      	adds	r3, #4
 800e136:	3415      	adds	r4, #21
 800e138:	42a6      	cmp	r6, r4
 800e13a:	bf38      	it	cc
 800e13c:	2304      	movcc	r3, #4
 800e13e:	441d      	add	r5, r3
 800e140:	4473      	add	r3, lr
 800e142:	469e      	mov	lr, r3
 800e144:	462e      	mov	r6, r5
 800e146:	4566      	cmp	r6, ip
 800e148:	d30e      	bcc.n	800e168 <__mdiff+0xec>
 800e14a:	f10c 0203 	add.w	r2, ip, #3
 800e14e:	1b52      	subs	r2, r2, r5
 800e150:	f022 0203 	bic.w	r2, r2, #3
 800e154:	3d03      	subs	r5, #3
 800e156:	45ac      	cmp	ip, r5
 800e158:	bf38      	it	cc
 800e15a:	2200      	movcc	r2, #0
 800e15c:	441a      	add	r2, r3
 800e15e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e162:	b17b      	cbz	r3, 800e184 <__mdiff+0x108>
 800e164:	6107      	str	r7, [r0, #16]
 800e166:	e7a3      	b.n	800e0b0 <__mdiff+0x34>
 800e168:	f856 8b04 	ldr.w	r8, [r6], #4
 800e16c:	fa11 f288 	uxtah	r2, r1, r8
 800e170:	1414      	asrs	r4, r2, #16
 800e172:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e176:	b292      	uxth	r2, r2
 800e178:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e17c:	f84e 2b04 	str.w	r2, [lr], #4
 800e180:	1421      	asrs	r1, r4, #16
 800e182:	e7e0      	b.n	800e146 <__mdiff+0xca>
 800e184:	3f01      	subs	r7, #1
 800e186:	e7ea      	b.n	800e15e <__mdiff+0xe2>
 800e188:	08011378 	.word	0x08011378
 800e18c:	08011468 	.word	0x08011468

0800e190 <__ulp>:
 800e190:	b082      	sub	sp, #8
 800e192:	ed8d 0b00 	vstr	d0, [sp]
 800e196:	9b01      	ldr	r3, [sp, #4]
 800e198:	4912      	ldr	r1, [pc, #72]	; (800e1e4 <__ulp+0x54>)
 800e19a:	4019      	ands	r1, r3
 800e19c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e1a0:	2900      	cmp	r1, #0
 800e1a2:	dd05      	ble.n	800e1b0 <__ulp+0x20>
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	460b      	mov	r3, r1
 800e1a8:	ec43 2b10 	vmov	d0, r2, r3
 800e1ac:	b002      	add	sp, #8
 800e1ae:	4770      	bx	lr
 800e1b0:	4249      	negs	r1, r1
 800e1b2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e1b6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e1ba:	f04f 0200 	mov.w	r2, #0
 800e1be:	f04f 0300 	mov.w	r3, #0
 800e1c2:	da04      	bge.n	800e1ce <__ulp+0x3e>
 800e1c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e1c8:	fa41 f300 	asr.w	r3, r1, r0
 800e1cc:	e7ec      	b.n	800e1a8 <__ulp+0x18>
 800e1ce:	f1a0 0114 	sub.w	r1, r0, #20
 800e1d2:	291e      	cmp	r1, #30
 800e1d4:	bfda      	itte	le
 800e1d6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e1da:	fa20 f101 	lsrle.w	r1, r0, r1
 800e1de:	2101      	movgt	r1, #1
 800e1e0:	460a      	mov	r2, r1
 800e1e2:	e7e1      	b.n	800e1a8 <__ulp+0x18>
 800e1e4:	7ff00000 	.word	0x7ff00000

0800e1e8 <__b2d>:
 800e1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ea:	6905      	ldr	r5, [r0, #16]
 800e1ec:	f100 0714 	add.w	r7, r0, #20
 800e1f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e1f4:	1f2e      	subs	r6, r5, #4
 800e1f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	f7ff fd48 	bl	800dc90 <__hi0bits>
 800e200:	f1c0 0320 	rsb	r3, r0, #32
 800e204:	280a      	cmp	r0, #10
 800e206:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e284 <__b2d+0x9c>
 800e20a:	600b      	str	r3, [r1, #0]
 800e20c:	dc14      	bgt.n	800e238 <__b2d+0x50>
 800e20e:	f1c0 0e0b 	rsb	lr, r0, #11
 800e212:	fa24 f10e 	lsr.w	r1, r4, lr
 800e216:	42b7      	cmp	r7, r6
 800e218:	ea41 030c 	orr.w	r3, r1, ip
 800e21c:	bf34      	ite	cc
 800e21e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e222:	2100      	movcs	r1, #0
 800e224:	3015      	adds	r0, #21
 800e226:	fa04 f000 	lsl.w	r0, r4, r0
 800e22a:	fa21 f10e 	lsr.w	r1, r1, lr
 800e22e:	ea40 0201 	orr.w	r2, r0, r1
 800e232:	ec43 2b10 	vmov	d0, r2, r3
 800e236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e238:	42b7      	cmp	r7, r6
 800e23a:	bf3a      	itte	cc
 800e23c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e240:	f1a5 0608 	subcc.w	r6, r5, #8
 800e244:	2100      	movcs	r1, #0
 800e246:	380b      	subs	r0, #11
 800e248:	d017      	beq.n	800e27a <__b2d+0x92>
 800e24a:	f1c0 0c20 	rsb	ip, r0, #32
 800e24e:	fa04 f500 	lsl.w	r5, r4, r0
 800e252:	42be      	cmp	r6, r7
 800e254:	fa21 f40c 	lsr.w	r4, r1, ip
 800e258:	ea45 0504 	orr.w	r5, r5, r4
 800e25c:	bf8c      	ite	hi
 800e25e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e262:	2400      	movls	r4, #0
 800e264:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e268:	fa01 f000 	lsl.w	r0, r1, r0
 800e26c:	fa24 f40c 	lsr.w	r4, r4, ip
 800e270:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e274:	ea40 0204 	orr.w	r2, r0, r4
 800e278:	e7db      	b.n	800e232 <__b2d+0x4a>
 800e27a:	ea44 030c 	orr.w	r3, r4, ip
 800e27e:	460a      	mov	r2, r1
 800e280:	e7d7      	b.n	800e232 <__b2d+0x4a>
 800e282:	bf00      	nop
 800e284:	3ff00000 	.word	0x3ff00000

0800e288 <__d2b>:
 800e288:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e28c:	4689      	mov	r9, r1
 800e28e:	2101      	movs	r1, #1
 800e290:	ec57 6b10 	vmov	r6, r7, d0
 800e294:	4690      	mov	r8, r2
 800e296:	f7ff fc09 	bl	800daac <_Balloc>
 800e29a:	4604      	mov	r4, r0
 800e29c:	b930      	cbnz	r0, 800e2ac <__d2b+0x24>
 800e29e:	4602      	mov	r2, r0
 800e2a0:	4b25      	ldr	r3, [pc, #148]	; (800e338 <__d2b+0xb0>)
 800e2a2:	4826      	ldr	r0, [pc, #152]	; (800e33c <__d2b+0xb4>)
 800e2a4:	f240 310a 	movw	r1, #778	; 0x30a
 800e2a8:	f000 fba0 	bl	800e9ec <__assert_func>
 800e2ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e2b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e2b4:	bb35      	cbnz	r5, 800e304 <__d2b+0x7c>
 800e2b6:	2e00      	cmp	r6, #0
 800e2b8:	9301      	str	r3, [sp, #4]
 800e2ba:	d028      	beq.n	800e30e <__d2b+0x86>
 800e2bc:	4668      	mov	r0, sp
 800e2be:	9600      	str	r6, [sp, #0]
 800e2c0:	f7ff fd06 	bl	800dcd0 <__lo0bits>
 800e2c4:	9900      	ldr	r1, [sp, #0]
 800e2c6:	b300      	cbz	r0, 800e30a <__d2b+0x82>
 800e2c8:	9a01      	ldr	r2, [sp, #4]
 800e2ca:	f1c0 0320 	rsb	r3, r0, #32
 800e2ce:	fa02 f303 	lsl.w	r3, r2, r3
 800e2d2:	430b      	orrs	r3, r1
 800e2d4:	40c2      	lsrs	r2, r0
 800e2d6:	6163      	str	r3, [r4, #20]
 800e2d8:	9201      	str	r2, [sp, #4]
 800e2da:	9b01      	ldr	r3, [sp, #4]
 800e2dc:	61a3      	str	r3, [r4, #24]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	bf14      	ite	ne
 800e2e2:	2202      	movne	r2, #2
 800e2e4:	2201      	moveq	r2, #1
 800e2e6:	6122      	str	r2, [r4, #16]
 800e2e8:	b1d5      	cbz	r5, 800e320 <__d2b+0x98>
 800e2ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e2ee:	4405      	add	r5, r0
 800e2f0:	f8c9 5000 	str.w	r5, [r9]
 800e2f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e2f8:	f8c8 0000 	str.w	r0, [r8]
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	b003      	add	sp, #12
 800e300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e304:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e308:	e7d5      	b.n	800e2b6 <__d2b+0x2e>
 800e30a:	6161      	str	r1, [r4, #20]
 800e30c:	e7e5      	b.n	800e2da <__d2b+0x52>
 800e30e:	a801      	add	r0, sp, #4
 800e310:	f7ff fcde 	bl	800dcd0 <__lo0bits>
 800e314:	9b01      	ldr	r3, [sp, #4]
 800e316:	6163      	str	r3, [r4, #20]
 800e318:	2201      	movs	r2, #1
 800e31a:	6122      	str	r2, [r4, #16]
 800e31c:	3020      	adds	r0, #32
 800e31e:	e7e3      	b.n	800e2e8 <__d2b+0x60>
 800e320:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e324:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e328:	f8c9 0000 	str.w	r0, [r9]
 800e32c:	6918      	ldr	r0, [r3, #16]
 800e32e:	f7ff fcaf 	bl	800dc90 <__hi0bits>
 800e332:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e336:	e7df      	b.n	800e2f8 <__d2b+0x70>
 800e338:	08011378 	.word	0x08011378
 800e33c:	08011468 	.word	0x08011468

0800e340 <__ratio>:
 800e340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e344:	4688      	mov	r8, r1
 800e346:	4669      	mov	r1, sp
 800e348:	4681      	mov	r9, r0
 800e34a:	f7ff ff4d 	bl	800e1e8 <__b2d>
 800e34e:	a901      	add	r1, sp, #4
 800e350:	4640      	mov	r0, r8
 800e352:	ec55 4b10 	vmov	r4, r5, d0
 800e356:	f7ff ff47 	bl	800e1e8 <__b2d>
 800e35a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e35e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e362:	eba3 0c02 	sub.w	ip, r3, r2
 800e366:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e36a:	1a9b      	subs	r3, r3, r2
 800e36c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e370:	ec51 0b10 	vmov	r0, r1, d0
 800e374:	2b00      	cmp	r3, #0
 800e376:	bfd6      	itet	le
 800e378:	460a      	movle	r2, r1
 800e37a:	462a      	movgt	r2, r5
 800e37c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e380:	468b      	mov	fp, r1
 800e382:	462f      	mov	r7, r5
 800e384:	bfd4      	ite	le
 800e386:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e38a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e38e:	4620      	mov	r0, r4
 800e390:	ee10 2a10 	vmov	r2, s0
 800e394:	465b      	mov	r3, fp
 800e396:	4639      	mov	r1, r7
 800e398:	f7f2 fa78 	bl	800088c <__aeabi_ddiv>
 800e39c:	ec41 0b10 	vmov	d0, r0, r1
 800e3a0:	b003      	add	sp, #12
 800e3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e3a6 <__copybits>:
 800e3a6:	3901      	subs	r1, #1
 800e3a8:	b570      	push	{r4, r5, r6, lr}
 800e3aa:	1149      	asrs	r1, r1, #5
 800e3ac:	6914      	ldr	r4, [r2, #16]
 800e3ae:	3101      	adds	r1, #1
 800e3b0:	f102 0314 	add.w	r3, r2, #20
 800e3b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e3b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e3bc:	1f05      	subs	r5, r0, #4
 800e3be:	42a3      	cmp	r3, r4
 800e3c0:	d30c      	bcc.n	800e3dc <__copybits+0x36>
 800e3c2:	1aa3      	subs	r3, r4, r2
 800e3c4:	3b11      	subs	r3, #17
 800e3c6:	f023 0303 	bic.w	r3, r3, #3
 800e3ca:	3211      	adds	r2, #17
 800e3cc:	42a2      	cmp	r2, r4
 800e3ce:	bf88      	it	hi
 800e3d0:	2300      	movhi	r3, #0
 800e3d2:	4418      	add	r0, r3
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	4288      	cmp	r0, r1
 800e3d8:	d305      	bcc.n	800e3e6 <__copybits+0x40>
 800e3da:	bd70      	pop	{r4, r5, r6, pc}
 800e3dc:	f853 6b04 	ldr.w	r6, [r3], #4
 800e3e0:	f845 6f04 	str.w	r6, [r5, #4]!
 800e3e4:	e7eb      	b.n	800e3be <__copybits+0x18>
 800e3e6:	f840 3b04 	str.w	r3, [r0], #4
 800e3ea:	e7f4      	b.n	800e3d6 <__copybits+0x30>

0800e3ec <__any_on>:
 800e3ec:	f100 0214 	add.w	r2, r0, #20
 800e3f0:	6900      	ldr	r0, [r0, #16]
 800e3f2:	114b      	asrs	r3, r1, #5
 800e3f4:	4298      	cmp	r0, r3
 800e3f6:	b510      	push	{r4, lr}
 800e3f8:	db11      	blt.n	800e41e <__any_on+0x32>
 800e3fa:	dd0a      	ble.n	800e412 <__any_on+0x26>
 800e3fc:	f011 011f 	ands.w	r1, r1, #31
 800e400:	d007      	beq.n	800e412 <__any_on+0x26>
 800e402:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e406:	fa24 f001 	lsr.w	r0, r4, r1
 800e40a:	fa00 f101 	lsl.w	r1, r0, r1
 800e40e:	428c      	cmp	r4, r1
 800e410:	d10b      	bne.n	800e42a <__any_on+0x3e>
 800e412:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e416:	4293      	cmp	r3, r2
 800e418:	d803      	bhi.n	800e422 <__any_on+0x36>
 800e41a:	2000      	movs	r0, #0
 800e41c:	bd10      	pop	{r4, pc}
 800e41e:	4603      	mov	r3, r0
 800e420:	e7f7      	b.n	800e412 <__any_on+0x26>
 800e422:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e426:	2900      	cmp	r1, #0
 800e428:	d0f5      	beq.n	800e416 <__any_on+0x2a>
 800e42a:	2001      	movs	r0, #1
 800e42c:	e7f6      	b.n	800e41c <__any_on+0x30>

0800e42e <_calloc_r>:
 800e42e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e430:	fba1 2402 	umull	r2, r4, r1, r2
 800e434:	b94c      	cbnz	r4, 800e44a <_calloc_r+0x1c>
 800e436:	4611      	mov	r1, r2
 800e438:	9201      	str	r2, [sp, #4]
 800e43a:	f000 f87b 	bl	800e534 <_malloc_r>
 800e43e:	9a01      	ldr	r2, [sp, #4]
 800e440:	4605      	mov	r5, r0
 800e442:	b930      	cbnz	r0, 800e452 <_calloc_r+0x24>
 800e444:	4628      	mov	r0, r5
 800e446:	b003      	add	sp, #12
 800e448:	bd30      	pop	{r4, r5, pc}
 800e44a:	220c      	movs	r2, #12
 800e44c:	6002      	str	r2, [r0, #0]
 800e44e:	2500      	movs	r5, #0
 800e450:	e7f8      	b.n	800e444 <_calloc_r+0x16>
 800e452:	4621      	mov	r1, r4
 800e454:	f7fc fa88 	bl	800a968 <memset>
 800e458:	e7f4      	b.n	800e444 <_calloc_r+0x16>
	...

0800e45c <_free_r>:
 800e45c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e45e:	2900      	cmp	r1, #0
 800e460:	d044      	beq.n	800e4ec <_free_r+0x90>
 800e462:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e466:	9001      	str	r0, [sp, #4]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	f1a1 0404 	sub.w	r4, r1, #4
 800e46e:	bfb8      	it	lt
 800e470:	18e4      	addlt	r4, r4, r3
 800e472:	f000 fb2f 	bl	800ead4 <__malloc_lock>
 800e476:	4a1e      	ldr	r2, [pc, #120]	; (800e4f0 <_free_r+0x94>)
 800e478:	9801      	ldr	r0, [sp, #4]
 800e47a:	6813      	ldr	r3, [r2, #0]
 800e47c:	b933      	cbnz	r3, 800e48c <_free_r+0x30>
 800e47e:	6063      	str	r3, [r4, #4]
 800e480:	6014      	str	r4, [r2, #0]
 800e482:	b003      	add	sp, #12
 800e484:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e488:	f000 bb2a 	b.w	800eae0 <__malloc_unlock>
 800e48c:	42a3      	cmp	r3, r4
 800e48e:	d908      	bls.n	800e4a2 <_free_r+0x46>
 800e490:	6825      	ldr	r5, [r4, #0]
 800e492:	1961      	adds	r1, r4, r5
 800e494:	428b      	cmp	r3, r1
 800e496:	bf01      	itttt	eq
 800e498:	6819      	ldreq	r1, [r3, #0]
 800e49a:	685b      	ldreq	r3, [r3, #4]
 800e49c:	1949      	addeq	r1, r1, r5
 800e49e:	6021      	streq	r1, [r4, #0]
 800e4a0:	e7ed      	b.n	800e47e <_free_r+0x22>
 800e4a2:	461a      	mov	r2, r3
 800e4a4:	685b      	ldr	r3, [r3, #4]
 800e4a6:	b10b      	cbz	r3, 800e4ac <_free_r+0x50>
 800e4a8:	42a3      	cmp	r3, r4
 800e4aa:	d9fa      	bls.n	800e4a2 <_free_r+0x46>
 800e4ac:	6811      	ldr	r1, [r2, #0]
 800e4ae:	1855      	adds	r5, r2, r1
 800e4b0:	42a5      	cmp	r5, r4
 800e4b2:	d10b      	bne.n	800e4cc <_free_r+0x70>
 800e4b4:	6824      	ldr	r4, [r4, #0]
 800e4b6:	4421      	add	r1, r4
 800e4b8:	1854      	adds	r4, r2, r1
 800e4ba:	42a3      	cmp	r3, r4
 800e4bc:	6011      	str	r1, [r2, #0]
 800e4be:	d1e0      	bne.n	800e482 <_free_r+0x26>
 800e4c0:	681c      	ldr	r4, [r3, #0]
 800e4c2:	685b      	ldr	r3, [r3, #4]
 800e4c4:	6053      	str	r3, [r2, #4]
 800e4c6:	4421      	add	r1, r4
 800e4c8:	6011      	str	r1, [r2, #0]
 800e4ca:	e7da      	b.n	800e482 <_free_r+0x26>
 800e4cc:	d902      	bls.n	800e4d4 <_free_r+0x78>
 800e4ce:	230c      	movs	r3, #12
 800e4d0:	6003      	str	r3, [r0, #0]
 800e4d2:	e7d6      	b.n	800e482 <_free_r+0x26>
 800e4d4:	6825      	ldr	r5, [r4, #0]
 800e4d6:	1961      	adds	r1, r4, r5
 800e4d8:	428b      	cmp	r3, r1
 800e4da:	bf04      	itt	eq
 800e4dc:	6819      	ldreq	r1, [r3, #0]
 800e4de:	685b      	ldreq	r3, [r3, #4]
 800e4e0:	6063      	str	r3, [r4, #4]
 800e4e2:	bf04      	itt	eq
 800e4e4:	1949      	addeq	r1, r1, r5
 800e4e6:	6021      	streq	r1, [r4, #0]
 800e4e8:	6054      	str	r4, [r2, #4]
 800e4ea:	e7ca      	b.n	800e482 <_free_r+0x26>
 800e4ec:	b003      	add	sp, #12
 800e4ee:	bd30      	pop	{r4, r5, pc}
 800e4f0:	200099f4 	.word	0x200099f4

0800e4f4 <sbrk_aligned>:
 800e4f4:	b570      	push	{r4, r5, r6, lr}
 800e4f6:	4e0e      	ldr	r6, [pc, #56]	; (800e530 <sbrk_aligned+0x3c>)
 800e4f8:	460c      	mov	r4, r1
 800e4fa:	6831      	ldr	r1, [r6, #0]
 800e4fc:	4605      	mov	r5, r0
 800e4fe:	b911      	cbnz	r1, 800e506 <sbrk_aligned+0x12>
 800e500:	f000 f9ee 	bl	800e8e0 <_sbrk_r>
 800e504:	6030      	str	r0, [r6, #0]
 800e506:	4621      	mov	r1, r4
 800e508:	4628      	mov	r0, r5
 800e50a:	f000 f9e9 	bl	800e8e0 <_sbrk_r>
 800e50e:	1c43      	adds	r3, r0, #1
 800e510:	d00a      	beq.n	800e528 <sbrk_aligned+0x34>
 800e512:	1cc4      	adds	r4, r0, #3
 800e514:	f024 0403 	bic.w	r4, r4, #3
 800e518:	42a0      	cmp	r0, r4
 800e51a:	d007      	beq.n	800e52c <sbrk_aligned+0x38>
 800e51c:	1a21      	subs	r1, r4, r0
 800e51e:	4628      	mov	r0, r5
 800e520:	f000 f9de 	bl	800e8e0 <_sbrk_r>
 800e524:	3001      	adds	r0, #1
 800e526:	d101      	bne.n	800e52c <sbrk_aligned+0x38>
 800e528:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e52c:	4620      	mov	r0, r4
 800e52e:	bd70      	pop	{r4, r5, r6, pc}
 800e530:	200099f8 	.word	0x200099f8

0800e534 <_malloc_r>:
 800e534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e538:	1ccd      	adds	r5, r1, #3
 800e53a:	f025 0503 	bic.w	r5, r5, #3
 800e53e:	3508      	adds	r5, #8
 800e540:	2d0c      	cmp	r5, #12
 800e542:	bf38      	it	cc
 800e544:	250c      	movcc	r5, #12
 800e546:	2d00      	cmp	r5, #0
 800e548:	4607      	mov	r7, r0
 800e54a:	db01      	blt.n	800e550 <_malloc_r+0x1c>
 800e54c:	42a9      	cmp	r1, r5
 800e54e:	d905      	bls.n	800e55c <_malloc_r+0x28>
 800e550:	230c      	movs	r3, #12
 800e552:	603b      	str	r3, [r7, #0]
 800e554:	2600      	movs	r6, #0
 800e556:	4630      	mov	r0, r6
 800e558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e55c:	4e2e      	ldr	r6, [pc, #184]	; (800e618 <_malloc_r+0xe4>)
 800e55e:	f000 fab9 	bl	800ead4 <__malloc_lock>
 800e562:	6833      	ldr	r3, [r6, #0]
 800e564:	461c      	mov	r4, r3
 800e566:	bb34      	cbnz	r4, 800e5b6 <_malloc_r+0x82>
 800e568:	4629      	mov	r1, r5
 800e56a:	4638      	mov	r0, r7
 800e56c:	f7ff ffc2 	bl	800e4f4 <sbrk_aligned>
 800e570:	1c43      	adds	r3, r0, #1
 800e572:	4604      	mov	r4, r0
 800e574:	d14d      	bne.n	800e612 <_malloc_r+0xde>
 800e576:	6834      	ldr	r4, [r6, #0]
 800e578:	4626      	mov	r6, r4
 800e57a:	2e00      	cmp	r6, #0
 800e57c:	d140      	bne.n	800e600 <_malloc_r+0xcc>
 800e57e:	6823      	ldr	r3, [r4, #0]
 800e580:	4631      	mov	r1, r6
 800e582:	4638      	mov	r0, r7
 800e584:	eb04 0803 	add.w	r8, r4, r3
 800e588:	f000 f9aa 	bl	800e8e0 <_sbrk_r>
 800e58c:	4580      	cmp	r8, r0
 800e58e:	d13a      	bne.n	800e606 <_malloc_r+0xd2>
 800e590:	6821      	ldr	r1, [r4, #0]
 800e592:	3503      	adds	r5, #3
 800e594:	1a6d      	subs	r5, r5, r1
 800e596:	f025 0503 	bic.w	r5, r5, #3
 800e59a:	3508      	adds	r5, #8
 800e59c:	2d0c      	cmp	r5, #12
 800e59e:	bf38      	it	cc
 800e5a0:	250c      	movcc	r5, #12
 800e5a2:	4629      	mov	r1, r5
 800e5a4:	4638      	mov	r0, r7
 800e5a6:	f7ff ffa5 	bl	800e4f4 <sbrk_aligned>
 800e5aa:	3001      	adds	r0, #1
 800e5ac:	d02b      	beq.n	800e606 <_malloc_r+0xd2>
 800e5ae:	6823      	ldr	r3, [r4, #0]
 800e5b0:	442b      	add	r3, r5
 800e5b2:	6023      	str	r3, [r4, #0]
 800e5b4:	e00e      	b.n	800e5d4 <_malloc_r+0xa0>
 800e5b6:	6822      	ldr	r2, [r4, #0]
 800e5b8:	1b52      	subs	r2, r2, r5
 800e5ba:	d41e      	bmi.n	800e5fa <_malloc_r+0xc6>
 800e5bc:	2a0b      	cmp	r2, #11
 800e5be:	d916      	bls.n	800e5ee <_malloc_r+0xba>
 800e5c0:	1961      	adds	r1, r4, r5
 800e5c2:	42a3      	cmp	r3, r4
 800e5c4:	6025      	str	r5, [r4, #0]
 800e5c6:	bf18      	it	ne
 800e5c8:	6059      	strne	r1, [r3, #4]
 800e5ca:	6863      	ldr	r3, [r4, #4]
 800e5cc:	bf08      	it	eq
 800e5ce:	6031      	streq	r1, [r6, #0]
 800e5d0:	5162      	str	r2, [r4, r5]
 800e5d2:	604b      	str	r3, [r1, #4]
 800e5d4:	4638      	mov	r0, r7
 800e5d6:	f104 060b 	add.w	r6, r4, #11
 800e5da:	f000 fa81 	bl	800eae0 <__malloc_unlock>
 800e5de:	f026 0607 	bic.w	r6, r6, #7
 800e5e2:	1d23      	adds	r3, r4, #4
 800e5e4:	1af2      	subs	r2, r6, r3
 800e5e6:	d0b6      	beq.n	800e556 <_malloc_r+0x22>
 800e5e8:	1b9b      	subs	r3, r3, r6
 800e5ea:	50a3      	str	r3, [r4, r2]
 800e5ec:	e7b3      	b.n	800e556 <_malloc_r+0x22>
 800e5ee:	6862      	ldr	r2, [r4, #4]
 800e5f0:	42a3      	cmp	r3, r4
 800e5f2:	bf0c      	ite	eq
 800e5f4:	6032      	streq	r2, [r6, #0]
 800e5f6:	605a      	strne	r2, [r3, #4]
 800e5f8:	e7ec      	b.n	800e5d4 <_malloc_r+0xa0>
 800e5fa:	4623      	mov	r3, r4
 800e5fc:	6864      	ldr	r4, [r4, #4]
 800e5fe:	e7b2      	b.n	800e566 <_malloc_r+0x32>
 800e600:	4634      	mov	r4, r6
 800e602:	6876      	ldr	r6, [r6, #4]
 800e604:	e7b9      	b.n	800e57a <_malloc_r+0x46>
 800e606:	230c      	movs	r3, #12
 800e608:	603b      	str	r3, [r7, #0]
 800e60a:	4638      	mov	r0, r7
 800e60c:	f000 fa68 	bl	800eae0 <__malloc_unlock>
 800e610:	e7a1      	b.n	800e556 <_malloc_r+0x22>
 800e612:	6025      	str	r5, [r4, #0]
 800e614:	e7de      	b.n	800e5d4 <_malloc_r+0xa0>
 800e616:	bf00      	nop
 800e618:	200099f4 	.word	0x200099f4

0800e61c <__sfputc_r>:
 800e61c:	6893      	ldr	r3, [r2, #8]
 800e61e:	3b01      	subs	r3, #1
 800e620:	2b00      	cmp	r3, #0
 800e622:	b410      	push	{r4}
 800e624:	6093      	str	r3, [r2, #8]
 800e626:	da08      	bge.n	800e63a <__sfputc_r+0x1e>
 800e628:	6994      	ldr	r4, [r2, #24]
 800e62a:	42a3      	cmp	r3, r4
 800e62c:	db01      	blt.n	800e632 <__sfputc_r+0x16>
 800e62e:	290a      	cmp	r1, #10
 800e630:	d103      	bne.n	800e63a <__sfputc_r+0x1e>
 800e632:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e636:	f7fd bd51 	b.w	800c0dc <__swbuf_r>
 800e63a:	6813      	ldr	r3, [r2, #0]
 800e63c:	1c58      	adds	r0, r3, #1
 800e63e:	6010      	str	r0, [r2, #0]
 800e640:	7019      	strb	r1, [r3, #0]
 800e642:	4608      	mov	r0, r1
 800e644:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e648:	4770      	bx	lr

0800e64a <__sfputs_r>:
 800e64a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e64c:	4606      	mov	r6, r0
 800e64e:	460f      	mov	r7, r1
 800e650:	4614      	mov	r4, r2
 800e652:	18d5      	adds	r5, r2, r3
 800e654:	42ac      	cmp	r4, r5
 800e656:	d101      	bne.n	800e65c <__sfputs_r+0x12>
 800e658:	2000      	movs	r0, #0
 800e65a:	e007      	b.n	800e66c <__sfputs_r+0x22>
 800e65c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e660:	463a      	mov	r2, r7
 800e662:	4630      	mov	r0, r6
 800e664:	f7ff ffda 	bl	800e61c <__sfputc_r>
 800e668:	1c43      	adds	r3, r0, #1
 800e66a:	d1f3      	bne.n	800e654 <__sfputs_r+0xa>
 800e66c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e670 <_vfiprintf_r>:
 800e670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e674:	460d      	mov	r5, r1
 800e676:	b09d      	sub	sp, #116	; 0x74
 800e678:	4614      	mov	r4, r2
 800e67a:	4698      	mov	r8, r3
 800e67c:	4606      	mov	r6, r0
 800e67e:	b118      	cbz	r0, 800e688 <_vfiprintf_r+0x18>
 800e680:	6983      	ldr	r3, [r0, #24]
 800e682:	b90b      	cbnz	r3, 800e688 <_vfiprintf_r+0x18>
 800e684:	f7fe fd80 	bl	800d188 <__sinit>
 800e688:	4b89      	ldr	r3, [pc, #548]	; (800e8b0 <_vfiprintf_r+0x240>)
 800e68a:	429d      	cmp	r5, r3
 800e68c:	d11b      	bne.n	800e6c6 <_vfiprintf_r+0x56>
 800e68e:	6875      	ldr	r5, [r6, #4]
 800e690:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e692:	07d9      	lsls	r1, r3, #31
 800e694:	d405      	bmi.n	800e6a2 <_vfiprintf_r+0x32>
 800e696:	89ab      	ldrh	r3, [r5, #12]
 800e698:	059a      	lsls	r2, r3, #22
 800e69a:	d402      	bmi.n	800e6a2 <_vfiprintf_r+0x32>
 800e69c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e69e:	f7ff f984 	bl	800d9aa <__retarget_lock_acquire_recursive>
 800e6a2:	89ab      	ldrh	r3, [r5, #12]
 800e6a4:	071b      	lsls	r3, r3, #28
 800e6a6:	d501      	bpl.n	800e6ac <_vfiprintf_r+0x3c>
 800e6a8:	692b      	ldr	r3, [r5, #16]
 800e6aa:	b9eb      	cbnz	r3, 800e6e8 <_vfiprintf_r+0x78>
 800e6ac:	4629      	mov	r1, r5
 800e6ae:	4630      	mov	r0, r6
 800e6b0:	f7fd fd66 	bl	800c180 <__swsetup_r>
 800e6b4:	b1c0      	cbz	r0, 800e6e8 <_vfiprintf_r+0x78>
 800e6b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6b8:	07dc      	lsls	r4, r3, #31
 800e6ba:	d50e      	bpl.n	800e6da <_vfiprintf_r+0x6a>
 800e6bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e6c0:	b01d      	add	sp, #116	; 0x74
 800e6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6c6:	4b7b      	ldr	r3, [pc, #492]	; (800e8b4 <_vfiprintf_r+0x244>)
 800e6c8:	429d      	cmp	r5, r3
 800e6ca:	d101      	bne.n	800e6d0 <_vfiprintf_r+0x60>
 800e6cc:	68b5      	ldr	r5, [r6, #8]
 800e6ce:	e7df      	b.n	800e690 <_vfiprintf_r+0x20>
 800e6d0:	4b79      	ldr	r3, [pc, #484]	; (800e8b8 <_vfiprintf_r+0x248>)
 800e6d2:	429d      	cmp	r5, r3
 800e6d4:	bf08      	it	eq
 800e6d6:	68f5      	ldreq	r5, [r6, #12]
 800e6d8:	e7da      	b.n	800e690 <_vfiprintf_r+0x20>
 800e6da:	89ab      	ldrh	r3, [r5, #12]
 800e6dc:	0598      	lsls	r0, r3, #22
 800e6de:	d4ed      	bmi.n	800e6bc <_vfiprintf_r+0x4c>
 800e6e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e6e2:	f7ff f963 	bl	800d9ac <__retarget_lock_release_recursive>
 800e6e6:	e7e9      	b.n	800e6bc <_vfiprintf_r+0x4c>
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	9309      	str	r3, [sp, #36]	; 0x24
 800e6ec:	2320      	movs	r3, #32
 800e6ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e6f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e6f6:	2330      	movs	r3, #48	; 0x30
 800e6f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e8bc <_vfiprintf_r+0x24c>
 800e6fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e700:	f04f 0901 	mov.w	r9, #1
 800e704:	4623      	mov	r3, r4
 800e706:	469a      	mov	sl, r3
 800e708:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e70c:	b10a      	cbz	r2, 800e712 <_vfiprintf_r+0xa2>
 800e70e:	2a25      	cmp	r2, #37	; 0x25
 800e710:	d1f9      	bne.n	800e706 <_vfiprintf_r+0x96>
 800e712:	ebba 0b04 	subs.w	fp, sl, r4
 800e716:	d00b      	beq.n	800e730 <_vfiprintf_r+0xc0>
 800e718:	465b      	mov	r3, fp
 800e71a:	4622      	mov	r2, r4
 800e71c:	4629      	mov	r1, r5
 800e71e:	4630      	mov	r0, r6
 800e720:	f7ff ff93 	bl	800e64a <__sfputs_r>
 800e724:	3001      	adds	r0, #1
 800e726:	f000 80aa 	beq.w	800e87e <_vfiprintf_r+0x20e>
 800e72a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e72c:	445a      	add	r2, fp
 800e72e:	9209      	str	r2, [sp, #36]	; 0x24
 800e730:	f89a 3000 	ldrb.w	r3, [sl]
 800e734:	2b00      	cmp	r3, #0
 800e736:	f000 80a2 	beq.w	800e87e <_vfiprintf_r+0x20e>
 800e73a:	2300      	movs	r3, #0
 800e73c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e740:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e744:	f10a 0a01 	add.w	sl, sl, #1
 800e748:	9304      	str	r3, [sp, #16]
 800e74a:	9307      	str	r3, [sp, #28]
 800e74c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e750:	931a      	str	r3, [sp, #104]	; 0x68
 800e752:	4654      	mov	r4, sl
 800e754:	2205      	movs	r2, #5
 800e756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e75a:	4858      	ldr	r0, [pc, #352]	; (800e8bc <_vfiprintf_r+0x24c>)
 800e75c:	f7f1 fd60 	bl	8000220 <memchr>
 800e760:	9a04      	ldr	r2, [sp, #16]
 800e762:	b9d8      	cbnz	r0, 800e79c <_vfiprintf_r+0x12c>
 800e764:	06d1      	lsls	r1, r2, #27
 800e766:	bf44      	itt	mi
 800e768:	2320      	movmi	r3, #32
 800e76a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e76e:	0713      	lsls	r3, r2, #28
 800e770:	bf44      	itt	mi
 800e772:	232b      	movmi	r3, #43	; 0x2b
 800e774:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e778:	f89a 3000 	ldrb.w	r3, [sl]
 800e77c:	2b2a      	cmp	r3, #42	; 0x2a
 800e77e:	d015      	beq.n	800e7ac <_vfiprintf_r+0x13c>
 800e780:	9a07      	ldr	r2, [sp, #28]
 800e782:	4654      	mov	r4, sl
 800e784:	2000      	movs	r0, #0
 800e786:	f04f 0c0a 	mov.w	ip, #10
 800e78a:	4621      	mov	r1, r4
 800e78c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e790:	3b30      	subs	r3, #48	; 0x30
 800e792:	2b09      	cmp	r3, #9
 800e794:	d94e      	bls.n	800e834 <_vfiprintf_r+0x1c4>
 800e796:	b1b0      	cbz	r0, 800e7c6 <_vfiprintf_r+0x156>
 800e798:	9207      	str	r2, [sp, #28]
 800e79a:	e014      	b.n	800e7c6 <_vfiprintf_r+0x156>
 800e79c:	eba0 0308 	sub.w	r3, r0, r8
 800e7a0:	fa09 f303 	lsl.w	r3, r9, r3
 800e7a4:	4313      	orrs	r3, r2
 800e7a6:	9304      	str	r3, [sp, #16]
 800e7a8:	46a2      	mov	sl, r4
 800e7aa:	e7d2      	b.n	800e752 <_vfiprintf_r+0xe2>
 800e7ac:	9b03      	ldr	r3, [sp, #12]
 800e7ae:	1d19      	adds	r1, r3, #4
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	9103      	str	r1, [sp, #12]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	bfbb      	ittet	lt
 800e7b8:	425b      	neglt	r3, r3
 800e7ba:	f042 0202 	orrlt.w	r2, r2, #2
 800e7be:	9307      	strge	r3, [sp, #28]
 800e7c0:	9307      	strlt	r3, [sp, #28]
 800e7c2:	bfb8      	it	lt
 800e7c4:	9204      	strlt	r2, [sp, #16]
 800e7c6:	7823      	ldrb	r3, [r4, #0]
 800e7c8:	2b2e      	cmp	r3, #46	; 0x2e
 800e7ca:	d10c      	bne.n	800e7e6 <_vfiprintf_r+0x176>
 800e7cc:	7863      	ldrb	r3, [r4, #1]
 800e7ce:	2b2a      	cmp	r3, #42	; 0x2a
 800e7d0:	d135      	bne.n	800e83e <_vfiprintf_r+0x1ce>
 800e7d2:	9b03      	ldr	r3, [sp, #12]
 800e7d4:	1d1a      	adds	r2, r3, #4
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	9203      	str	r2, [sp, #12]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	bfb8      	it	lt
 800e7de:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e7e2:	3402      	adds	r4, #2
 800e7e4:	9305      	str	r3, [sp, #20]
 800e7e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e8cc <_vfiprintf_r+0x25c>
 800e7ea:	7821      	ldrb	r1, [r4, #0]
 800e7ec:	2203      	movs	r2, #3
 800e7ee:	4650      	mov	r0, sl
 800e7f0:	f7f1 fd16 	bl	8000220 <memchr>
 800e7f4:	b140      	cbz	r0, 800e808 <_vfiprintf_r+0x198>
 800e7f6:	2340      	movs	r3, #64	; 0x40
 800e7f8:	eba0 000a 	sub.w	r0, r0, sl
 800e7fc:	fa03 f000 	lsl.w	r0, r3, r0
 800e800:	9b04      	ldr	r3, [sp, #16]
 800e802:	4303      	orrs	r3, r0
 800e804:	3401      	adds	r4, #1
 800e806:	9304      	str	r3, [sp, #16]
 800e808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e80c:	482c      	ldr	r0, [pc, #176]	; (800e8c0 <_vfiprintf_r+0x250>)
 800e80e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e812:	2206      	movs	r2, #6
 800e814:	f7f1 fd04 	bl	8000220 <memchr>
 800e818:	2800      	cmp	r0, #0
 800e81a:	d03f      	beq.n	800e89c <_vfiprintf_r+0x22c>
 800e81c:	4b29      	ldr	r3, [pc, #164]	; (800e8c4 <_vfiprintf_r+0x254>)
 800e81e:	bb1b      	cbnz	r3, 800e868 <_vfiprintf_r+0x1f8>
 800e820:	9b03      	ldr	r3, [sp, #12]
 800e822:	3307      	adds	r3, #7
 800e824:	f023 0307 	bic.w	r3, r3, #7
 800e828:	3308      	adds	r3, #8
 800e82a:	9303      	str	r3, [sp, #12]
 800e82c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e82e:	443b      	add	r3, r7
 800e830:	9309      	str	r3, [sp, #36]	; 0x24
 800e832:	e767      	b.n	800e704 <_vfiprintf_r+0x94>
 800e834:	fb0c 3202 	mla	r2, ip, r2, r3
 800e838:	460c      	mov	r4, r1
 800e83a:	2001      	movs	r0, #1
 800e83c:	e7a5      	b.n	800e78a <_vfiprintf_r+0x11a>
 800e83e:	2300      	movs	r3, #0
 800e840:	3401      	adds	r4, #1
 800e842:	9305      	str	r3, [sp, #20]
 800e844:	4619      	mov	r1, r3
 800e846:	f04f 0c0a 	mov.w	ip, #10
 800e84a:	4620      	mov	r0, r4
 800e84c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e850:	3a30      	subs	r2, #48	; 0x30
 800e852:	2a09      	cmp	r2, #9
 800e854:	d903      	bls.n	800e85e <_vfiprintf_r+0x1ee>
 800e856:	2b00      	cmp	r3, #0
 800e858:	d0c5      	beq.n	800e7e6 <_vfiprintf_r+0x176>
 800e85a:	9105      	str	r1, [sp, #20]
 800e85c:	e7c3      	b.n	800e7e6 <_vfiprintf_r+0x176>
 800e85e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e862:	4604      	mov	r4, r0
 800e864:	2301      	movs	r3, #1
 800e866:	e7f0      	b.n	800e84a <_vfiprintf_r+0x1da>
 800e868:	ab03      	add	r3, sp, #12
 800e86a:	9300      	str	r3, [sp, #0]
 800e86c:	462a      	mov	r2, r5
 800e86e:	4b16      	ldr	r3, [pc, #88]	; (800e8c8 <_vfiprintf_r+0x258>)
 800e870:	a904      	add	r1, sp, #16
 800e872:	4630      	mov	r0, r6
 800e874:	f7fc f920 	bl	800aab8 <_printf_float>
 800e878:	4607      	mov	r7, r0
 800e87a:	1c78      	adds	r0, r7, #1
 800e87c:	d1d6      	bne.n	800e82c <_vfiprintf_r+0x1bc>
 800e87e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e880:	07d9      	lsls	r1, r3, #31
 800e882:	d405      	bmi.n	800e890 <_vfiprintf_r+0x220>
 800e884:	89ab      	ldrh	r3, [r5, #12]
 800e886:	059a      	lsls	r2, r3, #22
 800e888:	d402      	bmi.n	800e890 <_vfiprintf_r+0x220>
 800e88a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e88c:	f7ff f88e 	bl	800d9ac <__retarget_lock_release_recursive>
 800e890:	89ab      	ldrh	r3, [r5, #12]
 800e892:	065b      	lsls	r3, r3, #25
 800e894:	f53f af12 	bmi.w	800e6bc <_vfiprintf_r+0x4c>
 800e898:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e89a:	e711      	b.n	800e6c0 <_vfiprintf_r+0x50>
 800e89c:	ab03      	add	r3, sp, #12
 800e89e:	9300      	str	r3, [sp, #0]
 800e8a0:	462a      	mov	r2, r5
 800e8a2:	4b09      	ldr	r3, [pc, #36]	; (800e8c8 <_vfiprintf_r+0x258>)
 800e8a4:	a904      	add	r1, sp, #16
 800e8a6:	4630      	mov	r0, r6
 800e8a8:	f7fc fbaa 	bl	800b000 <_printf_i>
 800e8ac:	e7e4      	b.n	800e878 <_vfiprintf_r+0x208>
 800e8ae:	bf00      	nop
 800e8b0:	080113ac 	.word	0x080113ac
 800e8b4:	080113cc 	.word	0x080113cc
 800e8b8:	0801138c 	.word	0x0801138c
 800e8bc:	080115c4 	.word	0x080115c4
 800e8c0:	080115ce 	.word	0x080115ce
 800e8c4:	0800aab9 	.word	0x0800aab9
 800e8c8:	0800e64b 	.word	0x0800e64b
 800e8cc:	080115ca 	.word	0x080115ca

0800e8d0 <nan>:
 800e8d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e8d8 <nan+0x8>
 800e8d4:	4770      	bx	lr
 800e8d6:	bf00      	nop
 800e8d8:	00000000 	.word	0x00000000
 800e8dc:	7ff80000 	.word	0x7ff80000

0800e8e0 <_sbrk_r>:
 800e8e0:	b538      	push	{r3, r4, r5, lr}
 800e8e2:	4d06      	ldr	r5, [pc, #24]	; (800e8fc <_sbrk_r+0x1c>)
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	4604      	mov	r4, r0
 800e8e8:	4608      	mov	r0, r1
 800e8ea:	602b      	str	r3, [r5, #0]
 800e8ec:	f7f6 fde2 	bl	80054b4 <_sbrk>
 800e8f0:	1c43      	adds	r3, r0, #1
 800e8f2:	d102      	bne.n	800e8fa <_sbrk_r+0x1a>
 800e8f4:	682b      	ldr	r3, [r5, #0]
 800e8f6:	b103      	cbz	r3, 800e8fa <_sbrk_r+0x1a>
 800e8f8:	6023      	str	r3, [r4, #0]
 800e8fa:	bd38      	pop	{r3, r4, r5, pc}
 800e8fc:	200099fc 	.word	0x200099fc

0800e900 <__sread>:
 800e900:	b510      	push	{r4, lr}
 800e902:	460c      	mov	r4, r1
 800e904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e908:	f000 f8f0 	bl	800eaec <_read_r>
 800e90c:	2800      	cmp	r0, #0
 800e90e:	bfab      	itete	ge
 800e910:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e912:	89a3      	ldrhlt	r3, [r4, #12]
 800e914:	181b      	addge	r3, r3, r0
 800e916:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e91a:	bfac      	ite	ge
 800e91c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e91e:	81a3      	strhlt	r3, [r4, #12]
 800e920:	bd10      	pop	{r4, pc}

0800e922 <__swrite>:
 800e922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e926:	461f      	mov	r7, r3
 800e928:	898b      	ldrh	r3, [r1, #12]
 800e92a:	05db      	lsls	r3, r3, #23
 800e92c:	4605      	mov	r5, r0
 800e92e:	460c      	mov	r4, r1
 800e930:	4616      	mov	r6, r2
 800e932:	d505      	bpl.n	800e940 <__swrite+0x1e>
 800e934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e938:	2302      	movs	r3, #2
 800e93a:	2200      	movs	r2, #0
 800e93c:	f000 f8b8 	bl	800eab0 <_lseek_r>
 800e940:	89a3      	ldrh	r3, [r4, #12]
 800e942:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e946:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e94a:	81a3      	strh	r3, [r4, #12]
 800e94c:	4632      	mov	r2, r6
 800e94e:	463b      	mov	r3, r7
 800e950:	4628      	mov	r0, r5
 800e952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e956:	f000 b837 	b.w	800e9c8 <_write_r>

0800e95a <__sseek>:
 800e95a:	b510      	push	{r4, lr}
 800e95c:	460c      	mov	r4, r1
 800e95e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e962:	f000 f8a5 	bl	800eab0 <_lseek_r>
 800e966:	1c43      	adds	r3, r0, #1
 800e968:	89a3      	ldrh	r3, [r4, #12]
 800e96a:	bf15      	itete	ne
 800e96c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e96e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e972:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e976:	81a3      	strheq	r3, [r4, #12]
 800e978:	bf18      	it	ne
 800e97a:	81a3      	strhne	r3, [r4, #12]
 800e97c:	bd10      	pop	{r4, pc}

0800e97e <__sclose>:
 800e97e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e982:	f000 b851 	b.w	800ea28 <_close_r>

0800e986 <strncmp>:
 800e986:	b510      	push	{r4, lr}
 800e988:	b17a      	cbz	r2, 800e9aa <strncmp+0x24>
 800e98a:	4603      	mov	r3, r0
 800e98c:	3901      	subs	r1, #1
 800e98e:	1884      	adds	r4, r0, r2
 800e990:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e994:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e998:	4290      	cmp	r0, r2
 800e99a:	d101      	bne.n	800e9a0 <strncmp+0x1a>
 800e99c:	42a3      	cmp	r3, r4
 800e99e:	d101      	bne.n	800e9a4 <strncmp+0x1e>
 800e9a0:	1a80      	subs	r0, r0, r2
 800e9a2:	bd10      	pop	{r4, pc}
 800e9a4:	2800      	cmp	r0, #0
 800e9a6:	d1f3      	bne.n	800e990 <strncmp+0xa>
 800e9a8:	e7fa      	b.n	800e9a0 <strncmp+0x1a>
 800e9aa:	4610      	mov	r0, r2
 800e9ac:	e7f9      	b.n	800e9a2 <strncmp+0x1c>

0800e9ae <__ascii_wctomb>:
 800e9ae:	b149      	cbz	r1, 800e9c4 <__ascii_wctomb+0x16>
 800e9b0:	2aff      	cmp	r2, #255	; 0xff
 800e9b2:	bf85      	ittet	hi
 800e9b4:	238a      	movhi	r3, #138	; 0x8a
 800e9b6:	6003      	strhi	r3, [r0, #0]
 800e9b8:	700a      	strbls	r2, [r1, #0]
 800e9ba:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e9be:	bf98      	it	ls
 800e9c0:	2001      	movls	r0, #1
 800e9c2:	4770      	bx	lr
 800e9c4:	4608      	mov	r0, r1
 800e9c6:	4770      	bx	lr

0800e9c8 <_write_r>:
 800e9c8:	b538      	push	{r3, r4, r5, lr}
 800e9ca:	4d07      	ldr	r5, [pc, #28]	; (800e9e8 <_write_r+0x20>)
 800e9cc:	4604      	mov	r4, r0
 800e9ce:	4608      	mov	r0, r1
 800e9d0:	4611      	mov	r1, r2
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	602a      	str	r2, [r5, #0]
 800e9d6:	461a      	mov	r2, r3
 800e9d8:	f7f6 fd1b 	bl	8005412 <_write>
 800e9dc:	1c43      	adds	r3, r0, #1
 800e9de:	d102      	bne.n	800e9e6 <_write_r+0x1e>
 800e9e0:	682b      	ldr	r3, [r5, #0]
 800e9e2:	b103      	cbz	r3, 800e9e6 <_write_r+0x1e>
 800e9e4:	6023      	str	r3, [r4, #0]
 800e9e6:	bd38      	pop	{r3, r4, r5, pc}
 800e9e8:	200099fc 	.word	0x200099fc

0800e9ec <__assert_func>:
 800e9ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e9ee:	4614      	mov	r4, r2
 800e9f0:	461a      	mov	r2, r3
 800e9f2:	4b09      	ldr	r3, [pc, #36]	; (800ea18 <__assert_func+0x2c>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	4605      	mov	r5, r0
 800e9f8:	68d8      	ldr	r0, [r3, #12]
 800e9fa:	b14c      	cbz	r4, 800ea10 <__assert_func+0x24>
 800e9fc:	4b07      	ldr	r3, [pc, #28]	; (800ea1c <__assert_func+0x30>)
 800e9fe:	9100      	str	r1, [sp, #0]
 800ea00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ea04:	4906      	ldr	r1, [pc, #24]	; (800ea20 <__assert_func+0x34>)
 800ea06:	462b      	mov	r3, r5
 800ea08:	f000 f81e 	bl	800ea48 <fiprintf>
 800ea0c:	f000 f880 	bl	800eb10 <abort>
 800ea10:	4b04      	ldr	r3, [pc, #16]	; (800ea24 <__assert_func+0x38>)
 800ea12:	461c      	mov	r4, r3
 800ea14:	e7f3      	b.n	800e9fe <__assert_func+0x12>
 800ea16:	bf00      	nop
 800ea18:	2000004c 	.word	0x2000004c
 800ea1c:	080115d5 	.word	0x080115d5
 800ea20:	080115e2 	.word	0x080115e2
 800ea24:	08011610 	.word	0x08011610

0800ea28 <_close_r>:
 800ea28:	b538      	push	{r3, r4, r5, lr}
 800ea2a:	4d06      	ldr	r5, [pc, #24]	; (800ea44 <_close_r+0x1c>)
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	4604      	mov	r4, r0
 800ea30:	4608      	mov	r0, r1
 800ea32:	602b      	str	r3, [r5, #0]
 800ea34:	f7f6 fd09 	bl	800544a <_close>
 800ea38:	1c43      	adds	r3, r0, #1
 800ea3a:	d102      	bne.n	800ea42 <_close_r+0x1a>
 800ea3c:	682b      	ldr	r3, [r5, #0]
 800ea3e:	b103      	cbz	r3, 800ea42 <_close_r+0x1a>
 800ea40:	6023      	str	r3, [r4, #0]
 800ea42:	bd38      	pop	{r3, r4, r5, pc}
 800ea44:	200099fc 	.word	0x200099fc

0800ea48 <fiprintf>:
 800ea48:	b40e      	push	{r1, r2, r3}
 800ea4a:	b503      	push	{r0, r1, lr}
 800ea4c:	4601      	mov	r1, r0
 800ea4e:	ab03      	add	r3, sp, #12
 800ea50:	4805      	ldr	r0, [pc, #20]	; (800ea68 <fiprintf+0x20>)
 800ea52:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea56:	6800      	ldr	r0, [r0, #0]
 800ea58:	9301      	str	r3, [sp, #4]
 800ea5a:	f7ff fe09 	bl	800e670 <_vfiprintf_r>
 800ea5e:	b002      	add	sp, #8
 800ea60:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea64:	b003      	add	sp, #12
 800ea66:	4770      	bx	lr
 800ea68:	2000004c 	.word	0x2000004c

0800ea6c <_fstat_r>:
 800ea6c:	b538      	push	{r3, r4, r5, lr}
 800ea6e:	4d07      	ldr	r5, [pc, #28]	; (800ea8c <_fstat_r+0x20>)
 800ea70:	2300      	movs	r3, #0
 800ea72:	4604      	mov	r4, r0
 800ea74:	4608      	mov	r0, r1
 800ea76:	4611      	mov	r1, r2
 800ea78:	602b      	str	r3, [r5, #0]
 800ea7a:	f7f6 fcf2 	bl	8005462 <_fstat>
 800ea7e:	1c43      	adds	r3, r0, #1
 800ea80:	d102      	bne.n	800ea88 <_fstat_r+0x1c>
 800ea82:	682b      	ldr	r3, [r5, #0]
 800ea84:	b103      	cbz	r3, 800ea88 <_fstat_r+0x1c>
 800ea86:	6023      	str	r3, [r4, #0]
 800ea88:	bd38      	pop	{r3, r4, r5, pc}
 800ea8a:	bf00      	nop
 800ea8c:	200099fc 	.word	0x200099fc

0800ea90 <_isatty_r>:
 800ea90:	b538      	push	{r3, r4, r5, lr}
 800ea92:	4d06      	ldr	r5, [pc, #24]	; (800eaac <_isatty_r+0x1c>)
 800ea94:	2300      	movs	r3, #0
 800ea96:	4604      	mov	r4, r0
 800ea98:	4608      	mov	r0, r1
 800ea9a:	602b      	str	r3, [r5, #0]
 800ea9c:	f7f6 fcf1 	bl	8005482 <_isatty>
 800eaa0:	1c43      	adds	r3, r0, #1
 800eaa2:	d102      	bne.n	800eaaa <_isatty_r+0x1a>
 800eaa4:	682b      	ldr	r3, [r5, #0]
 800eaa6:	b103      	cbz	r3, 800eaaa <_isatty_r+0x1a>
 800eaa8:	6023      	str	r3, [r4, #0]
 800eaaa:	bd38      	pop	{r3, r4, r5, pc}
 800eaac:	200099fc 	.word	0x200099fc

0800eab0 <_lseek_r>:
 800eab0:	b538      	push	{r3, r4, r5, lr}
 800eab2:	4d07      	ldr	r5, [pc, #28]	; (800ead0 <_lseek_r+0x20>)
 800eab4:	4604      	mov	r4, r0
 800eab6:	4608      	mov	r0, r1
 800eab8:	4611      	mov	r1, r2
 800eaba:	2200      	movs	r2, #0
 800eabc:	602a      	str	r2, [r5, #0]
 800eabe:	461a      	mov	r2, r3
 800eac0:	f7f6 fcea 	bl	8005498 <_lseek>
 800eac4:	1c43      	adds	r3, r0, #1
 800eac6:	d102      	bne.n	800eace <_lseek_r+0x1e>
 800eac8:	682b      	ldr	r3, [r5, #0]
 800eaca:	b103      	cbz	r3, 800eace <_lseek_r+0x1e>
 800eacc:	6023      	str	r3, [r4, #0]
 800eace:	bd38      	pop	{r3, r4, r5, pc}
 800ead0:	200099fc 	.word	0x200099fc

0800ead4 <__malloc_lock>:
 800ead4:	4801      	ldr	r0, [pc, #4]	; (800eadc <__malloc_lock+0x8>)
 800ead6:	f7fe bf68 	b.w	800d9aa <__retarget_lock_acquire_recursive>
 800eada:	bf00      	nop
 800eadc:	200099f0 	.word	0x200099f0

0800eae0 <__malloc_unlock>:
 800eae0:	4801      	ldr	r0, [pc, #4]	; (800eae8 <__malloc_unlock+0x8>)
 800eae2:	f7fe bf63 	b.w	800d9ac <__retarget_lock_release_recursive>
 800eae6:	bf00      	nop
 800eae8:	200099f0 	.word	0x200099f0

0800eaec <_read_r>:
 800eaec:	b538      	push	{r3, r4, r5, lr}
 800eaee:	4d07      	ldr	r5, [pc, #28]	; (800eb0c <_read_r+0x20>)
 800eaf0:	4604      	mov	r4, r0
 800eaf2:	4608      	mov	r0, r1
 800eaf4:	4611      	mov	r1, r2
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	602a      	str	r2, [r5, #0]
 800eafa:	461a      	mov	r2, r3
 800eafc:	f7f6 fc6c 	bl	80053d8 <_read>
 800eb00:	1c43      	adds	r3, r0, #1
 800eb02:	d102      	bne.n	800eb0a <_read_r+0x1e>
 800eb04:	682b      	ldr	r3, [r5, #0]
 800eb06:	b103      	cbz	r3, 800eb0a <_read_r+0x1e>
 800eb08:	6023      	str	r3, [r4, #0]
 800eb0a:	bd38      	pop	{r3, r4, r5, pc}
 800eb0c:	200099fc 	.word	0x200099fc

0800eb10 <abort>:
 800eb10:	b508      	push	{r3, lr}
 800eb12:	2006      	movs	r0, #6
 800eb14:	f000 f82c 	bl	800eb70 <raise>
 800eb18:	2001      	movs	r0, #1
 800eb1a:	f7f6 fc53 	bl	80053c4 <_exit>

0800eb1e <_raise_r>:
 800eb1e:	291f      	cmp	r1, #31
 800eb20:	b538      	push	{r3, r4, r5, lr}
 800eb22:	4604      	mov	r4, r0
 800eb24:	460d      	mov	r5, r1
 800eb26:	d904      	bls.n	800eb32 <_raise_r+0x14>
 800eb28:	2316      	movs	r3, #22
 800eb2a:	6003      	str	r3, [r0, #0]
 800eb2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb30:	bd38      	pop	{r3, r4, r5, pc}
 800eb32:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eb34:	b112      	cbz	r2, 800eb3c <_raise_r+0x1e>
 800eb36:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb3a:	b94b      	cbnz	r3, 800eb50 <_raise_r+0x32>
 800eb3c:	4620      	mov	r0, r4
 800eb3e:	f000 f831 	bl	800eba4 <_getpid_r>
 800eb42:	462a      	mov	r2, r5
 800eb44:	4601      	mov	r1, r0
 800eb46:	4620      	mov	r0, r4
 800eb48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb4c:	f000 b818 	b.w	800eb80 <_kill_r>
 800eb50:	2b01      	cmp	r3, #1
 800eb52:	d00a      	beq.n	800eb6a <_raise_r+0x4c>
 800eb54:	1c59      	adds	r1, r3, #1
 800eb56:	d103      	bne.n	800eb60 <_raise_r+0x42>
 800eb58:	2316      	movs	r3, #22
 800eb5a:	6003      	str	r3, [r0, #0]
 800eb5c:	2001      	movs	r0, #1
 800eb5e:	e7e7      	b.n	800eb30 <_raise_r+0x12>
 800eb60:	2400      	movs	r4, #0
 800eb62:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eb66:	4628      	mov	r0, r5
 800eb68:	4798      	blx	r3
 800eb6a:	2000      	movs	r0, #0
 800eb6c:	e7e0      	b.n	800eb30 <_raise_r+0x12>
	...

0800eb70 <raise>:
 800eb70:	4b02      	ldr	r3, [pc, #8]	; (800eb7c <raise+0xc>)
 800eb72:	4601      	mov	r1, r0
 800eb74:	6818      	ldr	r0, [r3, #0]
 800eb76:	f7ff bfd2 	b.w	800eb1e <_raise_r>
 800eb7a:	bf00      	nop
 800eb7c:	2000004c 	.word	0x2000004c

0800eb80 <_kill_r>:
 800eb80:	b538      	push	{r3, r4, r5, lr}
 800eb82:	4d07      	ldr	r5, [pc, #28]	; (800eba0 <_kill_r+0x20>)
 800eb84:	2300      	movs	r3, #0
 800eb86:	4604      	mov	r4, r0
 800eb88:	4608      	mov	r0, r1
 800eb8a:	4611      	mov	r1, r2
 800eb8c:	602b      	str	r3, [r5, #0]
 800eb8e:	f7f6 fc09 	bl	80053a4 <_kill>
 800eb92:	1c43      	adds	r3, r0, #1
 800eb94:	d102      	bne.n	800eb9c <_kill_r+0x1c>
 800eb96:	682b      	ldr	r3, [r5, #0]
 800eb98:	b103      	cbz	r3, 800eb9c <_kill_r+0x1c>
 800eb9a:	6023      	str	r3, [r4, #0]
 800eb9c:	bd38      	pop	{r3, r4, r5, pc}
 800eb9e:	bf00      	nop
 800eba0:	200099fc 	.word	0x200099fc

0800eba4 <_getpid_r>:
 800eba4:	f7f6 bbf6 	b.w	8005394 <_getpid>

0800eba8 <fmaxf>:
 800eba8:	b508      	push	{r3, lr}
 800ebaa:	ed2d 8b02 	vpush	{d8}
 800ebae:	eeb0 8a40 	vmov.f32	s16, s0
 800ebb2:	eef0 8a60 	vmov.f32	s17, s1
 800ebb6:	f000 f82d 	bl	800ec14 <__fpclassifyf>
 800ebba:	b148      	cbz	r0, 800ebd0 <fmaxf+0x28>
 800ebbc:	eeb0 0a68 	vmov.f32	s0, s17
 800ebc0:	f000 f828 	bl	800ec14 <__fpclassifyf>
 800ebc4:	b130      	cbz	r0, 800ebd4 <fmaxf+0x2c>
 800ebc6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ebca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebce:	dc01      	bgt.n	800ebd4 <fmaxf+0x2c>
 800ebd0:	eeb0 8a68 	vmov.f32	s16, s17
 800ebd4:	eeb0 0a48 	vmov.f32	s0, s16
 800ebd8:	ecbd 8b02 	vpop	{d8}
 800ebdc:	bd08      	pop	{r3, pc}

0800ebde <fminf>:
 800ebde:	b508      	push	{r3, lr}
 800ebe0:	ed2d 8b02 	vpush	{d8}
 800ebe4:	eeb0 8a40 	vmov.f32	s16, s0
 800ebe8:	eef0 8a60 	vmov.f32	s17, s1
 800ebec:	f000 f812 	bl	800ec14 <__fpclassifyf>
 800ebf0:	b148      	cbz	r0, 800ec06 <fminf+0x28>
 800ebf2:	eeb0 0a68 	vmov.f32	s0, s17
 800ebf6:	f000 f80d 	bl	800ec14 <__fpclassifyf>
 800ebfa:	b130      	cbz	r0, 800ec0a <fminf+0x2c>
 800ebfc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ec00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec04:	d401      	bmi.n	800ec0a <fminf+0x2c>
 800ec06:	eeb0 8a68 	vmov.f32	s16, s17
 800ec0a:	eeb0 0a48 	vmov.f32	s0, s16
 800ec0e:	ecbd 8b02 	vpop	{d8}
 800ec12:	bd08      	pop	{r3, pc}

0800ec14 <__fpclassifyf>:
 800ec14:	ee10 3a10 	vmov	r3, s0
 800ec18:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800ec1c:	d00d      	beq.n	800ec3a <__fpclassifyf+0x26>
 800ec1e:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800ec22:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800ec26:	d30a      	bcc.n	800ec3e <__fpclassifyf+0x2a>
 800ec28:	4b07      	ldr	r3, [pc, #28]	; (800ec48 <__fpclassifyf+0x34>)
 800ec2a:	1e42      	subs	r2, r0, #1
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	d908      	bls.n	800ec42 <__fpclassifyf+0x2e>
 800ec30:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800ec34:	4258      	negs	r0, r3
 800ec36:	4158      	adcs	r0, r3
 800ec38:	4770      	bx	lr
 800ec3a:	2002      	movs	r0, #2
 800ec3c:	4770      	bx	lr
 800ec3e:	2004      	movs	r0, #4
 800ec40:	4770      	bx	lr
 800ec42:	2003      	movs	r0, #3
 800ec44:	4770      	bx	lr
 800ec46:	bf00      	nop
 800ec48:	007ffffe 	.word	0x007ffffe
 800ec4c:	00000000 	.word	0x00000000

0800ec50 <exp>:
 800ec50:	b538      	push	{r3, r4, r5, lr}
 800ec52:	ed2d 8b02 	vpush	{d8}
 800ec56:	ec55 4b10 	vmov	r4, r5, d0
 800ec5a:	f000 f8fd 	bl	800ee58 <__ieee754_exp>
 800ec5e:	eeb0 8a40 	vmov.f32	s16, s0
 800ec62:	eef0 8a60 	vmov.f32	s17, s1
 800ec66:	ec45 4b10 	vmov	d0, r4, r5
 800ec6a:	f001 f914 	bl	800fe96 <finite>
 800ec6e:	b168      	cbz	r0, 800ec8c <exp+0x3c>
 800ec70:	a317      	add	r3, pc, #92	; (adr r3, 800ecd0 <exp+0x80>)
 800ec72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec76:	4620      	mov	r0, r4
 800ec78:	4629      	mov	r1, r5
 800ec7a:	f7f1 ff6d 	bl	8000b58 <__aeabi_dcmpgt>
 800ec7e:	b160      	cbz	r0, 800ec9a <exp+0x4a>
 800ec80:	f7fb fe3a 	bl	800a8f8 <__errno>
 800ec84:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800ecc0 <exp+0x70>
 800ec88:	2322      	movs	r3, #34	; 0x22
 800ec8a:	6003      	str	r3, [r0, #0]
 800ec8c:	eeb0 0a48 	vmov.f32	s0, s16
 800ec90:	eef0 0a68 	vmov.f32	s1, s17
 800ec94:	ecbd 8b02 	vpop	{d8}
 800ec98:	bd38      	pop	{r3, r4, r5, pc}
 800ec9a:	a30f      	add	r3, pc, #60	; (adr r3, 800ecd8 <exp+0x88>)
 800ec9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca0:	4620      	mov	r0, r4
 800eca2:	4629      	mov	r1, r5
 800eca4:	f7f1 ff3a 	bl	8000b1c <__aeabi_dcmplt>
 800eca8:	2800      	cmp	r0, #0
 800ecaa:	d0ef      	beq.n	800ec8c <exp+0x3c>
 800ecac:	f7fb fe24 	bl	800a8f8 <__errno>
 800ecb0:	2322      	movs	r3, #34	; 0x22
 800ecb2:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800ecc8 <exp+0x78>
 800ecb6:	6003      	str	r3, [r0, #0]
 800ecb8:	e7e8      	b.n	800ec8c <exp+0x3c>
 800ecba:	bf00      	nop
 800ecbc:	f3af 8000 	nop.w
 800ecc0:	00000000 	.word	0x00000000
 800ecc4:	7ff00000 	.word	0x7ff00000
	...
 800ecd0:	fefa39ef 	.word	0xfefa39ef
 800ecd4:	40862e42 	.word	0x40862e42
 800ecd8:	d52d3051 	.word	0xd52d3051
 800ecdc:	c0874910 	.word	0xc0874910

0800ece0 <pow>:
 800ece0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ece2:	ed2d 8b02 	vpush	{d8}
 800ece6:	eeb0 8a40 	vmov.f32	s16, s0
 800ecea:	eef0 8a60 	vmov.f32	s17, s1
 800ecee:	ec55 4b11 	vmov	r4, r5, d1
 800ecf2:	f000 fa35 	bl	800f160 <__ieee754_pow>
 800ecf6:	4622      	mov	r2, r4
 800ecf8:	462b      	mov	r3, r5
 800ecfa:	4620      	mov	r0, r4
 800ecfc:	4629      	mov	r1, r5
 800ecfe:	ec57 6b10 	vmov	r6, r7, d0
 800ed02:	f7f1 ff33 	bl	8000b6c <__aeabi_dcmpun>
 800ed06:	2800      	cmp	r0, #0
 800ed08:	d13b      	bne.n	800ed82 <pow+0xa2>
 800ed0a:	ec51 0b18 	vmov	r0, r1, d8
 800ed0e:	2200      	movs	r2, #0
 800ed10:	2300      	movs	r3, #0
 800ed12:	f7f1 fef9 	bl	8000b08 <__aeabi_dcmpeq>
 800ed16:	b1b8      	cbz	r0, 800ed48 <pow+0x68>
 800ed18:	2200      	movs	r2, #0
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	4620      	mov	r0, r4
 800ed1e:	4629      	mov	r1, r5
 800ed20:	f7f1 fef2 	bl	8000b08 <__aeabi_dcmpeq>
 800ed24:	2800      	cmp	r0, #0
 800ed26:	d146      	bne.n	800edb6 <pow+0xd6>
 800ed28:	ec45 4b10 	vmov	d0, r4, r5
 800ed2c:	f001 f8b3 	bl	800fe96 <finite>
 800ed30:	b338      	cbz	r0, 800ed82 <pow+0xa2>
 800ed32:	2200      	movs	r2, #0
 800ed34:	2300      	movs	r3, #0
 800ed36:	4620      	mov	r0, r4
 800ed38:	4629      	mov	r1, r5
 800ed3a:	f7f1 feef 	bl	8000b1c <__aeabi_dcmplt>
 800ed3e:	b300      	cbz	r0, 800ed82 <pow+0xa2>
 800ed40:	f7fb fdda 	bl	800a8f8 <__errno>
 800ed44:	2322      	movs	r3, #34	; 0x22
 800ed46:	e01b      	b.n	800ed80 <pow+0xa0>
 800ed48:	ec47 6b10 	vmov	d0, r6, r7
 800ed4c:	f001 f8a3 	bl	800fe96 <finite>
 800ed50:	b9e0      	cbnz	r0, 800ed8c <pow+0xac>
 800ed52:	eeb0 0a48 	vmov.f32	s0, s16
 800ed56:	eef0 0a68 	vmov.f32	s1, s17
 800ed5a:	f001 f89c 	bl	800fe96 <finite>
 800ed5e:	b1a8      	cbz	r0, 800ed8c <pow+0xac>
 800ed60:	ec45 4b10 	vmov	d0, r4, r5
 800ed64:	f001 f897 	bl	800fe96 <finite>
 800ed68:	b180      	cbz	r0, 800ed8c <pow+0xac>
 800ed6a:	4632      	mov	r2, r6
 800ed6c:	463b      	mov	r3, r7
 800ed6e:	4630      	mov	r0, r6
 800ed70:	4639      	mov	r1, r7
 800ed72:	f7f1 fefb 	bl	8000b6c <__aeabi_dcmpun>
 800ed76:	2800      	cmp	r0, #0
 800ed78:	d0e2      	beq.n	800ed40 <pow+0x60>
 800ed7a:	f7fb fdbd 	bl	800a8f8 <__errno>
 800ed7e:	2321      	movs	r3, #33	; 0x21
 800ed80:	6003      	str	r3, [r0, #0]
 800ed82:	ecbd 8b02 	vpop	{d8}
 800ed86:	ec47 6b10 	vmov	d0, r6, r7
 800ed8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	2300      	movs	r3, #0
 800ed90:	4630      	mov	r0, r6
 800ed92:	4639      	mov	r1, r7
 800ed94:	f7f1 feb8 	bl	8000b08 <__aeabi_dcmpeq>
 800ed98:	2800      	cmp	r0, #0
 800ed9a:	d0f2      	beq.n	800ed82 <pow+0xa2>
 800ed9c:	eeb0 0a48 	vmov.f32	s0, s16
 800eda0:	eef0 0a68 	vmov.f32	s1, s17
 800eda4:	f001 f877 	bl	800fe96 <finite>
 800eda8:	2800      	cmp	r0, #0
 800edaa:	d0ea      	beq.n	800ed82 <pow+0xa2>
 800edac:	ec45 4b10 	vmov	d0, r4, r5
 800edb0:	f001 f871 	bl	800fe96 <finite>
 800edb4:	e7c3      	b.n	800ed3e <pow+0x5e>
 800edb6:	4f01      	ldr	r7, [pc, #4]	; (800edbc <pow+0xdc>)
 800edb8:	2600      	movs	r6, #0
 800edba:	e7e2      	b.n	800ed82 <pow+0xa2>
 800edbc:	3ff00000 	.word	0x3ff00000

0800edc0 <sqrt>:
 800edc0:	b538      	push	{r3, r4, r5, lr}
 800edc2:	ed2d 8b02 	vpush	{d8}
 800edc6:	ec55 4b10 	vmov	r4, r5, d0
 800edca:	f000 fef7 	bl	800fbbc <__ieee754_sqrt>
 800edce:	4622      	mov	r2, r4
 800edd0:	462b      	mov	r3, r5
 800edd2:	4620      	mov	r0, r4
 800edd4:	4629      	mov	r1, r5
 800edd6:	eeb0 8a40 	vmov.f32	s16, s0
 800edda:	eef0 8a60 	vmov.f32	s17, s1
 800edde:	f7f1 fec5 	bl	8000b6c <__aeabi_dcmpun>
 800ede2:	b990      	cbnz	r0, 800ee0a <sqrt+0x4a>
 800ede4:	2200      	movs	r2, #0
 800ede6:	2300      	movs	r3, #0
 800ede8:	4620      	mov	r0, r4
 800edea:	4629      	mov	r1, r5
 800edec:	f7f1 fe96 	bl	8000b1c <__aeabi_dcmplt>
 800edf0:	b158      	cbz	r0, 800ee0a <sqrt+0x4a>
 800edf2:	f7fb fd81 	bl	800a8f8 <__errno>
 800edf6:	2321      	movs	r3, #33	; 0x21
 800edf8:	6003      	str	r3, [r0, #0]
 800edfa:	2200      	movs	r2, #0
 800edfc:	2300      	movs	r3, #0
 800edfe:	4610      	mov	r0, r2
 800ee00:	4619      	mov	r1, r3
 800ee02:	f7f1 fd43 	bl	800088c <__aeabi_ddiv>
 800ee06:	ec41 0b18 	vmov	d8, r0, r1
 800ee0a:	eeb0 0a48 	vmov.f32	s0, s16
 800ee0e:	eef0 0a68 	vmov.f32	s1, s17
 800ee12:	ecbd 8b02 	vpop	{d8}
 800ee16:	bd38      	pop	{r3, r4, r5, pc}

0800ee18 <fmodf>:
 800ee18:	b508      	push	{r3, lr}
 800ee1a:	ed2d 8b02 	vpush	{d8}
 800ee1e:	eef0 8a40 	vmov.f32	s17, s0
 800ee22:	eeb0 8a60 	vmov.f32	s16, s1
 800ee26:	f000 ff7b 	bl	800fd20 <__ieee754_fmodf>
 800ee2a:	eef4 8a48 	vcmp.f32	s17, s16
 800ee2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee32:	d60c      	bvs.n	800ee4e <fmodf+0x36>
 800ee34:	eddf 8a07 	vldr	s17, [pc, #28]	; 800ee54 <fmodf+0x3c>
 800ee38:	eeb4 8a68 	vcmp.f32	s16, s17
 800ee3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee40:	d105      	bne.n	800ee4e <fmodf+0x36>
 800ee42:	f7fb fd59 	bl	800a8f8 <__errno>
 800ee46:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ee4a:	2321      	movs	r3, #33	; 0x21
 800ee4c:	6003      	str	r3, [r0, #0]
 800ee4e:	ecbd 8b02 	vpop	{d8}
 800ee52:	bd08      	pop	{r3, pc}
 800ee54:	00000000 	.word	0x00000000

0800ee58 <__ieee754_exp>:
 800ee58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee5c:	ec55 4b10 	vmov	r4, r5, d0
 800ee60:	49b5      	ldr	r1, [pc, #724]	; (800f138 <__ieee754_exp+0x2e0>)
 800ee62:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ee66:	428b      	cmp	r3, r1
 800ee68:	ed2d 8b04 	vpush	{d8-d9}
 800ee6c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800ee70:	d93d      	bls.n	800eeee <__ieee754_exp+0x96>
 800ee72:	49b2      	ldr	r1, [pc, #712]	; (800f13c <__ieee754_exp+0x2e4>)
 800ee74:	428b      	cmp	r3, r1
 800ee76:	d918      	bls.n	800eeaa <__ieee754_exp+0x52>
 800ee78:	ee10 3a10 	vmov	r3, s0
 800ee7c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800ee80:	4313      	orrs	r3, r2
 800ee82:	d009      	beq.n	800ee98 <__ieee754_exp+0x40>
 800ee84:	ee10 2a10 	vmov	r2, s0
 800ee88:	462b      	mov	r3, r5
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	4629      	mov	r1, r5
 800ee8e:	f7f1 fa1d 	bl	80002cc <__adddf3>
 800ee92:	4604      	mov	r4, r0
 800ee94:	460d      	mov	r5, r1
 800ee96:	e002      	b.n	800ee9e <__ieee754_exp+0x46>
 800ee98:	b10e      	cbz	r6, 800ee9e <__ieee754_exp+0x46>
 800ee9a:	2400      	movs	r4, #0
 800ee9c:	2500      	movs	r5, #0
 800ee9e:	ecbd 8b04 	vpop	{d8-d9}
 800eea2:	ec45 4b10 	vmov	d0, r4, r5
 800eea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeaa:	a38d      	add	r3, pc, #564	; (adr r3, 800f0e0 <__ieee754_exp+0x288>)
 800eeac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb0:	ee10 0a10 	vmov	r0, s0
 800eeb4:	4629      	mov	r1, r5
 800eeb6:	f7f1 fe4f 	bl	8000b58 <__aeabi_dcmpgt>
 800eeba:	4607      	mov	r7, r0
 800eebc:	b130      	cbz	r0, 800eecc <__ieee754_exp+0x74>
 800eebe:	ecbd 8b04 	vpop	{d8-d9}
 800eec2:	2000      	movs	r0, #0
 800eec4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eec8:	f000 bfd3 	b.w	800fe72 <__math_oflow>
 800eecc:	a386      	add	r3, pc, #536	; (adr r3, 800f0e8 <__ieee754_exp+0x290>)
 800eece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed2:	4620      	mov	r0, r4
 800eed4:	4629      	mov	r1, r5
 800eed6:	f7f1 fe21 	bl	8000b1c <__aeabi_dcmplt>
 800eeda:	2800      	cmp	r0, #0
 800eedc:	f000 808b 	beq.w	800eff6 <__ieee754_exp+0x19e>
 800eee0:	ecbd 8b04 	vpop	{d8-d9}
 800eee4:	4638      	mov	r0, r7
 800eee6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eeea:	f000 bfb9 	b.w	800fe60 <__math_uflow>
 800eeee:	4a94      	ldr	r2, [pc, #592]	; (800f140 <__ieee754_exp+0x2e8>)
 800eef0:	4293      	cmp	r3, r2
 800eef2:	f240 80ac 	bls.w	800f04e <__ieee754_exp+0x1f6>
 800eef6:	4a93      	ldr	r2, [pc, #588]	; (800f144 <__ieee754_exp+0x2ec>)
 800eef8:	4293      	cmp	r3, r2
 800eefa:	d87c      	bhi.n	800eff6 <__ieee754_exp+0x19e>
 800eefc:	4b92      	ldr	r3, [pc, #584]	; (800f148 <__ieee754_exp+0x2f0>)
 800eefe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ef02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef06:	ee10 0a10 	vmov	r0, s0
 800ef0a:	4629      	mov	r1, r5
 800ef0c:	f7f1 f9dc 	bl	80002c8 <__aeabi_dsub>
 800ef10:	4b8e      	ldr	r3, [pc, #568]	; (800f14c <__ieee754_exp+0x2f4>)
 800ef12:	00f7      	lsls	r7, r6, #3
 800ef14:	443b      	add	r3, r7
 800ef16:	ed93 7b00 	vldr	d7, [r3]
 800ef1a:	f1c6 0a01 	rsb	sl, r6, #1
 800ef1e:	4680      	mov	r8, r0
 800ef20:	4689      	mov	r9, r1
 800ef22:	ebaa 0a06 	sub.w	sl, sl, r6
 800ef26:	eeb0 8a47 	vmov.f32	s16, s14
 800ef2a:	eef0 8a67 	vmov.f32	s17, s15
 800ef2e:	ec53 2b18 	vmov	r2, r3, d8
 800ef32:	4640      	mov	r0, r8
 800ef34:	4649      	mov	r1, r9
 800ef36:	f7f1 f9c7 	bl	80002c8 <__aeabi_dsub>
 800ef3a:	4604      	mov	r4, r0
 800ef3c:	460d      	mov	r5, r1
 800ef3e:	4622      	mov	r2, r4
 800ef40:	462b      	mov	r3, r5
 800ef42:	4620      	mov	r0, r4
 800ef44:	4629      	mov	r1, r5
 800ef46:	f7f1 fb77 	bl	8000638 <__aeabi_dmul>
 800ef4a:	a369      	add	r3, pc, #420	; (adr r3, 800f0f0 <__ieee754_exp+0x298>)
 800ef4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef50:	4606      	mov	r6, r0
 800ef52:	460f      	mov	r7, r1
 800ef54:	f7f1 fb70 	bl	8000638 <__aeabi_dmul>
 800ef58:	a367      	add	r3, pc, #412	; (adr r3, 800f0f8 <__ieee754_exp+0x2a0>)
 800ef5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef5e:	f7f1 f9b3 	bl	80002c8 <__aeabi_dsub>
 800ef62:	4632      	mov	r2, r6
 800ef64:	463b      	mov	r3, r7
 800ef66:	f7f1 fb67 	bl	8000638 <__aeabi_dmul>
 800ef6a:	a365      	add	r3, pc, #404	; (adr r3, 800f100 <__ieee754_exp+0x2a8>)
 800ef6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef70:	f7f1 f9ac 	bl	80002cc <__adddf3>
 800ef74:	4632      	mov	r2, r6
 800ef76:	463b      	mov	r3, r7
 800ef78:	f7f1 fb5e 	bl	8000638 <__aeabi_dmul>
 800ef7c:	a362      	add	r3, pc, #392	; (adr r3, 800f108 <__ieee754_exp+0x2b0>)
 800ef7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef82:	f7f1 f9a1 	bl	80002c8 <__aeabi_dsub>
 800ef86:	4632      	mov	r2, r6
 800ef88:	463b      	mov	r3, r7
 800ef8a:	f7f1 fb55 	bl	8000638 <__aeabi_dmul>
 800ef8e:	a360      	add	r3, pc, #384	; (adr r3, 800f110 <__ieee754_exp+0x2b8>)
 800ef90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef94:	f7f1 f99a 	bl	80002cc <__adddf3>
 800ef98:	4632      	mov	r2, r6
 800ef9a:	463b      	mov	r3, r7
 800ef9c:	f7f1 fb4c 	bl	8000638 <__aeabi_dmul>
 800efa0:	4602      	mov	r2, r0
 800efa2:	460b      	mov	r3, r1
 800efa4:	4620      	mov	r0, r4
 800efa6:	4629      	mov	r1, r5
 800efa8:	f7f1 f98e 	bl	80002c8 <__aeabi_dsub>
 800efac:	4602      	mov	r2, r0
 800efae:	460b      	mov	r3, r1
 800efb0:	4606      	mov	r6, r0
 800efb2:	460f      	mov	r7, r1
 800efb4:	4620      	mov	r0, r4
 800efb6:	4629      	mov	r1, r5
 800efb8:	f7f1 fb3e 	bl	8000638 <__aeabi_dmul>
 800efbc:	ec41 0b19 	vmov	d9, r0, r1
 800efc0:	f1ba 0f00 	cmp.w	sl, #0
 800efc4:	d15d      	bne.n	800f082 <__ieee754_exp+0x22a>
 800efc6:	2200      	movs	r2, #0
 800efc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800efcc:	4630      	mov	r0, r6
 800efce:	4639      	mov	r1, r7
 800efd0:	f7f1 f97a 	bl	80002c8 <__aeabi_dsub>
 800efd4:	4602      	mov	r2, r0
 800efd6:	460b      	mov	r3, r1
 800efd8:	ec51 0b19 	vmov	r0, r1, d9
 800efdc:	f7f1 fc56 	bl	800088c <__aeabi_ddiv>
 800efe0:	4622      	mov	r2, r4
 800efe2:	462b      	mov	r3, r5
 800efe4:	f7f1 f970 	bl	80002c8 <__aeabi_dsub>
 800efe8:	4602      	mov	r2, r0
 800efea:	460b      	mov	r3, r1
 800efec:	2000      	movs	r0, #0
 800efee:	4958      	ldr	r1, [pc, #352]	; (800f150 <__ieee754_exp+0x2f8>)
 800eff0:	f7f1 f96a 	bl	80002c8 <__aeabi_dsub>
 800eff4:	e74d      	b.n	800ee92 <__ieee754_exp+0x3a>
 800eff6:	4857      	ldr	r0, [pc, #348]	; (800f154 <__ieee754_exp+0x2fc>)
 800eff8:	a347      	add	r3, pc, #284	; (adr r3, 800f118 <__ieee754_exp+0x2c0>)
 800effa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800effe:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800f002:	4629      	mov	r1, r5
 800f004:	4620      	mov	r0, r4
 800f006:	f7f1 fb17 	bl	8000638 <__aeabi_dmul>
 800f00a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f00e:	f7f1 f95d 	bl	80002cc <__adddf3>
 800f012:	f7f1 fdc1 	bl	8000b98 <__aeabi_d2iz>
 800f016:	4682      	mov	sl, r0
 800f018:	f7f1 faa4 	bl	8000564 <__aeabi_i2d>
 800f01c:	a340      	add	r3, pc, #256	; (adr r3, 800f120 <__ieee754_exp+0x2c8>)
 800f01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f022:	4606      	mov	r6, r0
 800f024:	460f      	mov	r7, r1
 800f026:	f7f1 fb07 	bl	8000638 <__aeabi_dmul>
 800f02a:	4602      	mov	r2, r0
 800f02c:	460b      	mov	r3, r1
 800f02e:	4620      	mov	r0, r4
 800f030:	4629      	mov	r1, r5
 800f032:	f7f1 f949 	bl	80002c8 <__aeabi_dsub>
 800f036:	a33c      	add	r3, pc, #240	; (adr r3, 800f128 <__ieee754_exp+0x2d0>)
 800f038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f03c:	4680      	mov	r8, r0
 800f03e:	4689      	mov	r9, r1
 800f040:	4630      	mov	r0, r6
 800f042:	4639      	mov	r1, r7
 800f044:	f7f1 faf8 	bl	8000638 <__aeabi_dmul>
 800f048:	ec41 0b18 	vmov	d8, r0, r1
 800f04c:	e76f      	b.n	800ef2e <__ieee754_exp+0xd6>
 800f04e:	4a42      	ldr	r2, [pc, #264]	; (800f158 <__ieee754_exp+0x300>)
 800f050:	4293      	cmp	r3, r2
 800f052:	d811      	bhi.n	800f078 <__ieee754_exp+0x220>
 800f054:	a336      	add	r3, pc, #216	; (adr r3, 800f130 <__ieee754_exp+0x2d8>)
 800f056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f05a:	ee10 0a10 	vmov	r0, s0
 800f05e:	4629      	mov	r1, r5
 800f060:	f7f1 f934 	bl	80002cc <__adddf3>
 800f064:	4b3a      	ldr	r3, [pc, #232]	; (800f150 <__ieee754_exp+0x2f8>)
 800f066:	2200      	movs	r2, #0
 800f068:	f7f1 fd76 	bl	8000b58 <__aeabi_dcmpgt>
 800f06c:	b138      	cbz	r0, 800f07e <__ieee754_exp+0x226>
 800f06e:	4b38      	ldr	r3, [pc, #224]	; (800f150 <__ieee754_exp+0x2f8>)
 800f070:	2200      	movs	r2, #0
 800f072:	4620      	mov	r0, r4
 800f074:	4629      	mov	r1, r5
 800f076:	e70a      	b.n	800ee8e <__ieee754_exp+0x36>
 800f078:	f04f 0a00 	mov.w	sl, #0
 800f07c:	e75f      	b.n	800ef3e <__ieee754_exp+0xe6>
 800f07e:	4682      	mov	sl, r0
 800f080:	e75d      	b.n	800ef3e <__ieee754_exp+0xe6>
 800f082:	4632      	mov	r2, r6
 800f084:	463b      	mov	r3, r7
 800f086:	2000      	movs	r0, #0
 800f088:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800f08c:	f7f1 f91c 	bl	80002c8 <__aeabi_dsub>
 800f090:	4602      	mov	r2, r0
 800f092:	460b      	mov	r3, r1
 800f094:	ec51 0b19 	vmov	r0, r1, d9
 800f098:	f7f1 fbf8 	bl	800088c <__aeabi_ddiv>
 800f09c:	4602      	mov	r2, r0
 800f09e:	460b      	mov	r3, r1
 800f0a0:	ec51 0b18 	vmov	r0, r1, d8
 800f0a4:	f7f1 f910 	bl	80002c8 <__aeabi_dsub>
 800f0a8:	4642      	mov	r2, r8
 800f0aa:	464b      	mov	r3, r9
 800f0ac:	f7f1 f90c 	bl	80002c8 <__aeabi_dsub>
 800f0b0:	4602      	mov	r2, r0
 800f0b2:	460b      	mov	r3, r1
 800f0b4:	2000      	movs	r0, #0
 800f0b6:	4926      	ldr	r1, [pc, #152]	; (800f150 <__ieee754_exp+0x2f8>)
 800f0b8:	f7f1 f906 	bl	80002c8 <__aeabi_dsub>
 800f0bc:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800f0c0:	4592      	cmp	sl, r2
 800f0c2:	db02      	blt.n	800f0ca <__ieee754_exp+0x272>
 800f0c4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800f0c8:	e6e3      	b.n	800ee92 <__ieee754_exp+0x3a>
 800f0ca:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800f0ce:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800f0d8:	f7f1 faae 	bl	8000638 <__aeabi_dmul>
 800f0dc:	e6d9      	b.n	800ee92 <__ieee754_exp+0x3a>
 800f0de:	bf00      	nop
 800f0e0:	fefa39ef 	.word	0xfefa39ef
 800f0e4:	40862e42 	.word	0x40862e42
 800f0e8:	d52d3051 	.word	0xd52d3051
 800f0ec:	c0874910 	.word	0xc0874910
 800f0f0:	72bea4d0 	.word	0x72bea4d0
 800f0f4:	3e663769 	.word	0x3e663769
 800f0f8:	c5d26bf1 	.word	0xc5d26bf1
 800f0fc:	3ebbbd41 	.word	0x3ebbbd41
 800f100:	af25de2c 	.word	0xaf25de2c
 800f104:	3f11566a 	.word	0x3f11566a
 800f108:	16bebd93 	.word	0x16bebd93
 800f10c:	3f66c16c 	.word	0x3f66c16c
 800f110:	5555553e 	.word	0x5555553e
 800f114:	3fc55555 	.word	0x3fc55555
 800f118:	652b82fe 	.word	0x652b82fe
 800f11c:	3ff71547 	.word	0x3ff71547
 800f120:	fee00000 	.word	0xfee00000
 800f124:	3fe62e42 	.word	0x3fe62e42
 800f128:	35793c76 	.word	0x35793c76
 800f12c:	3dea39ef 	.word	0x3dea39ef
 800f130:	8800759c 	.word	0x8800759c
 800f134:	7e37e43c 	.word	0x7e37e43c
 800f138:	40862e41 	.word	0x40862e41
 800f13c:	7fefffff 	.word	0x7fefffff
 800f140:	3fd62e42 	.word	0x3fd62e42
 800f144:	3ff0a2b1 	.word	0x3ff0a2b1
 800f148:	08011628 	.word	0x08011628
 800f14c:	08011638 	.word	0x08011638
 800f150:	3ff00000 	.word	0x3ff00000
 800f154:	08011618 	.word	0x08011618
 800f158:	3defffff 	.word	0x3defffff
 800f15c:	00000000 	.word	0x00000000

0800f160 <__ieee754_pow>:
 800f160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f164:	ed2d 8b06 	vpush	{d8-d10}
 800f168:	b089      	sub	sp, #36	; 0x24
 800f16a:	ed8d 1b00 	vstr	d1, [sp]
 800f16e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f172:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f176:	ea58 0102 	orrs.w	r1, r8, r2
 800f17a:	ec57 6b10 	vmov	r6, r7, d0
 800f17e:	d115      	bne.n	800f1ac <__ieee754_pow+0x4c>
 800f180:	19b3      	adds	r3, r6, r6
 800f182:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f186:	4152      	adcs	r2, r2
 800f188:	4299      	cmp	r1, r3
 800f18a:	4b89      	ldr	r3, [pc, #548]	; (800f3b0 <__ieee754_pow+0x250>)
 800f18c:	4193      	sbcs	r3, r2
 800f18e:	f080 84d2 	bcs.w	800fb36 <__ieee754_pow+0x9d6>
 800f192:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f196:	4630      	mov	r0, r6
 800f198:	4639      	mov	r1, r7
 800f19a:	f7f1 f897 	bl	80002cc <__adddf3>
 800f19e:	ec41 0b10 	vmov	d0, r0, r1
 800f1a2:	b009      	add	sp, #36	; 0x24
 800f1a4:	ecbd 8b06 	vpop	{d8-d10}
 800f1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1ac:	4b81      	ldr	r3, [pc, #516]	; (800f3b4 <__ieee754_pow+0x254>)
 800f1ae:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f1b2:	429c      	cmp	r4, r3
 800f1b4:	ee10 aa10 	vmov	sl, s0
 800f1b8:	463d      	mov	r5, r7
 800f1ba:	dc06      	bgt.n	800f1ca <__ieee754_pow+0x6a>
 800f1bc:	d101      	bne.n	800f1c2 <__ieee754_pow+0x62>
 800f1be:	2e00      	cmp	r6, #0
 800f1c0:	d1e7      	bne.n	800f192 <__ieee754_pow+0x32>
 800f1c2:	4598      	cmp	r8, r3
 800f1c4:	dc01      	bgt.n	800f1ca <__ieee754_pow+0x6a>
 800f1c6:	d10f      	bne.n	800f1e8 <__ieee754_pow+0x88>
 800f1c8:	b172      	cbz	r2, 800f1e8 <__ieee754_pow+0x88>
 800f1ca:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800f1ce:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800f1d2:	ea55 050a 	orrs.w	r5, r5, sl
 800f1d6:	d1dc      	bne.n	800f192 <__ieee754_pow+0x32>
 800f1d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f1dc:	18db      	adds	r3, r3, r3
 800f1de:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800f1e2:	4152      	adcs	r2, r2
 800f1e4:	429d      	cmp	r5, r3
 800f1e6:	e7d0      	b.n	800f18a <__ieee754_pow+0x2a>
 800f1e8:	2d00      	cmp	r5, #0
 800f1ea:	da3b      	bge.n	800f264 <__ieee754_pow+0x104>
 800f1ec:	4b72      	ldr	r3, [pc, #456]	; (800f3b8 <__ieee754_pow+0x258>)
 800f1ee:	4598      	cmp	r8, r3
 800f1f0:	dc51      	bgt.n	800f296 <__ieee754_pow+0x136>
 800f1f2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f1f6:	4598      	cmp	r8, r3
 800f1f8:	f340 84ac 	ble.w	800fb54 <__ieee754_pow+0x9f4>
 800f1fc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f200:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f204:	2b14      	cmp	r3, #20
 800f206:	dd0f      	ble.n	800f228 <__ieee754_pow+0xc8>
 800f208:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f20c:	fa22 f103 	lsr.w	r1, r2, r3
 800f210:	fa01 f303 	lsl.w	r3, r1, r3
 800f214:	4293      	cmp	r3, r2
 800f216:	f040 849d 	bne.w	800fb54 <__ieee754_pow+0x9f4>
 800f21a:	f001 0101 	and.w	r1, r1, #1
 800f21e:	f1c1 0302 	rsb	r3, r1, #2
 800f222:	9304      	str	r3, [sp, #16]
 800f224:	b182      	cbz	r2, 800f248 <__ieee754_pow+0xe8>
 800f226:	e05f      	b.n	800f2e8 <__ieee754_pow+0x188>
 800f228:	2a00      	cmp	r2, #0
 800f22a:	d15b      	bne.n	800f2e4 <__ieee754_pow+0x184>
 800f22c:	f1c3 0314 	rsb	r3, r3, #20
 800f230:	fa48 f103 	asr.w	r1, r8, r3
 800f234:	fa01 f303 	lsl.w	r3, r1, r3
 800f238:	4543      	cmp	r3, r8
 800f23a:	f040 8488 	bne.w	800fb4e <__ieee754_pow+0x9ee>
 800f23e:	f001 0101 	and.w	r1, r1, #1
 800f242:	f1c1 0302 	rsb	r3, r1, #2
 800f246:	9304      	str	r3, [sp, #16]
 800f248:	4b5c      	ldr	r3, [pc, #368]	; (800f3bc <__ieee754_pow+0x25c>)
 800f24a:	4598      	cmp	r8, r3
 800f24c:	d132      	bne.n	800f2b4 <__ieee754_pow+0x154>
 800f24e:	f1b9 0f00 	cmp.w	r9, #0
 800f252:	f280 8478 	bge.w	800fb46 <__ieee754_pow+0x9e6>
 800f256:	4959      	ldr	r1, [pc, #356]	; (800f3bc <__ieee754_pow+0x25c>)
 800f258:	4632      	mov	r2, r6
 800f25a:	463b      	mov	r3, r7
 800f25c:	2000      	movs	r0, #0
 800f25e:	f7f1 fb15 	bl	800088c <__aeabi_ddiv>
 800f262:	e79c      	b.n	800f19e <__ieee754_pow+0x3e>
 800f264:	2300      	movs	r3, #0
 800f266:	9304      	str	r3, [sp, #16]
 800f268:	2a00      	cmp	r2, #0
 800f26a:	d13d      	bne.n	800f2e8 <__ieee754_pow+0x188>
 800f26c:	4b51      	ldr	r3, [pc, #324]	; (800f3b4 <__ieee754_pow+0x254>)
 800f26e:	4598      	cmp	r8, r3
 800f270:	d1ea      	bne.n	800f248 <__ieee754_pow+0xe8>
 800f272:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f276:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f27a:	ea53 030a 	orrs.w	r3, r3, sl
 800f27e:	f000 845a 	beq.w	800fb36 <__ieee754_pow+0x9d6>
 800f282:	4b4f      	ldr	r3, [pc, #316]	; (800f3c0 <__ieee754_pow+0x260>)
 800f284:	429c      	cmp	r4, r3
 800f286:	dd08      	ble.n	800f29a <__ieee754_pow+0x13a>
 800f288:	f1b9 0f00 	cmp.w	r9, #0
 800f28c:	f2c0 8457 	blt.w	800fb3e <__ieee754_pow+0x9de>
 800f290:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f294:	e783      	b.n	800f19e <__ieee754_pow+0x3e>
 800f296:	2302      	movs	r3, #2
 800f298:	e7e5      	b.n	800f266 <__ieee754_pow+0x106>
 800f29a:	f1b9 0f00 	cmp.w	r9, #0
 800f29e:	f04f 0000 	mov.w	r0, #0
 800f2a2:	f04f 0100 	mov.w	r1, #0
 800f2a6:	f6bf af7a 	bge.w	800f19e <__ieee754_pow+0x3e>
 800f2aa:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f2ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f2b2:	e774      	b.n	800f19e <__ieee754_pow+0x3e>
 800f2b4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800f2b8:	d106      	bne.n	800f2c8 <__ieee754_pow+0x168>
 800f2ba:	4632      	mov	r2, r6
 800f2bc:	463b      	mov	r3, r7
 800f2be:	4630      	mov	r0, r6
 800f2c0:	4639      	mov	r1, r7
 800f2c2:	f7f1 f9b9 	bl	8000638 <__aeabi_dmul>
 800f2c6:	e76a      	b.n	800f19e <__ieee754_pow+0x3e>
 800f2c8:	4b3e      	ldr	r3, [pc, #248]	; (800f3c4 <__ieee754_pow+0x264>)
 800f2ca:	4599      	cmp	r9, r3
 800f2cc:	d10c      	bne.n	800f2e8 <__ieee754_pow+0x188>
 800f2ce:	2d00      	cmp	r5, #0
 800f2d0:	db0a      	blt.n	800f2e8 <__ieee754_pow+0x188>
 800f2d2:	ec47 6b10 	vmov	d0, r6, r7
 800f2d6:	b009      	add	sp, #36	; 0x24
 800f2d8:	ecbd 8b06 	vpop	{d8-d10}
 800f2dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2e0:	f000 bc6c 	b.w	800fbbc <__ieee754_sqrt>
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	9304      	str	r3, [sp, #16]
 800f2e8:	ec47 6b10 	vmov	d0, r6, r7
 800f2ec:	f000 fdca 	bl	800fe84 <fabs>
 800f2f0:	ec51 0b10 	vmov	r0, r1, d0
 800f2f4:	f1ba 0f00 	cmp.w	sl, #0
 800f2f8:	d129      	bne.n	800f34e <__ieee754_pow+0x1ee>
 800f2fa:	b124      	cbz	r4, 800f306 <__ieee754_pow+0x1a6>
 800f2fc:	4b2f      	ldr	r3, [pc, #188]	; (800f3bc <__ieee754_pow+0x25c>)
 800f2fe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800f302:	429a      	cmp	r2, r3
 800f304:	d123      	bne.n	800f34e <__ieee754_pow+0x1ee>
 800f306:	f1b9 0f00 	cmp.w	r9, #0
 800f30a:	da05      	bge.n	800f318 <__ieee754_pow+0x1b8>
 800f30c:	4602      	mov	r2, r0
 800f30e:	460b      	mov	r3, r1
 800f310:	2000      	movs	r0, #0
 800f312:	492a      	ldr	r1, [pc, #168]	; (800f3bc <__ieee754_pow+0x25c>)
 800f314:	f7f1 faba 	bl	800088c <__aeabi_ddiv>
 800f318:	2d00      	cmp	r5, #0
 800f31a:	f6bf af40 	bge.w	800f19e <__ieee754_pow+0x3e>
 800f31e:	9b04      	ldr	r3, [sp, #16]
 800f320:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f324:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f328:	4323      	orrs	r3, r4
 800f32a:	d108      	bne.n	800f33e <__ieee754_pow+0x1de>
 800f32c:	4602      	mov	r2, r0
 800f32e:	460b      	mov	r3, r1
 800f330:	4610      	mov	r0, r2
 800f332:	4619      	mov	r1, r3
 800f334:	f7f0 ffc8 	bl	80002c8 <__aeabi_dsub>
 800f338:	4602      	mov	r2, r0
 800f33a:	460b      	mov	r3, r1
 800f33c:	e78f      	b.n	800f25e <__ieee754_pow+0xfe>
 800f33e:	9b04      	ldr	r3, [sp, #16]
 800f340:	2b01      	cmp	r3, #1
 800f342:	f47f af2c 	bne.w	800f19e <__ieee754_pow+0x3e>
 800f346:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f34a:	4619      	mov	r1, r3
 800f34c:	e727      	b.n	800f19e <__ieee754_pow+0x3e>
 800f34e:	0feb      	lsrs	r3, r5, #31
 800f350:	3b01      	subs	r3, #1
 800f352:	9306      	str	r3, [sp, #24]
 800f354:	9a06      	ldr	r2, [sp, #24]
 800f356:	9b04      	ldr	r3, [sp, #16]
 800f358:	4313      	orrs	r3, r2
 800f35a:	d102      	bne.n	800f362 <__ieee754_pow+0x202>
 800f35c:	4632      	mov	r2, r6
 800f35e:	463b      	mov	r3, r7
 800f360:	e7e6      	b.n	800f330 <__ieee754_pow+0x1d0>
 800f362:	4b19      	ldr	r3, [pc, #100]	; (800f3c8 <__ieee754_pow+0x268>)
 800f364:	4598      	cmp	r8, r3
 800f366:	f340 80fb 	ble.w	800f560 <__ieee754_pow+0x400>
 800f36a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f36e:	4598      	cmp	r8, r3
 800f370:	4b13      	ldr	r3, [pc, #76]	; (800f3c0 <__ieee754_pow+0x260>)
 800f372:	dd0c      	ble.n	800f38e <__ieee754_pow+0x22e>
 800f374:	429c      	cmp	r4, r3
 800f376:	dc0f      	bgt.n	800f398 <__ieee754_pow+0x238>
 800f378:	f1b9 0f00 	cmp.w	r9, #0
 800f37c:	da0f      	bge.n	800f39e <__ieee754_pow+0x23e>
 800f37e:	2000      	movs	r0, #0
 800f380:	b009      	add	sp, #36	; 0x24
 800f382:	ecbd 8b06 	vpop	{d8-d10}
 800f386:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f38a:	f000 bd72 	b.w	800fe72 <__math_oflow>
 800f38e:	429c      	cmp	r4, r3
 800f390:	dbf2      	blt.n	800f378 <__ieee754_pow+0x218>
 800f392:	4b0a      	ldr	r3, [pc, #40]	; (800f3bc <__ieee754_pow+0x25c>)
 800f394:	429c      	cmp	r4, r3
 800f396:	dd19      	ble.n	800f3cc <__ieee754_pow+0x26c>
 800f398:	f1b9 0f00 	cmp.w	r9, #0
 800f39c:	dcef      	bgt.n	800f37e <__ieee754_pow+0x21e>
 800f39e:	2000      	movs	r0, #0
 800f3a0:	b009      	add	sp, #36	; 0x24
 800f3a2:	ecbd 8b06 	vpop	{d8-d10}
 800f3a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3aa:	f000 bd59 	b.w	800fe60 <__math_uflow>
 800f3ae:	bf00      	nop
 800f3b0:	fff00000 	.word	0xfff00000
 800f3b4:	7ff00000 	.word	0x7ff00000
 800f3b8:	433fffff 	.word	0x433fffff
 800f3bc:	3ff00000 	.word	0x3ff00000
 800f3c0:	3fefffff 	.word	0x3fefffff
 800f3c4:	3fe00000 	.word	0x3fe00000
 800f3c8:	41e00000 	.word	0x41e00000
 800f3cc:	4b60      	ldr	r3, [pc, #384]	; (800f550 <__ieee754_pow+0x3f0>)
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	f7f0 ff7a 	bl	80002c8 <__aeabi_dsub>
 800f3d4:	a354      	add	r3, pc, #336	; (adr r3, 800f528 <__ieee754_pow+0x3c8>)
 800f3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3da:	4604      	mov	r4, r0
 800f3dc:	460d      	mov	r5, r1
 800f3de:	f7f1 f92b 	bl	8000638 <__aeabi_dmul>
 800f3e2:	a353      	add	r3, pc, #332	; (adr r3, 800f530 <__ieee754_pow+0x3d0>)
 800f3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3e8:	4606      	mov	r6, r0
 800f3ea:	460f      	mov	r7, r1
 800f3ec:	4620      	mov	r0, r4
 800f3ee:	4629      	mov	r1, r5
 800f3f0:	f7f1 f922 	bl	8000638 <__aeabi_dmul>
 800f3f4:	4b57      	ldr	r3, [pc, #348]	; (800f554 <__ieee754_pow+0x3f4>)
 800f3f6:	4682      	mov	sl, r0
 800f3f8:	468b      	mov	fp, r1
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	4620      	mov	r0, r4
 800f3fe:	4629      	mov	r1, r5
 800f400:	f7f1 f91a 	bl	8000638 <__aeabi_dmul>
 800f404:	4602      	mov	r2, r0
 800f406:	460b      	mov	r3, r1
 800f408:	a14b      	add	r1, pc, #300	; (adr r1, 800f538 <__ieee754_pow+0x3d8>)
 800f40a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f40e:	f7f0 ff5b 	bl	80002c8 <__aeabi_dsub>
 800f412:	4622      	mov	r2, r4
 800f414:	462b      	mov	r3, r5
 800f416:	f7f1 f90f 	bl	8000638 <__aeabi_dmul>
 800f41a:	4602      	mov	r2, r0
 800f41c:	460b      	mov	r3, r1
 800f41e:	2000      	movs	r0, #0
 800f420:	494d      	ldr	r1, [pc, #308]	; (800f558 <__ieee754_pow+0x3f8>)
 800f422:	f7f0 ff51 	bl	80002c8 <__aeabi_dsub>
 800f426:	4622      	mov	r2, r4
 800f428:	4680      	mov	r8, r0
 800f42a:	4689      	mov	r9, r1
 800f42c:	462b      	mov	r3, r5
 800f42e:	4620      	mov	r0, r4
 800f430:	4629      	mov	r1, r5
 800f432:	f7f1 f901 	bl	8000638 <__aeabi_dmul>
 800f436:	4602      	mov	r2, r0
 800f438:	460b      	mov	r3, r1
 800f43a:	4640      	mov	r0, r8
 800f43c:	4649      	mov	r1, r9
 800f43e:	f7f1 f8fb 	bl	8000638 <__aeabi_dmul>
 800f442:	a33f      	add	r3, pc, #252	; (adr r3, 800f540 <__ieee754_pow+0x3e0>)
 800f444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f448:	f7f1 f8f6 	bl	8000638 <__aeabi_dmul>
 800f44c:	4602      	mov	r2, r0
 800f44e:	460b      	mov	r3, r1
 800f450:	4650      	mov	r0, sl
 800f452:	4659      	mov	r1, fp
 800f454:	f7f0 ff38 	bl	80002c8 <__aeabi_dsub>
 800f458:	4602      	mov	r2, r0
 800f45a:	460b      	mov	r3, r1
 800f45c:	4680      	mov	r8, r0
 800f45e:	4689      	mov	r9, r1
 800f460:	4630      	mov	r0, r6
 800f462:	4639      	mov	r1, r7
 800f464:	f7f0 ff32 	bl	80002cc <__adddf3>
 800f468:	2000      	movs	r0, #0
 800f46a:	4632      	mov	r2, r6
 800f46c:	463b      	mov	r3, r7
 800f46e:	4604      	mov	r4, r0
 800f470:	460d      	mov	r5, r1
 800f472:	f7f0 ff29 	bl	80002c8 <__aeabi_dsub>
 800f476:	4602      	mov	r2, r0
 800f478:	460b      	mov	r3, r1
 800f47a:	4640      	mov	r0, r8
 800f47c:	4649      	mov	r1, r9
 800f47e:	f7f0 ff23 	bl	80002c8 <__aeabi_dsub>
 800f482:	9b04      	ldr	r3, [sp, #16]
 800f484:	9a06      	ldr	r2, [sp, #24]
 800f486:	3b01      	subs	r3, #1
 800f488:	4313      	orrs	r3, r2
 800f48a:	4682      	mov	sl, r0
 800f48c:	468b      	mov	fp, r1
 800f48e:	f040 81e7 	bne.w	800f860 <__ieee754_pow+0x700>
 800f492:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800f548 <__ieee754_pow+0x3e8>
 800f496:	eeb0 8a47 	vmov.f32	s16, s14
 800f49a:	eef0 8a67 	vmov.f32	s17, s15
 800f49e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f4a2:	2600      	movs	r6, #0
 800f4a4:	4632      	mov	r2, r6
 800f4a6:	463b      	mov	r3, r7
 800f4a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f4ac:	f7f0 ff0c 	bl	80002c8 <__aeabi_dsub>
 800f4b0:	4622      	mov	r2, r4
 800f4b2:	462b      	mov	r3, r5
 800f4b4:	f7f1 f8c0 	bl	8000638 <__aeabi_dmul>
 800f4b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4bc:	4680      	mov	r8, r0
 800f4be:	4689      	mov	r9, r1
 800f4c0:	4650      	mov	r0, sl
 800f4c2:	4659      	mov	r1, fp
 800f4c4:	f7f1 f8b8 	bl	8000638 <__aeabi_dmul>
 800f4c8:	4602      	mov	r2, r0
 800f4ca:	460b      	mov	r3, r1
 800f4cc:	4640      	mov	r0, r8
 800f4ce:	4649      	mov	r1, r9
 800f4d0:	f7f0 fefc 	bl	80002cc <__adddf3>
 800f4d4:	4632      	mov	r2, r6
 800f4d6:	463b      	mov	r3, r7
 800f4d8:	4680      	mov	r8, r0
 800f4da:	4689      	mov	r9, r1
 800f4dc:	4620      	mov	r0, r4
 800f4de:	4629      	mov	r1, r5
 800f4e0:	f7f1 f8aa 	bl	8000638 <__aeabi_dmul>
 800f4e4:	460b      	mov	r3, r1
 800f4e6:	4604      	mov	r4, r0
 800f4e8:	460d      	mov	r5, r1
 800f4ea:	4602      	mov	r2, r0
 800f4ec:	4649      	mov	r1, r9
 800f4ee:	4640      	mov	r0, r8
 800f4f0:	f7f0 feec 	bl	80002cc <__adddf3>
 800f4f4:	4b19      	ldr	r3, [pc, #100]	; (800f55c <__ieee754_pow+0x3fc>)
 800f4f6:	4299      	cmp	r1, r3
 800f4f8:	ec45 4b19 	vmov	d9, r4, r5
 800f4fc:	4606      	mov	r6, r0
 800f4fe:	460f      	mov	r7, r1
 800f500:	468b      	mov	fp, r1
 800f502:	f340 82f1 	ble.w	800fae8 <__ieee754_pow+0x988>
 800f506:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f50a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f50e:	4303      	orrs	r3, r0
 800f510:	f000 81e4 	beq.w	800f8dc <__ieee754_pow+0x77c>
 800f514:	ec51 0b18 	vmov	r0, r1, d8
 800f518:	2200      	movs	r2, #0
 800f51a:	2300      	movs	r3, #0
 800f51c:	f7f1 fafe 	bl	8000b1c <__aeabi_dcmplt>
 800f520:	3800      	subs	r0, #0
 800f522:	bf18      	it	ne
 800f524:	2001      	movne	r0, #1
 800f526:	e72b      	b.n	800f380 <__ieee754_pow+0x220>
 800f528:	60000000 	.word	0x60000000
 800f52c:	3ff71547 	.word	0x3ff71547
 800f530:	f85ddf44 	.word	0xf85ddf44
 800f534:	3e54ae0b 	.word	0x3e54ae0b
 800f538:	55555555 	.word	0x55555555
 800f53c:	3fd55555 	.word	0x3fd55555
 800f540:	652b82fe 	.word	0x652b82fe
 800f544:	3ff71547 	.word	0x3ff71547
 800f548:	00000000 	.word	0x00000000
 800f54c:	bff00000 	.word	0xbff00000
 800f550:	3ff00000 	.word	0x3ff00000
 800f554:	3fd00000 	.word	0x3fd00000
 800f558:	3fe00000 	.word	0x3fe00000
 800f55c:	408fffff 	.word	0x408fffff
 800f560:	4bd5      	ldr	r3, [pc, #852]	; (800f8b8 <__ieee754_pow+0x758>)
 800f562:	402b      	ands	r3, r5
 800f564:	2200      	movs	r2, #0
 800f566:	b92b      	cbnz	r3, 800f574 <__ieee754_pow+0x414>
 800f568:	4bd4      	ldr	r3, [pc, #848]	; (800f8bc <__ieee754_pow+0x75c>)
 800f56a:	f7f1 f865 	bl	8000638 <__aeabi_dmul>
 800f56e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f572:	460c      	mov	r4, r1
 800f574:	1523      	asrs	r3, r4, #20
 800f576:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f57a:	4413      	add	r3, r2
 800f57c:	9305      	str	r3, [sp, #20]
 800f57e:	4bd0      	ldr	r3, [pc, #832]	; (800f8c0 <__ieee754_pow+0x760>)
 800f580:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f584:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f588:	429c      	cmp	r4, r3
 800f58a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f58e:	dd08      	ble.n	800f5a2 <__ieee754_pow+0x442>
 800f590:	4bcc      	ldr	r3, [pc, #816]	; (800f8c4 <__ieee754_pow+0x764>)
 800f592:	429c      	cmp	r4, r3
 800f594:	f340 8162 	ble.w	800f85c <__ieee754_pow+0x6fc>
 800f598:	9b05      	ldr	r3, [sp, #20]
 800f59a:	3301      	adds	r3, #1
 800f59c:	9305      	str	r3, [sp, #20]
 800f59e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f5a2:	2400      	movs	r4, #0
 800f5a4:	00e3      	lsls	r3, r4, #3
 800f5a6:	9307      	str	r3, [sp, #28]
 800f5a8:	4bc7      	ldr	r3, [pc, #796]	; (800f8c8 <__ieee754_pow+0x768>)
 800f5aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f5ae:	ed93 7b00 	vldr	d7, [r3]
 800f5b2:	4629      	mov	r1, r5
 800f5b4:	ec53 2b17 	vmov	r2, r3, d7
 800f5b8:	eeb0 9a47 	vmov.f32	s18, s14
 800f5bc:	eef0 9a67 	vmov.f32	s19, s15
 800f5c0:	4682      	mov	sl, r0
 800f5c2:	f7f0 fe81 	bl	80002c8 <__aeabi_dsub>
 800f5c6:	4652      	mov	r2, sl
 800f5c8:	4606      	mov	r6, r0
 800f5ca:	460f      	mov	r7, r1
 800f5cc:	462b      	mov	r3, r5
 800f5ce:	ec51 0b19 	vmov	r0, r1, d9
 800f5d2:	f7f0 fe7b 	bl	80002cc <__adddf3>
 800f5d6:	4602      	mov	r2, r0
 800f5d8:	460b      	mov	r3, r1
 800f5da:	2000      	movs	r0, #0
 800f5dc:	49bb      	ldr	r1, [pc, #748]	; (800f8cc <__ieee754_pow+0x76c>)
 800f5de:	f7f1 f955 	bl	800088c <__aeabi_ddiv>
 800f5e2:	ec41 0b1a 	vmov	d10, r0, r1
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	460b      	mov	r3, r1
 800f5ea:	4630      	mov	r0, r6
 800f5ec:	4639      	mov	r1, r7
 800f5ee:	f7f1 f823 	bl	8000638 <__aeabi_dmul>
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5f8:	9302      	str	r3, [sp, #8]
 800f5fa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f5fe:	46ab      	mov	fp, r5
 800f600:	106d      	asrs	r5, r5, #1
 800f602:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f606:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800f60a:	ec41 0b18 	vmov	d8, r0, r1
 800f60e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800f612:	2200      	movs	r2, #0
 800f614:	4640      	mov	r0, r8
 800f616:	4649      	mov	r1, r9
 800f618:	4614      	mov	r4, r2
 800f61a:	461d      	mov	r5, r3
 800f61c:	f7f1 f80c 	bl	8000638 <__aeabi_dmul>
 800f620:	4602      	mov	r2, r0
 800f622:	460b      	mov	r3, r1
 800f624:	4630      	mov	r0, r6
 800f626:	4639      	mov	r1, r7
 800f628:	f7f0 fe4e 	bl	80002c8 <__aeabi_dsub>
 800f62c:	ec53 2b19 	vmov	r2, r3, d9
 800f630:	4606      	mov	r6, r0
 800f632:	460f      	mov	r7, r1
 800f634:	4620      	mov	r0, r4
 800f636:	4629      	mov	r1, r5
 800f638:	f7f0 fe46 	bl	80002c8 <__aeabi_dsub>
 800f63c:	4602      	mov	r2, r0
 800f63e:	460b      	mov	r3, r1
 800f640:	4650      	mov	r0, sl
 800f642:	4659      	mov	r1, fp
 800f644:	f7f0 fe40 	bl	80002c8 <__aeabi_dsub>
 800f648:	4642      	mov	r2, r8
 800f64a:	464b      	mov	r3, r9
 800f64c:	f7f0 fff4 	bl	8000638 <__aeabi_dmul>
 800f650:	4602      	mov	r2, r0
 800f652:	460b      	mov	r3, r1
 800f654:	4630      	mov	r0, r6
 800f656:	4639      	mov	r1, r7
 800f658:	f7f0 fe36 	bl	80002c8 <__aeabi_dsub>
 800f65c:	ec53 2b1a 	vmov	r2, r3, d10
 800f660:	f7f0 ffea 	bl	8000638 <__aeabi_dmul>
 800f664:	ec53 2b18 	vmov	r2, r3, d8
 800f668:	ec41 0b19 	vmov	d9, r0, r1
 800f66c:	ec51 0b18 	vmov	r0, r1, d8
 800f670:	f7f0 ffe2 	bl	8000638 <__aeabi_dmul>
 800f674:	a37c      	add	r3, pc, #496	; (adr r3, 800f868 <__ieee754_pow+0x708>)
 800f676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f67a:	4604      	mov	r4, r0
 800f67c:	460d      	mov	r5, r1
 800f67e:	f7f0 ffdb 	bl	8000638 <__aeabi_dmul>
 800f682:	a37b      	add	r3, pc, #492	; (adr r3, 800f870 <__ieee754_pow+0x710>)
 800f684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f688:	f7f0 fe20 	bl	80002cc <__adddf3>
 800f68c:	4622      	mov	r2, r4
 800f68e:	462b      	mov	r3, r5
 800f690:	f7f0 ffd2 	bl	8000638 <__aeabi_dmul>
 800f694:	a378      	add	r3, pc, #480	; (adr r3, 800f878 <__ieee754_pow+0x718>)
 800f696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69a:	f7f0 fe17 	bl	80002cc <__adddf3>
 800f69e:	4622      	mov	r2, r4
 800f6a0:	462b      	mov	r3, r5
 800f6a2:	f7f0 ffc9 	bl	8000638 <__aeabi_dmul>
 800f6a6:	a376      	add	r3, pc, #472	; (adr r3, 800f880 <__ieee754_pow+0x720>)
 800f6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ac:	f7f0 fe0e 	bl	80002cc <__adddf3>
 800f6b0:	4622      	mov	r2, r4
 800f6b2:	462b      	mov	r3, r5
 800f6b4:	f7f0 ffc0 	bl	8000638 <__aeabi_dmul>
 800f6b8:	a373      	add	r3, pc, #460	; (adr r3, 800f888 <__ieee754_pow+0x728>)
 800f6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6be:	f7f0 fe05 	bl	80002cc <__adddf3>
 800f6c2:	4622      	mov	r2, r4
 800f6c4:	462b      	mov	r3, r5
 800f6c6:	f7f0 ffb7 	bl	8000638 <__aeabi_dmul>
 800f6ca:	a371      	add	r3, pc, #452	; (adr r3, 800f890 <__ieee754_pow+0x730>)
 800f6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d0:	f7f0 fdfc 	bl	80002cc <__adddf3>
 800f6d4:	4622      	mov	r2, r4
 800f6d6:	4606      	mov	r6, r0
 800f6d8:	460f      	mov	r7, r1
 800f6da:	462b      	mov	r3, r5
 800f6dc:	4620      	mov	r0, r4
 800f6de:	4629      	mov	r1, r5
 800f6e0:	f7f0 ffaa 	bl	8000638 <__aeabi_dmul>
 800f6e4:	4602      	mov	r2, r0
 800f6e6:	460b      	mov	r3, r1
 800f6e8:	4630      	mov	r0, r6
 800f6ea:	4639      	mov	r1, r7
 800f6ec:	f7f0 ffa4 	bl	8000638 <__aeabi_dmul>
 800f6f0:	4642      	mov	r2, r8
 800f6f2:	4604      	mov	r4, r0
 800f6f4:	460d      	mov	r5, r1
 800f6f6:	464b      	mov	r3, r9
 800f6f8:	ec51 0b18 	vmov	r0, r1, d8
 800f6fc:	f7f0 fde6 	bl	80002cc <__adddf3>
 800f700:	ec53 2b19 	vmov	r2, r3, d9
 800f704:	f7f0 ff98 	bl	8000638 <__aeabi_dmul>
 800f708:	4622      	mov	r2, r4
 800f70a:	462b      	mov	r3, r5
 800f70c:	f7f0 fdde 	bl	80002cc <__adddf3>
 800f710:	4642      	mov	r2, r8
 800f712:	4682      	mov	sl, r0
 800f714:	468b      	mov	fp, r1
 800f716:	464b      	mov	r3, r9
 800f718:	4640      	mov	r0, r8
 800f71a:	4649      	mov	r1, r9
 800f71c:	f7f0 ff8c 	bl	8000638 <__aeabi_dmul>
 800f720:	4b6b      	ldr	r3, [pc, #428]	; (800f8d0 <__ieee754_pow+0x770>)
 800f722:	2200      	movs	r2, #0
 800f724:	4606      	mov	r6, r0
 800f726:	460f      	mov	r7, r1
 800f728:	f7f0 fdd0 	bl	80002cc <__adddf3>
 800f72c:	4652      	mov	r2, sl
 800f72e:	465b      	mov	r3, fp
 800f730:	f7f0 fdcc 	bl	80002cc <__adddf3>
 800f734:	2000      	movs	r0, #0
 800f736:	4604      	mov	r4, r0
 800f738:	460d      	mov	r5, r1
 800f73a:	4602      	mov	r2, r0
 800f73c:	460b      	mov	r3, r1
 800f73e:	4640      	mov	r0, r8
 800f740:	4649      	mov	r1, r9
 800f742:	f7f0 ff79 	bl	8000638 <__aeabi_dmul>
 800f746:	4b62      	ldr	r3, [pc, #392]	; (800f8d0 <__ieee754_pow+0x770>)
 800f748:	4680      	mov	r8, r0
 800f74a:	4689      	mov	r9, r1
 800f74c:	2200      	movs	r2, #0
 800f74e:	4620      	mov	r0, r4
 800f750:	4629      	mov	r1, r5
 800f752:	f7f0 fdb9 	bl	80002c8 <__aeabi_dsub>
 800f756:	4632      	mov	r2, r6
 800f758:	463b      	mov	r3, r7
 800f75a:	f7f0 fdb5 	bl	80002c8 <__aeabi_dsub>
 800f75e:	4602      	mov	r2, r0
 800f760:	460b      	mov	r3, r1
 800f762:	4650      	mov	r0, sl
 800f764:	4659      	mov	r1, fp
 800f766:	f7f0 fdaf 	bl	80002c8 <__aeabi_dsub>
 800f76a:	ec53 2b18 	vmov	r2, r3, d8
 800f76e:	f7f0 ff63 	bl	8000638 <__aeabi_dmul>
 800f772:	4622      	mov	r2, r4
 800f774:	4606      	mov	r6, r0
 800f776:	460f      	mov	r7, r1
 800f778:	462b      	mov	r3, r5
 800f77a:	ec51 0b19 	vmov	r0, r1, d9
 800f77e:	f7f0 ff5b 	bl	8000638 <__aeabi_dmul>
 800f782:	4602      	mov	r2, r0
 800f784:	460b      	mov	r3, r1
 800f786:	4630      	mov	r0, r6
 800f788:	4639      	mov	r1, r7
 800f78a:	f7f0 fd9f 	bl	80002cc <__adddf3>
 800f78e:	4606      	mov	r6, r0
 800f790:	460f      	mov	r7, r1
 800f792:	4602      	mov	r2, r0
 800f794:	460b      	mov	r3, r1
 800f796:	4640      	mov	r0, r8
 800f798:	4649      	mov	r1, r9
 800f79a:	f7f0 fd97 	bl	80002cc <__adddf3>
 800f79e:	a33e      	add	r3, pc, #248	; (adr r3, 800f898 <__ieee754_pow+0x738>)
 800f7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a4:	2000      	movs	r0, #0
 800f7a6:	4604      	mov	r4, r0
 800f7a8:	460d      	mov	r5, r1
 800f7aa:	f7f0 ff45 	bl	8000638 <__aeabi_dmul>
 800f7ae:	4642      	mov	r2, r8
 800f7b0:	ec41 0b18 	vmov	d8, r0, r1
 800f7b4:	464b      	mov	r3, r9
 800f7b6:	4620      	mov	r0, r4
 800f7b8:	4629      	mov	r1, r5
 800f7ba:	f7f0 fd85 	bl	80002c8 <__aeabi_dsub>
 800f7be:	4602      	mov	r2, r0
 800f7c0:	460b      	mov	r3, r1
 800f7c2:	4630      	mov	r0, r6
 800f7c4:	4639      	mov	r1, r7
 800f7c6:	f7f0 fd7f 	bl	80002c8 <__aeabi_dsub>
 800f7ca:	a335      	add	r3, pc, #212	; (adr r3, 800f8a0 <__ieee754_pow+0x740>)
 800f7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d0:	f7f0 ff32 	bl	8000638 <__aeabi_dmul>
 800f7d4:	a334      	add	r3, pc, #208	; (adr r3, 800f8a8 <__ieee754_pow+0x748>)
 800f7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7da:	4606      	mov	r6, r0
 800f7dc:	460f      	mov	r7, r1
 800f7de:	4620      	mov	r0, r4
 800f7e0:	4629      	mov	r1, r5
 800f7e2:	f7f0 ff29 	bl	8000638 <__aeabi_dmul>
 800f7e6:	4602      	mov	r2, r0
 800f7e8:	460b      	mov	r3, r1
 800f7ea:	4630      	mov	r0, r6
 800f7ec:	4639      	mov	r1, r7
 800f7ee:	f7f0 fd6d 	bl	80002cc <__adddf3>
 800f7f2:	9a07      	ldr	r2, [sp, #28]
 800f7f4:	4b37      	ldr	r3, [pc, #220]	; (800f8d4 <__ieee754_pow+0x774>)
 800f7f6:	4413      	add	r3, r2
 800f7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7fc:	f7f0 fd66 	bl	80002cc <__adddf3>
 800f800:	4682      	mov	sl, r0
 800f802:	9805      	ldr	r0, [sp, #20]
 800f804:	468b      	mov	fp, r1
 800f806:	f7f0 fead 	bl	8000564 <__aeabi_i2d>
 800f80a:	9a07      	ldr	r2, [sp, #28]
 800f80c:	4b32      	ldr	r3, [pc, #200]	; (800f8d8 <__ieee754_pow+0x778>)
 800f80e:	4413      	add	r3, r2
 800f810:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f814:	4606      	mov	r6, r0
 800f816:	460f      	mov	r7, r1
 800f818:	4652      	mov	r2, sl
 800f81a:	465b      	mov	r3, fp
 800f81c:	ec51 0b18 	vmov	r0, r1, d8
 800f820:	f7f0 fd54 	bl	80002cc <__adddf3>
 800f824:	4642      	mov	r2, r8
 800f826:	464b      	mov	r3, r9
 800f828:	f7f0 fd50 	bl	80002cc <__adddf3>
 800f82c:	4632      	mov	r2, r6
 800f82e:	463b      	mov	r3, r7
 800f830:	f7f0 fd4c 	bl	80002cc <__adddf3>
 800f834:	2000      	movs	r0, #0
 800f836:	4632      	mov	r2, r6
 800f838:	463b      	mov	r3, r7
 800f83a:	4604      	mov	r4, r0
 800f83c:	460d      	mov	r5, r1
 800f83e:	f7f0 fd43 	bl	80002c8 <__aeabi_dsub>
 800f842:	4642      	mov	r2, r8
 800f844:	464b      	mov	r3, r9
 800f846:	f7f0 fd3f 	bl	80002c8 <__aeabi_dsub>
 800f84a:	ec53 2b18 	vmov	r2, r3, d8
 800f84e:	f7f0 fd3b 	bl	80002c8 <__aeabi_dsub>
 800f852:	4602      	mov	r2, r0
 800f854:	460b      	mov	r3, r1
 800f856:	4650      	mov	r0, sl
 800f858:	4659      	mov	r1, fp
 800f85a:	e610      	b.n	800f47e <__ieee754_pow+0x31e>
 800f85c:	2401      	movs	r4, #1
 800f85e:	e6a1      	b.n	800f5a4 <__ieee754_pow+0x444>
 800f860:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800f8b0 <__ieee754_pow+0x750>
 800f864:	e617      	b.n	800f496 <__ieee754_pow+0x336>
 800f866:	bf00      	nop
 800f868:	4a454eef 	.word	0x4a454eef
 800f86c:	3fca7e28 	.word	0x3fca7e28
 800f870:	93c9db65 	.word	0x93c9db65
 800f874:	3fcd864a 	.word	0x3fcd864a
 800f878:	a91d4101 	.word	0xa91d4101
 800f87c:	3fd17460 	.word	0x3fd17460
 800f880:	518f264d 	.word	0x518f264d
 800f884:	3fd55555 	.word	0x3fd55555
 800f888:	db6fabff 	.word	0xdb6fabff
 800f88c:	3fdb6db6 	.word	0x3fdb6db6
 800f890:	33333303 	.word	0x33333303
 800f894:	3fe33333 	.word	0x3fe33333
 800f898:	e0000000 	.word	0xe0000000
 800f89c:	3feec709 	.word	0x3feec709
 800f8a0:	dc3a03fd 	.word	0xdc3a03fd
 800f8a4:	3feec709 	.word	0x3feec709
 800f8a8:	145b01f5 	.word	0x145b01f5
 800f8ac:	be3e2fe0 	.word	0xbe3e2fe0
 800f8b0:	00000000 	.word	0x00000000
 800f8b4:	3ff00000 	.word	0x3ff00000
 800f8b8:	7ff00000 	.word	0x7ff00000
 800f8bc:	43400000 	.word	0x43400000
 800f8c0:	0003988e 	.word	0x0003988e
 800f8c4:	000bb679 	.word	0x000bb679
 800f8c8:	08011648 	.word	0x08011648
 800f8cc:	3ff00000 	.word	0x3ff00000
 800f8d0:	40080000 	.word	0x40080000
 800f8d4:	08011668 	.word	0x08011668
 800f8d8:	08011658 	.word	0x08011658
 800f8dc:	a3b5      	add	r3, pc, #724	; (adr r3, 800fbb4 <__ieee754_pow+0xa54>)
 800f8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8e2:	4640      	mov	r0, r8
 800f8e4:	4649      	mov	r1, r9
 800f8e6:	f7f0 fcf1 	bl	80002cc <__adddf3>
 800f8ea:	4622      	mov	r2, r4
 800f8ec:	ec41 0b1a 	vmov	d10, r0, r1
 800f8f0:	462b      	mov	r3, r5
 800f8f2:	4630      	mov	r0, r6
 800f8f4:	4639      	mov	r1, r7
 800f8f6:	f7f0 fce7 	bl	80002c8 <__aeabi_dsub>
 800f8fa:	4602      	mov	r2, r0
 800f8fc:	460b      	mov	r3, r1
 800f8fe:	ec51 0b1a 	vmov	r0, r1, d10
 800f902:	f7f1 f929 	bl	8000b58 <__aeabi_dcmpgt>
 800f906:	2800      	cmp	r0, #0
 800f908:	f47f ae04 	bne.w	800f514 <__ieee754_pow+0x3b4>
 800f90c:	4aa4      	ldr	r2, [pc, #656]	; (800fba0 <__ieee754_pow+0xa40>)
 800f90e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f912:	4293      	cmp	r3, r2
 800f914:	f340 8108 	ble.w	800fb28 <__ieee754_pow+0x9c8>
 800f918:	151b      	asrs	r3, r3, #20
 800f91a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f91e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f922:	fa4a f303 	asr.w	r3, sl, r3
 800f926:	445b      	add	r3, fp
 800f928:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f92c:	4e9d      	ldr	r6, [pc, #628]	; (800fba4 <__ieee754_pow+0xa44>)
 800f92e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f932:	4116      	asrs	r6, r2
 800f934:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800f938:	2000      	movs	r0, #0
 800f93a:	ea23 0106 	bic.w	r1, r3, r6
 800f93e:	f1c2 0214 	rsb	r2, r2, #20
 800f942:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f946:	fa4a fa02 	asr.w	sl, sl, r2
 800f94a:	f1bb 0f00 	cmp.w	fp, #0
 800f94e:	4602      	mov	r2, r0
 800f950:	460b      	mov	r3, r1
 800f952:	4620      	mov	r0, r4
 800f954:	4629      	mov	r1, r5
 800f956:	bfb8      	it	lt
 800f958:	f1ca 0a00 	rsblt	sl, sl, #0
 800f95c:	f7f0 fcb4 	bl	80002c8 <__aeabi_dsub>
 800f960:	ec41 0b19 	vmov	d9, r0, r1
 800f964:	4642      	mov	r2, r8
 800f966:	464b      	mov	r3, r9
 800f968:	ec51 0b19 	vmov	r0, r1, d9
 800f96c:	f7f0 fcae 	bl	80002cc <__adddf3>
 800f970:	a37b      	add	r3, pc, #492	; (adr r3, 800fb60 <__ieee754_pow+0xa00>)
 800f972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f976:	2000      	movs	r0, #0
 800f978:	4604      	mov	r4, r0
 800f97a:	460d      	mov	r5, r1
 800f97c:	f7f0 fe5c 	bl	8000638 <__aeabi_dmul>
 800f980:	ec53 2b19 	vmov	r2, r3, d9
 800f984:	4606      	mov	r6, r0
 800f986:	460f      	mov	r7, r1
 800f988:	4620      	mov	r0, r4
 800f98a:	4629      	mov	r1, r5
 800f98c:	f7f0 fc9c 	bl	80002c8 <__aeabi_dsub>
 800f990:	4602      	mov	r2, r0
 800f992:	460b      	mov	r3, r1
 800f994:	4640      	mov	r0, r8
 800f996:	4649      	mov	r1, r9
 800f998:	f7f0 fc96 	bl	80002c8 <__aeabi_dsub>
 800f99c:	a372      	add	r3, pc, #456	; (adr r3, 800fb68 <__ieee754_pow+0xa08>)
 800f99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9a2:	f7f0 fe49 	bl	8000638 <__aeabi_dmul>
 800f9a6:	a372      	add	r3, pc, #456	; (adr r3, 800fb70 <__ieee754_pow+0xa10>)
 800f9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ac:	4680      	mov	r8, r0
 800f9ae:	4689      	mov	r9, r1
 800f9b0:	4620      	mov	r0, r4
 800f9b2:	4629      	mov	r1, r5
 800f9b4:	f7f0 fe40 	bl	8000638 <__aeabi_dmul>
 800f9b8:	4602      	mov	r2, r0
 800f9ba:	460b      	mov	r3, r1
 800f9bc:	4640      	mov	r0, r8
 800f9be:	4649      	mov	r1, r9
 800f9c0:	f7f0 fc84 	bl	80002cc <__adddf3>
 800f9c4:	4604      	mov	r4, r0
 800f9c6:	460d      	mov	r5, r1
 800f9c8:	4602      	mov	r2, r0
 800f9ca:	460b      	mov	r3, r1
 800f9cc:	4630      	mov	r0, r6
 800f9ce:	4639      	mov	r1, r7
 800f9d0:	f7f0 fc7c 	bl	80002cc <__adddf3>
 800f9d4:	4632      	mov	r2, r6
 800f9d6:	463b      	mov	r3, r7
 800f9d8:	4680      	mov	r8, r0
 800f9da:	4689      	mov	r9, r1
 800f9dc:	f7f0 fc74 	bl	80002c8 <__aeabi_dsub>
 800f9e0:	4602      	mov	r2, r0
 800f9e2:	460b      	mov	r3, r1
 800f9e4:	4620      	mov	r0, r4
 800f9e6:	4629      	mov	r1, r5
 800f9e8:	f7f0 fc6e 	bl	80002c8 <__aeabi_dsub>
 800f9ec:	4642      	mov	r2, r8
 800f9ee:	4606      	mov	r6, r0
 800f9f0:	460f      	mov	r7, r1
 800f9f2:	464b      	mov	r3, r9
 800f9f4:	4640      	mov	r0, r8
 800f9f6:	4649      	mov	r1, r9
 800f9f8:	f7f0 fe1e 	bl	8000638 <__aeabi_dmul>
 800f9fc:	a35e      	add	r3, pc, #376	; (adr r3, 800fb78 <__ieee754_pow+0xa18>)
 800f9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa02:	4604      	mov	r4, r0
 800fa04:	460d      	mov	r5, r1
 800fa06:	f7f0 fe17 	bl	8000638 <__aeabi_dmul>
 800fa0a:	a35d      	add	r3, pc, #372	; (adr r3, 800fb80 <__ieee754_pow+0xa20>)
 800fa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa10:	f7f0 fc5a 	bl	80002c8 <__aeabi_dsub>
 800fa14:	4622      	mov	r2, r4
 800fa16:	462b      	mov	r3, r5
 800fa18:	f7f0 fe0e 	bl	8000638 <__aeabi_dmul>
 800fa1c:	a35a      	add	r3, pc, #360	; (adr r3, 800fb88 <__ieee754_pow+0xa28>)
 800fa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa22:	f7f0 fc53 	bl	80002cc <__adddf3>
 800fa26:	4622      	mov	r2, r4
 800fa28:	462b      	mov	r3, r5
 800fa2a:	f7f0 fe05 	bl	8000638 <__aeabi_dmul>
 800fa2e:	a358      	add	r3, pc, #352	; (adr r3, 800fb90 <__ieee754_pow+0xa30>)
 800fa30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa34:	f7f0 fc48 	bl	80002c8 <__aeabi_dsub>
 800fa38:	4622      	mov	r2, r4
 800fa3a:	462b      	mov	r3, r5
 800fa3c:	f7f0 fdfc 	bl	8000638 <__aeabi_dmul>
 800fa40:	a355      	add	r3, pc, #340	; (adr r3, 800fb98 <__ieee754_pow+0xa38>)
 800fa42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa46:	f7f0 fc41 	bl	80002cc <__adddf3>
 800fa4a:	4622      	mov	r2, r4
 800fa4c:	462b      	mov	r3, r5
 800fa4e:	f7f0 fdf3 	bl	8000638 <__aeabi_dmul>
 800fa52:	4602      	mov	r2, r0
 800fa54:	460b      	mov	r3, r1
 800fa56:	4640      	mov	r0, r8
 800fa58:	4649      	mov	r1, r9
 800fa5a:	f7f0 fc35 	bl	80002c8 <__aeabi_dsub>
 800fa5e:	4604      	mov	r4, r0
 800fa60:	460d      	mov	r5, r1
 800fa62:	4602      	mov	r2, r0
 800fa64:	460b      	mov	r3, r1
 800fa66:	4640      	mov	r0, r8
 800fa68:	4649      	mov	r1, r9
 800fa6a:	f7f0 fde5 	bl	8000638 <__aeabi_dmul>
 800fa6e:	2200      	movs	r2, #0
 800fa70:	ec41 0b19 	vmov	d9, r0, r1
 800fa74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fa78:	4620      	mov	r0, r4
 800fa7a:	4629      	mov	r1, r5
 800fa7c:	f7f0 fc24 	bl	80002c8 <__aeabi_dsub>
 800fa80:	4602      	mov	r2, r0
 800fa82:	460b      	mov	r3, r1
 800fa84:	ec51 0b19 	vmov	r0, r1, d9
 800fa88:	f7f0 ff00 	bl	800088c <__aeabi_ddiv>
 800fa8c:	4632      	mov	r2, r6
 800fa8e:	4604      	mov	r4, r0
 800fa90:	460d      	mov	r5, r1
 800fa92:	463b      	mov	r3, r7
 800fa94:	4640      	mov	r0, r8
 800fa96:	4649      	mov	r1, r9
 800fa98:	f7f0 fdce 	bl	8000638 <__aeabi_dmul>
 800fa9c:	4632      	mov	r2, r6
 800fa9e:	463b      	mov	r3, r7
 800faa0:	f7f0 fc14 	bl	80002cc <__adddf3>
 800faa4:	4602      	mov	r2, r0
 800faa6:	460b      	mov	r3, r1
 800faa8:	4620      	mov	r0, r4
 800faaa:	4629      	mov	r1, r5
 800faac:	f7f0 fc0c 	bl	80002c8 <__aeabi_dsub>
 800fab0:	4642      	mov	r2, r8
 800fab2:	464b      	mov	r3, r9
 800fab4:	f7f0 fc08 	bl	80002c8 <__aeabi_dsub>
 800fab8:	460b      	mov	r3, r1
 800faba:	4602      	mov	r2, r0
 800fabc:	493a      	ldr	r1, [pc, #232]	; (800fba8 <__ieee754_pow+0xa48>)
 800fabe:	2000      	movs	r0, #0
 800fac0:	f7f0 fc02 	bl	80002c8 <__aeabi_dsub>
 800fac4:	ec41 0b10 	vmov	d0, r0, r1
 800fac8:	ee10 3a90 	vmov	r3, s1
 800facc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800fad0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fad4:	da2b      	bge.n	800fb2e <__ieee754_pow+0x9ce>
 800fad6:	4650      	mov	r0, sl
 800fad8:	f000 f9ea 	bl	800feb0 <scalbn>
 800fadc:	ec51 0b10 	vmov	r0, r1, d0
 800fae0:	ec53 2b18 	vmov	r2, r3, d8
 800fae4:	f7ff bbed 	b.w	800f2c2 <__ieee754_pow+0x162>
 800fae8:	4b30      	ldr	r3, [pc, #192]	; (800fbac <__ieee754_pow+0xa4c>)
 800faea:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800faee:	429e      	cmp	r6, r3
 800faf0:	f77f af0c 	ble.w	800f90c <__ieee754_pow+0x7ac>
 800faf4:	4b2e      	ldr	r3, [pc, #184]	; (800fbb0 <__ieee754_pow+0xa50>)
 800faf6:	440b      	add	r3, r1
 800faf8:	4303      	orrs	r3, r0
 800fafa:	d009      	beq.n	800fb10 <__ieee754_pow+0x9b0>
 800fafc:	ec51 0b18 	vmov	r0, r1, d8
 800fb00:	2200      	movs	r2, #0
 800fb02:	2300      	movs	r3, #0
 800fb04:	f7f1 f80a 	bl	8000b1c <__aeabi_dcmplt>
 800fb08:	3800      	subs	r0, #0
 800fb0a:	bf18      	it	ne
 800fb0c:	2001      	movne	r0, #1
 800fb0e:	e447      	b.n	800f3a0 <__ieee754_pow+0x240>
 800fb10:	4622      	mov	r2, r4
 800fb12:	462b      	mov	r3, r5
 800fb14:	f7f0 fbd8 	bl	80002c8 <__aeabi_dsub>
 800fb18:	4642      	mov	r2, r8
 800fb1a:	464b      	mov	r3, r9
 800fb1c:	f7f1 f812 	bl	8000b44 <__aeabi_dcmpge>
 800fb20:	2800      	cmp	r0, #0
 800fb22:	f43f aef3 	beq.w	800f90c <__ieee754_pow+0x7ac>
 800fb26:	e7e9      	b.n	800fafc <__ieee754_pow+0x99c>
 800fb28:	f04f 0a00 	mov.w	sl, #0
 800fb2c:	e71a      	b.n	800f964 <__ieee754_pow+0x804>
 800fb2e:	ec51 0b10 	vmov	r0, r1, d0
 800fb32:	4619      	mov	r1, r3
 800fb34:	e7d4      	b.n	800fae0 <__ieee754_pow+0x980>
 800fb36:	491c      	ldr	r1, [pc, #112]	; (800fba8 <__ieee754_pow+0xa48>)
 800fb38:	2000      	movs	r0, #0
 800fb3a:	f7ff bb30 	b.w	800f19e <__ieee754_pow+0x3e>
 800fb3e:	2000      	movs	r0, #0
 800fb40:	2100      	movs	r1, #0
 800fb42:	f7ff bb2c 	b.w	800f19e <__ieee754_pow+0x3e>
 800fb46:	4630      	mov	r0, r6
 800fb48:	4639      	mov	r1, r7
 800fb4a:	f7ff bb28 	b.w	800f19e <__ieee754_pow+0x3e>
 800fb4e:	9204      	str	r2, [sp, #16]
 800fb50:	f7ff bb7a 	b.w	800f248 <__ieee754_pow+0xe8>
 800fb54:	2300      	movs	r3, #0
 800fb56:	f7ff bb64 	b.w	800f222 <__ieee754_pow+0xc2>
 800fb5a:	bf00      	nop
 800fb5c:	f3af 8000 	nop.w
 800fb60:	00000000 	.word	0x00000000
 800fb64:	3fe62e43 	.word	0x3fe62e43
 800fb68:	fefa39ef 	.word	0xfefa39ef
 800fb6c:	3fe62e42 	.word	0x3fe62e42
 800fb70:	0ca86c39 	.word	0x0ca86c39
 800fb74:	be205c61 	.word	0xbe205c61
 800fb78:	72bea4d0 	.word	0x72bea4d0
 800fb7c:	3e663769 	.word	0x3e663769
 800fb80:	c5d26bf1 	.word	0xc5d26bf1
 800fb84:	3ebbbd41 	.word	0x3ebbbd41
 800fb88:	af25de2c 	.word	0xaf25de2c
 800fb8c:	3f11566a 	.word	0x3f11566a
 800fb90:	16bebd93 	.word	0x16bebd93
 800fb94:	3f66c16c 	.word	0x3f66c16c
 800fb98:	5555553e 	.word	0x5555553e
 800fb9c:	3fc55555 	.word	0x3fc55555
 800fba0:	3fe00000 	.word	0x3fe00000
 800fba4:	000fffff 	.word	0x000fffff
 800fba8:	3ff00000 	.word	0x3ff00000
 800fbac:	4090cbff 	.word	0x4090cbff
 800fbb0:	3f6f3400 	.word	0x3f6f3400
 800fbb4:	652b82fe 	.word	0x652b82fe
 800fbb8:	3c971547 	.word	0x3c971547

0800fbbc <__ieee754_sqrt>:
 800fbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbc0:	ec55 4b10 	vmov	r4, r5, d0
 800fbc4:	4e55      	ldr	r6, [pc, #340]	; (800fd1c <__ieee754_sqrt+0x160>)
 800fbc6:	43ae      	bics	r6, r5
 800fbc8:	ee10 0a10 	vmov	r0, s0
 800fbcc:	ee10 3a10 	vmov	r3, s0
 800fbd0:	462a      	mov	r2, r5
 800fbd2:	4629      	mov	r1, r5
 800fbd4:	d110      	bne.n	800fbf8 <__ieee754_sqrt+0x3c>
 800fbd6:	ee10 2a10 	vmov	r2, s0
 800fbda:	462b      	mov	r3, r5
 800fbdc:	f7f0 fd2c 	bl	8000638 <__aeabi_dmul>
 800fbe0:	4602      	mov	r2, r0
 800fbe2:	460b      	mov	r3, r1
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	4629      	mov	r1, r5
 800fbe8:	f7f0 fb70 	bl	80002cc <__adddf3>
 800fbec:	4604      	mov	r4, r0
 800fbee:	460d      	mov	r5, r1
 800fbf0:	ec45 4b10 	vmov	d0, r4, r5
 800fbf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbf8:	2d00      	cmp	r5, #0
 800fbfa:	dc10      	bgt.n	800fc1e <__ieee754_sqrt+0x62>
 800fbfc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fc00:	4330      	orrs	r0, r6
 800fc02:	d0f5      	beq.n	800fbf0 <__ieee754_sqrt+0x34>
 800fc04:	b15d      	cbz	r5, 800fc1e <__ieee754_sqrt+0x62>
 800fc06:	ee10 2a10 	vmov	r2, s0
 800fc0a:	462b      	mov	r3, r5
 800fc0c:	ee10 0a10 	vmov	r0, s0
 800fc10:	f7f0 fb5a 	bl	80002c8 <__aeabi_dsub>
 800fc14:	4602      	mov	r2, r0
 800fc16:	460b      	mov	r3, r1
 800fc18:	f7f0 fe38 	bl	800088c <__aeabi_ddiv>
 800fc1c:	e7e6      	b.n	800fbec <__ieee754_sqrt+0x30>
 800fc1e:	1512      	asrs	r2, r2, #20
 800fc20:	d074      	beq.n	800fd0c <__ieee754_sqrt+0x150>
 800fc22:	07d4      	lsls	r4, r2, #31
 800fc24:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fc28:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800fc2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800fc30:	bf5e      	ittt	pl
 800fc32:	0fda      	lsrpl	r2, r3, #31
 800fc34:	005b      	lslpl	r3, r3, #1
 800fc36:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800fc3a:	2400      	movs	r4, #0
 800fc3c:	0fda      	lsrs	r2, r3, #31
 800fc3e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800fc42:	107f      	asrs	r7, r7, #1
 800fc44:	005b      	lsls	r3, r3, #1
 800fc46:	2516      	movs	r5, #22
 800fc48:	4620      	mov	r0, r4
 800fc4a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800fc4e:	1886      	adds	r6, r0, r2
 800fc50:	428e      	cmp	r6, r1
 800fc52:	bfde      	ittt	le
 800fc54:	1b89      	suble	r1, r1, r6
 800fc56:	18b0      	addle	r0, r6, r2
 800fc58:	18a4      	addle	r4, r4, r2
 800fc5a:	0049      	lsls	r1, r1, #1
 800fc5c:	3d01      	subs	r5, #1
 800fc5e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800fc62:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800fc66:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fc6a:	d1f0      	bne.n	800fc4e <__ieee754_sqrt+0x92>
 800fc6c:	462a      	mov	r2, r5
 800fc6e:	f04f 0e20 	mov.w	lr, #32
 800fc72:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800fc76:	4281      	cmp	r1, r0
 800fc78:	eb06 0c05 	add.w	ip, r6, r5
 800fc7c:	dc02      	bgt.n	800fc84 <__ieee754_sqrt+0xc8>
 800fc7e:	d113      	bne.n	800fca8 <__ieee754_sqrt+0xec>
 800fc80:	459c      	cmp	ip, r3
 800fc82:	d811      	bhi.n	800fca8 <__ieee754_sqrt+0xec>
 800fc84:	f1bc 0f00 	cmp.w	ip, #0
 800fc88:	eb0c 0506 	add.w	r5, ip, r6
 800fc8c:	da43      	bge.n	800fd16 <__ieee754_sqrt+0x15a>
 800fc8e:	2d00      	cmp	r5, #0
 800fc90:	db41      	blt.n	800fd16 <__ieee754_sqrt+0x15a>
 800fc92:	f100 0801 	add.w	r8, r0, #1
 800fc96:	1a09      	subs	r1, r1, r0
 800fc98:	459c      	cmp	ip, r3
 800fc9a:	bf88      	it	hi
 800fc9c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800fca0:	eba3 030c 	sub.w	r3, r3, ip
 800fca4:	4432      	add	r2, r6
 800fca6:	4640      	mov	r0, r8
 800fca8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800fcac:	f1be 0e01 	subs.w	lr, lr, #1
 800fcb0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800fcb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fcb8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800fcbc:	d1db      	bne.n	800fc76 <__ieee754_sqrt+0xba>
 800fcbe:	430b      	orrs	r3, r1
 800fcc0:	d006      	beq.n	800fcd0 <__ieee754_sqrt+0x114>
 800fcc2:	1c50      	adds	r0, r2, #1
 800fcc4:	bf13      	iteet	ne
 800fcc6:	3201      	addne	r2, #1
 800fcc8:	3401      	addeq	r4, #1
 800fcca:	4672      	moveq	r2, lr
 800fccc:	f022 0201 	bicne.w	r2, r2, #1
 800fcd0:	1063      	asrs	r3, r4, #1
 800fcd2:	0852      	lsrs	r2, r2, #1
 800fcd4:	07e1      	lsls	r1, r4, #31
 800fcd6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800fcda:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800fcde:	bf48      	it	mi
 800fce0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800fce4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800fce8:	4614      	mov	r4, r2
 800fcea:	e781      	b.n	800fbf0 <__ieee754_sqrt+0x34>
 800fcec:	0ad9      	lsrs	r1, r3, #11
 800fcee:	3815      	subs	r0, #21
 800fcf0:	055b      	lsls	r3, r3, #21
 800fcf2:	2900      	cmp	r1, #0
 800fcf4:	d0fa      	beq.n	800fcec <__ieee754_sqrt+0x130>
 800fcf6:	02cd      	lsls	r5, r1, #11
 800fcf8:	d50a      	bpl.n	800fd10 <__ieee754_sqrt+0x154>
 800fcfa:	f1c2 0420 	rsb	r4, r2, #32
 800fcfe:	fa23 f404 	lsr.w	r4, r3, r4
 800fd02:	1e55      	subs	r5, r2, #1
 800fd04:	4093      	lsls	r3, r2
 800fd06:	4321      	orrs	r1, r4
 800fd08:	1b42      	subs	r2, r0, r5
 800fd0a:	e78a      	b.n	800fc22 <__ieee754_sqrt+0x66>
 800fd0c:	4610      	mov	r0, r2
 800fd0e:	e7f0      	b.n	800fcf2 <__ieee754_sqrt+0x136>
 800fd10:	0049      	lsls	r1, r1, #1
 800fd12:	3201      	adds	r2, #1
 800fd14:	e7ef      	b.n	800fcf6 <__ieee754_sqrt+0x13a>
 800fd16:	4680      	mov	r8, r0
 800fd18:	e7bd      	b.n	800fc96 <__ieee754_sqrt+0xda>
 800fd1a:	bf00      	nop
 800fd1c:	7ff00000 	.word	0x7ff00000

0800fd20 <__ieee754_fmodf>:
 800fd20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd22:	ee10 5a90 	vmov	r5, s1
 800fd26:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 800fd2a:	d009      	beq.n	800fd40 <__ieee754_fmodf+0x20>
 800fd2c:	ee10 2a10 	vmov	r2, s0
 800fd30:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800fd34:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fd38:	da02      	bge.n	800fd40 <__ieee754_fmodf+0x20>
 800fd3a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800fd3e:	dd04      	ble.n	800fd4a <__ieee754_fmodf+0x2a>
 800fd40:	ee60 0a20 	vmul.f32	s1, s0, s1
 800fd44:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800fd48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd4a:	42a3      	cmp	r3, r4
 800fd4c:	dbfc      	blt.n	800fd48 <__ieee754_fmodf+0x28>
 800fd4e:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 800fd52:	d105      	bne.n	800fd60 <__ieee754_fmodf+0x40>
 800fd54:	4b32      	ldr	r3, [pc, #200]	; (800fe20 <__ieee754_fmodf+0x100>)
 800fd56:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 800fd5a:	ed93 0a00 	vldr	s0, [r3]
 800fd5e:	e7f3      	b.n	800fd48 <__ieee754_fmodf+0x28>
 800fd60:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800fd64:	d13f      	bne.n	800fde6 <__ieee754_fmodf+0xc6>
 800fd66:	0219      	lsls	r1, r3, #8
 800fd68:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800fd6c:	2900      	cmp	r1, #0
 800fd6e:	dc37      	bgt.n	800fde0 <__ieee754_fmodf+0xc0>
 800fd70:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 800fd74:	d13d      	bne.n	800fdf2 <__ieee754_fmodf+0xd2>
 800fd76:	0227      	lsls	r7, r4, #8
 800fd78:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800fd7c:	2f00      	cmp	r7, #0
 800fd7e:	da35      	bge.n	800fdec <__ieee754_fmodf+0xcc>
 800fd80:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800fd84:	bfbb      	ittet	lt
 800fd86:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800fd8a:	1a12      	sublt	r2, r2, r0
 800fd8c:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800fd90:	4093      	lsllt	r3, r2
 800fd92:	bfa8      	it	ge
 800fd94:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800fd98:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800fd9c:	bfb5      	itete	lt
 800fd9e:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800fda2:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800fda6:	1a52      	sublt	r2, r2, r1
 800fda8:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 800fdac:	bfb8      	it	lt
 800fdae:	4094      	lsllt	r4, r2
 800fdb0:	1a40      	subs	r0, r0, r1
 800fdb2:	1b1a      	subs	r2, r3, r4
 800fdb4:	bb00      	cbnz	r0, 800fdf8 <__ieee754_fmodf+0xd8>
 800fdb6:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800fdba:	bf38      	it	cc
 800fdbc:	4613      	movcc	r3, r2
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d0c8      	beq.n	800fd54 <__ieee754_fmodf+0x34>
 800fdc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fdc6:	db1f      	blt.n	800fe08 <__ieee754_fmodf+0xe8>
 800fdc8:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800fdcc:	db1f      	blt.n	800fe0e <__ieee754_fmodf+0xee>
 800fdce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800fdd2:	317f      	adds	r1, #127	; 0x7f
 800fdd4:	4333      	orrs	r3, r6
 800fdd6:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800fdda:	ee00 3a10 	vmov	s0, r3
 800fdde:	e7b3      	b.n	800fd48 <__ieee754_fmodf+0x28>
 800fde0:	3801      	subs	r0, #1
 800fde2:	0049      	lsls	r1, r1, #1
 800fde4:	e7c2      	b.n	800fd6c <__ieee754_fmodf+0x4c>
 800fde6:	15d8      	asrs	r0, r3, #23
 800fde8:	387f      	subs	r0, #127	; 0x7f
 800fdea:	e7c1      	b.n	800fd70 <__ieee754_fmodf+0x50>
 800fdec:	3901      	subs	r1, #1
 800fdee:	007f      	lsls	r7, r7, #1
 800fdf0:	e7c4      	b.n	800fd7c <__ieee754_fmodf+0x5c>
 800fdf2:	15e1      	asrs	r1, r4, #23
 800fdf4:	397f      	subs	r1, #127	; 0x7f
 800fdf6:	e7c3      	b.n	800fd80 <__ieee754_fmodf+0x60>
 800fdf8:	2a00      	cmp	r2, #0
 800fdfa:	da02      	bge.n	800fe02 <__ieee754_fmodf+0xe2>
 800fdfc:	005b      	lsls	r3, r3, #1
 800fdfe:	3801      	subs	r0, #1
 800fe00:	e7d7      	b.n	800fdb2 <__ieee754_fmodf+0x92>
 800fe02:	d0a7      	beq.n	800fd54 <__ieee754_fmodf+0x34>
 800fe04:	0053      	lsls	r3, r2, #1
 800fe06:	e7fa      	b.n	800fdfe <__ieee754_fmodf+0xde>
 800fe08:	005b      	lsls	r3, r3, #1
 800fe0a:	3901      	subs	r1, #1
 800fe0c:	e7d9      	b.n	800fdc2 <__ieee754_fmodf+0xa2>
 800fe0e:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800fe12:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800fe16:	3182      	adds	r1, #130	; 0x82
 800fe18:	410b      	asrs	r3, r1
 800fe1a:	4333      	orrs	r3, r6
 800fe1c:	e7dd      	b.n	800fdda <__ieee754_fmodf+0xba>
 800fe1e:	bf00      	nop
 800fe20:	08011678 	.word	0x08011678

0800fe24 <with_errno>:
 800fe24:	b570      	push	{r4, r5, r6, lr}
 800fe26:	4604      	mov	r4, r0
 800fe28:	460d      	mov	r5, r1
 800fe2a:	4616      	mov	r6, r2
 800fe2c:	f7fa fd64 	bl	800a8f8 <__errno>
 800fe30:	4629      	mov	r1, r5
 800fe32:	6006      	str	r6, [r0, #0]
 800fe34:	4620      	mov	r0, r4
 800fe36:	bd70      	pop	{r4, r5, r6, pc}

0800fe38 <xflow>:
 800fe38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe3a:	4614      	mov	r4, r2
 800fe3c:	461d      	mov	r5, r3
 800fe3e:	b108      	cbz	r0, 800fe44 <xflow+0xc>
 800fe40:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fe44:	e9cd 2300 	strd	r2, r3, [sp]
 800fe48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe4c:	4620      	mov	r0, r4
 800fe4e:	4629      	mov	r1, r5
 800fe50:	f7f0 fbf2 	bl	8000638 <__aeabi_dmul>
 800fe54:	2222      	movs	r2, #34	; 0x22
 800fe56:	b003      	add	sp, #12
 800fe58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe5c:	f7ff bfe2 	b.w	800fe24 <with_errno>

0800fe60 <__math_uflow>:
 800fe60:	b508      	push	{r3, lr}
 800fe62:	2200      	movs	r2, #0
 800fe64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fe68:	f7ff ffe6 	bl	800fe38 <xflow>
 800fe6c:	ec41 0b10 	vmov	d0, r0, r1
 800fe70:	bd08      	pop	{r3, pc}

0800fe72 <__math_oflow>:
 800fe72:	b508      	push	{r3, lr}
 800fe74:	2200      	movs	r2, #0
 800fe76:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800fe7a:	f7ff ffdd 	bl	800fe38 <xflow>
 800fe7e:	ec41 0b10 	vmov	d0, r0, r1
 800fe82:	bd08      	pop	{r3, pc}

0800fe84 <fabs>:
 800fe84:	ec51 0b10 	vmov	r0, r1, d0
 800fe88:	ee10 2a10 	vmov	r2, s0
 800fe8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fe90:	ec43 2b10 	vmov	d0, r2, r3
 800fe94:	4770      	bx	lr

0800fe96 <finite>:
 800fe96:	b082      	sub	sp, #8
 800fe98:	ed8d 0b00 	vstr	d0, [sp]
 800fe9c:	9801      	ldr	r0, [sp, #4]
 800fe9e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800fea2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800fea6:	0fc0      	lsrs	r0, r0, #31
 800fea8:	b002      	add	sp, #8
 800feaa:	4770      	bx	lr
 800feac:	0000      	movs	r0, r0
	...

0800feb0 <scalbn>:
 800feb0:	b570      	push	{r4, r5, r6, lr}
 800feb2:	ec55 4b10 	vmov	r4, r5, d0
 800feb6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800feba:	4606      	mov	r6, r0
 800febc:	462b      	mov	r3, r5
 800febe:	b99a      	cbnz	r2, 800fee8 <scalbn+0x38>
 800fec0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fec4:	4323      	orrs	r3, r4
 800fec6:	d036      	beq.n	800ff36 <scalbn+0x86>
 800fec8:	4b39      	ldr	r3, [pc, #228]	; (800ffb0 <scalbn+0x100>)
 800feca:	4629      	mov	r1, r5
 800fecc:	ee10 0a10 	vmov	r0, s0
 800fed0:	2200      	movs	r2, #0
 800fed2:	f7f0 fbb1 	bl	8000638 <__aeabi_dmul>
 800fed6:	4b37      	ldr	r3, [pc, #220]	; (800ffb4 <scalbn+0x104>)
 800fed8:	429e      	cmp	r6, r3
 800feda:	4604      	mov	r4, r0
 800fedc:	460d      	mov	r5, r1
 800fede:	da10      	bge.n	800ff02 <scalbn+0x52>
 800fee0:	a32b      	add	r3, pc, #172	; (adr r3, 800ff90 <scalbn+0xe0>)
 800fee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee6:	e03a      	b.n	800ff5e <scalbn+0xae>
 800fee8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800feec:	428a      	cmp	r2, r1
 800feee:	d10c      	bne.n	800ff0a <scalbn+0x5a>
 800fef0:	ee10 2a10 	vmov	r2, s0
 800fef4:	4620      	mov	r0, r4
 800fef6:	4629      	mov	r1, r5
 800fef8:	f7f0 f9e8 	bl	80002cc <__adddf3>
 800fefc:	4604      	mov	r4, r0
 800fefe:	460d      	mov	r5, r1
 800ff00:	e019      	b.n	800ff36 <scalbn+0x86>
 800ff02:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ff06:	460b      	mov	r3, r1
 800ff08:	3a36      	subs	r2, #54	; 0x36
 800ff0a:	4432      	add	r2, r6
 800ff0c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ff10:	428a      	cmp	r2, r1
 800ff12:	dd08      	ble.n	800ff26 <scalbn+0x76>
 800ff14:	2d00      	cmp	r5, #0
 800ff16:	a120      	add	r1, pc, #128	; (adr r1, 800ff98 <scalbn+0xe8>)
 800ff18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff1c:	da1c      	bge.n	800ff58 <scalbn+0xa8>
 800ff1e:	a120      	add	r1, pc, #128	; (adr r1, 800ffa0 <scalbn+0xf0>)
 800ff20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff24:	e018      	b.n	800ff58 <scalbn+0xa8>
 800ff26:	2a00      	cmp	r2, #0
 800ff28:	dd08      	ble.n	800ff3c <scalbn+0x8c>
 800ff2a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ff2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ff32:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ff36:	ec45 4b10 	vmov	d0, r4, r5
 800ff3a:	bd70      	pop	{r4, r5, r6, pc}
 800ff3c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ff40:	da19      	bge.n	800ff76 <scalbn+0xc6>
 800ff42:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ff46:	429e      	cmp	r6, r3
 800ff48:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ff4c:	dd0a      	ble.n	800ff64 <scalbn+0xb4>
 800ff4e:	a112      	add	r1, pc, #72	; (adr r1, 800ff98 <scalbn+0xe8>)
 800ff50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d1e2      	bne.n	800ff1e <scalbn+0x6e>
 800ff58:	a30f      	add	r3, pc, #60	; (adr r3, 800ff98 <scalbn+0xe8>)
 800ff5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff5e:	f7f0 fb6b 	bl	8000638 <__aeabi_dmul>
 800ff62:	e7cb      	b.n	800fefc <scalbn+0x4c>
 800ff64:	a10a      	add	r1, pc, #40	; (adr r1, 800ff90 <scalbn+0xe0>)
 800ff66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d0b8      	beq.n	800fee0 <scalbn+0x30>
 800ff6e:	a10e      	add	r1, pc, #56	; (adr r1, 800ffa8 <scalbn+0xf8>)
 800ff70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff74:	e7b4      	b.n	800fee0 <scalbn+0x30>
 800ff76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ff7a:	3236      	adds	r2, #54	; 0x36
 800ff7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ff80:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ff84:	4620      	mov	r0, r4
 800ff86:	4b0c      	ldr	r3, [pc, #48]	; (800ffb8 <scalbn+0x108>)
 800ff88:	2200      	movs	r2, #0
 800ff8a:	e7e8      	b.n	800ff5e <scalbn+0xae>
 800ff8c:	f3af 8000 	nop.w
 800ff90:	c2f8f359 	.word	0xc2f8f359
 800ff94:	01a56e1f 	.word	0x01a56e1f
 800ff98:	8800759c 	.word	0x8800759c
 800ff9c:	7e37e43c 	.word	0x7e37e43c
 800ffa0:	8800759c 	.word	0x8800759c
 800ffa4:	fe37e43c 	.word	0xfe37e43c
 800ffa8:	c2f8f359 	.word	0xc2f8f359
 800ffac:	81a56e1f 	.word	0x81a56e1f
 800ffb0:	43500000 	.word	0x43500000
 800ffb4:	ffff3cb0 	.word	0xffff3cb0
 800ffb8:	3c900000 	.word	0x3c900000

0800ffbc <_init>:
 800ffbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffbe:	bf00      	nop
 800ffc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffc2:	bc08      	pop	{r3}
 800ffc4:	469e      	mov	lr, r3
 800ffc6:	4770      	bx	lr

0800ffc8 <_fini>:
 800ffc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffca:	bf00      	nop
 800ffcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffce:	bc08      	pop	{r3}
 800ffd0:	469e      	mov	lr, r3
 800ffd2:	4770      	bx	lr
